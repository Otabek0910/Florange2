"""add_inventory_system

Revision ID: d8bc4b6382fc
Revises: c86cf6a35e78
Create Date: 2025-08-14 19:11:15.304334

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = 'd8bc4b6382fc'
down_revision: Union[str, Sequence[str], None] = 'c86cf6a35e78'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('flowers',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name_ru', sa.String(length=255), nullable=False),
    sa.Column('name_uz', sa.String(length=255), nullable=False),
    sa.Column('unit_type', sa.String(length=20), nullable=False),
    sa.Column('min_stock', sa.Integer(), nullable=True),
    sa.Column('max_stock', sa.Integer(), nullable=True),
    sa.Column('shelf_life_days', sa.Integer(), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('suppliers',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=255), nullable=False),
    sa.Column('contact_person', sa.String(length=255), nullable=True),
    sa.Column('phone', sa.String(length=20), nullable=True),
    sa.Column('email', sa.String(length=255), nullable=True),
    sa.Column('rating', sa.Numeric(precision=3, scale=2), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=True),
    sa.Column('notes', sa.Text(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('supply_orders',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('supplier_id', sa.Integer(), nullable=False),
    sa.Column('florist_id', sa.Integer(), nullable=False),
    sa.Column('status', sa.Enum('pending', 'approved', 'ordered', 'delivered', 'rejected', name='supplystatusenum'), nullable=True),
    sa.Column('total_amount', sa.Numeric(precision=10, scale=2), nullable=True),
    sa.Column('notes', sa.Text(), nullable=True),
    sa.Column('delivery_date', sa.Date(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('approved_at', sa.DateTime(), nullable=True),
    sa.Column('approved_by', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['approved_by'], ['users.id'], ),
    sa.ForeignKeyConstraint(['florist_id'], ['users.id'], ),
    sa.ForeignKeyConstraint(['supplier_id'], ['suppliers.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('inventory_batches',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('flower_id', sa.Integer(), nullable=False),
    sa.Column('supplier_id', sa.Integer(), nullable=True),
    sa.Column('quantity', sa.Integer(), nullable=False),
    sa.Column('purchase_price', sa.Numeric(precision=10, scale=2), nullable=True),
    sa.Column('batch_date', sa.Date(), nullable=True),
    sa.Column('expire_date', sa.Date(), nullable=True),
    sa.Column('supply_order_id', sa.Integer(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['flower_id'], ['flowers.id'], ),
    sa.ForeignKeyConstraint(['supplier_id'], ['suppliers.id'], ),
    sa.ForeignKeyConstraint(['supply_order_id'], ['supply_orders.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('product_compositions',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('product_id', sa.Integer(), nullable=False),
    sa.Column('flower_id', sa.Integer(), nullable=False),
    sa.Column('quantity', sa.Integer(), nullable=False),
    sa.Column('is_required', sa.Boolean(), nullable=True),
    sa.ForeignKeyConstraint(['flower_id'], ['flowers.id'], ),
    sa.ForeignKeyConstraint(['product_id'], ['products.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('supply_items',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('supply_order_id', sa.Integer(), nullable=False),
    sa.Column('flower_id', sa.Integer(), nullable=False),
    sa.Column('quantity', sa.Integer(), nullable=False),
    sa.Column('unit_price', sa.Numeric(precision=10, scale=2), nullable=False),
    sa.Column('total_price', sa.Numeric(precision=10, scale=2), nullable=False),
    sa.ForeignKeyConstraint(['flower_id'], ['flowers.id'], ),
    sa.ForeignKeyConstraint(['supply_order_id'], ['supply_orders.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('inventory_movements',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('flower_id', sa.Integer(), nullable=False),
    sa.Column('batch_id', sa.Integer(), nullable=True),
    sa.Column('movement_type', sa.Enum('purchase', 'sale', 'loss', 'expired', 'correction', 'return_supplier', name='movementtypeenum'), nullable=False),
    sa.Column('quantity', sa.Integer(), nullable=False),
    sa.Column('order_id', sa.Integer(), nullable=True),
    sa.Column('supply_order_id', sa.Integer(), nullable=True),
    sa.Column('reason', sa.Text(), nullable=True),
    sa.Column('performed_by', sa.Integer(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['batch_id'], ['inventory_batches.id'], ),
    sa.ForeignKeyConstraint(['flower_id'], ['flowers.id'], ),
    sa.ForeignKeyConstraint(['order_id'], ['orders.id'], ),
    sa.ForeignKeyConstraint(['performed_by'], ['users.id'], ),
    sa.ForeignKeyConstraint(['supply_order_id'], ['supply_orders.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.add_column('consultations', sa.Column('theme', sa.String(length=255), nullable=True))
    op.add_column('consultations', sa.Column('archive_id', sa.String(length=100), nullable=True))
    op.drop_index(op.f('idx_consultations_active'), table_name='consultations', postgresql_where="(status = 'active'::consultationstatusenum)")
    op.drop_index(op.f('idx_florist_profiles_active'), table_name='florist_profiles', postgresql_where='(is_active = true)')
    op.drop_index(op.f('idx_orders_user_status'), table_name='orders')
    op.drop_index(op.f('idx_products_category_active'), table_name='products')
    op.alter_column('role_requests', 'user_tg_id',
               existing_type=sa.VARCHAR(length=50),
               nullable=False)
    op.drop_index(op.f('idx_role_requests_status'), table_name='role_requests')
    op.drop_column('role_requests', 'user_data')
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('role_requests', sa.Column('user_data', sa.TEXT(), autoincrement=False, nullable=True))
    op.create_index(op.f('idx_role_requests_status'), 'role_requests', ['status'], unique=False)
    op.alter_column('role_requests', 'user_tg_id',
               existing_type=sa.VARCHAR(length=50),
               nullable=True)
    op.create_index(op.f('idx_products_category_active'), 'products', ['category_id', 'is_active'], unique=False)
    op.create_index(op.f('idx_orders_user_status'), 'orders', ['user_id', 'status'], unique=False)
    op.create_index(op.f('idx_florist_profiles_active'), 'florist_profiles', ['is_active'], unique=False, postgresql_where='(is_active = true)')
    op.create_index(op.f('idx_consultations_active'), 'consultations', ['status'], unique=False, postgresql_where="(status = 'active'::consultationstatusenum)")
    op.drop_column('consultations', 'archive_id')
    op.drop_column('consultations', 'theme')
    op.drop_table('inventory_movements')
    op.drop_table('supply_items')
    op.drop_table('product_compositions')
    op.drop_table('inventory_batches')
    op.drop_table('supply_orders')
    op.drop_table('suppliers')
    op.drop_table('flowers')
    # ### end Alembic commands ###
