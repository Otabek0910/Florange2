# üÜï app/middleware/state_validation.py
# 
# –ò–ù–°–¢–†–£–ö–¶–ò–Ø: –ü–û–õ–ù–û–°–¢–¨–Æ –ó–ê–ú–ï–ù–ò–¢–ï —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞

from typing import Callable, Dict, Any, Awaitable
from datetime import datetime

from aiogram import BaseMiddleware
from aiogram.types import Update, Message, CallbackQuery
from aiogram.fsm.context import FSMContext

from app.database.database import get_session
from app.models import Consultation, ConsultationStatusEnum
from app.handlers.consultation import ConsultationStates


class StateValidationMiddleware(BaseMiddleware):
    """
    Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ FSM —Å–æ—Å—Ç–æ—è–Ω–∏–π –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π
    
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç:
    - –°—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –≤ –ë–î
    - –ù–µ –∏—Å—Ç–µ–∫–ª–∞ –ª–∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è  
    - –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ª–∏ —Å—Ç–∞—Ç—É—Å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—é FSM
    - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—á–∏—â–∞–µ—Ç –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    """
    
    async def __call__(
        self,
        handler: Callable[[Update, Dict[str, Any]], Awaitable[Any]],
        event: Update,
        data: Dict[str, Any]
    ) -> Any:
        
        # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ø–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ
        message_obj = None
        user_id = None
        
        if hasattr(event, 'message') and event.message:
            message_obj = event.message
            user_id = event.message.from_user.id if event.message.from_user else None
        elif hasattr(event, 'callback_query') and event.callback_query:
            message_obj = event.callback_query.message
            user_id = event.callback_query.from_user.id if event.callback_query.from_user else None
        
        # –ï—Å–ª–∏ –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É
        if not user_id or not message_obj:
            return await handler(event, data)
            
        state: FSMContext = data.get('state')
        if not state:
            return await handler(event, data)
            
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        try:
            current_state = await state.get_state()
            if not current_state:
                return await handler(event, data)
        except Exception:
            # –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
            return await handler(event, data)
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π
        consultation_states = [
            ConsultationStates.WAITING_RESPONSE.state,
            ConsultationStates.CHATTING.state,
            ConsultationStates.RATING.state
        ]
        
        if current_state not in consultation_states:
            return await handler(event, data)
            
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        try:
            state_data = await state.get_data()
            consultation_id = state_data.get('consultation_id')
            
            if not consultation_id:
                # –ù–µ—Ç ID –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ - –æ—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                await state.clear()
                return await handler(event, data)
        except Exception:
            # –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏—è
            await state.clear()
            return await handler(event, data)
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é –≤ –ë–î
        try:
            async for session in get_session():
                consultation = await session.get(Consultation, consultation_id)
                
                if not consultation:
                    # –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ - –æ—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                    await state.clear()
                    
                    # –£–≤–µ–¥–æ–º–ª—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    if hasattr(event, 'message') and isinstance(event.message, Message):
                        try:
                            await event.message.answer(
                                "‚ùå –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–±—Ä–æ—à–µ–Ω–æ.",
                                reply_markup=None
                            )
                        except Exception:
                            pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏
                    
                    return await handler(event, data)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM
                is_state_valid = await self._validate_state_consistency(
                    current_state, consultation, state, event
                )
                
                if not is_state_valid:
                    return  # –°–æ—Å—Ç–æ—è–Ω–∏–µ –±—ã–ª–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ, –ø—Ä–µ—Ä—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
                    
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–π–º–∞—É—Ç –¥–ª—è WAITING_RESPONSE
                if (current_state == ConsultationStates.WAITING_RESPONSE.state and 
                    consultation.status == ConsultationStatusEnum.pending):
                    
                    if consultation.expires_at and consultation.expires_at < datetime.utcnow():
                        # –ò—Å—Ç–µ–∫–ª–∞ - –æ–±–Ω–æ–≤–ª—è–µ–º –≤ –ë–î –∏ –æ—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                        consultation.status = ConsultationStatusEnum.expired
                        await session.commit()
                        
                        await state.clear()
                        
                        # –£–≤–µ–¥–æ–º–ª—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                        if hasattr(event, 'message') and isinstance(event.message, Message):
                            try:
                                await event.message.answer(
                                    "‚è∞ –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –∏—Å—Ç–µ–∫–ª–æ (15 –º–∏–Ω—É—Ç).\n"
                                    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–≥–æ —Ñ–ª–æ—Ä–∏—Å—Ç–∞.",
                                    reply_markup=None
                                )
                            except Exception:
                                pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏
                        
                        return  # –ù–µ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
                        
        except Exception as e:
            # –û—à–∏–±–∫–∞ —Ä–∞–±–æ—Ç—ã —Å –ë–î - –ª–æ–≥–∏—Ä—É–µ–º –∏ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
            print(f"StateValidation DB error: {e}")
            return await handler(event, data)
        
        # –í—Å—ë –≤–∞–ª–∏–¥–Ω–æ - –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
        return await handler(event, data)
    
    async def _validate_state_consistency(
        self, 
        current_state: str, 
        consultation: Consultation, 
        state: FSMContext,
        event
    ) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ FSM —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏ —Å—Ç–∞—Ç—É—Å–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –≤ –ë–î
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True –µ—Å–ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤–∞–ª–∏–¥–Ω–æ, False –µ—Å–ª–∏ –±—ã–ª–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ
        """
        
        # –ú–∞–ø–ø–∏–Ω–≥ —Å–æ—Å—Ç–æ—è–Ω–∏–π FSM –∫ —Å—Ç–∞—Ç—É—Å–∞–º –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π
        expected_statuses = {
            ConsultationStates.WAITING_RESPONSE.state: [ConsultationStatusEnum.pending],
            ConsultationStates.CHATTING.state: [ConsultationStatusEnum.active],
            ConsultationStates.RATING.state: [ConsultationStatusEnum.completed]
        }
        
        expected = expected_statuses.get(current_state, [])
        
        if consultation.status not in expected:
            # –ù–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ - –∏—Å–ø—Ä–∞–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            
            try:
                if consultation.status == ConsultationStatusEnum.pending:
                    # –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è pending, –Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–µ WAITING_RESPONSE
                    await state.set_state(ConsultationStates.WAITING_RESPONSE)
                    await state.update_data(consultation_id=consultation.id)
                    
                elif consultation.status == ConsultationStatusEnum.active:
                    # –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –∞–∫—Ç–∏–≤–Ω–∞, –Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–µ CHATTING  
                    await state.set_state(ConsultationStates.CHATTING)
                    await state.update_data(consultation_id=consultation.id)
                    
                elif consultation.status in [ConsultationStatusEnum.completed, ConsultationStatusEnum.expired]:
                    # –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ - –æ—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                    await state.clear()
                    
                    # –£–≤–µ–¥–æ–º–ª—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    if hasattr(event, 'message') and isinstance(event.message, Message):
                        try:
                            status_text = "–∑–∞–≤–µ—Ä—à–µ–Ω–∞" if consultation.status == ConsultationStatusEnum.completed else "–∏—Å—Ç–µ–∫–ª–∞"
                            await event.message.answer(
                                f"‚ÑπÔ∏è –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è {status_text}. –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ.",
                                reply_markup=None
                            )
                        except Exception:
                            pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏
                            
            except Exception as e:
                print(f"State sync error: {e}")
                # –ü—Ä–∏ –æ—à–∏–±–∫–µ –ø—Ä–æ—Å—Ç–æ –æ—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                try:
                    await state.clear()
                except Exception:
                    pass
            
            return False  # –°–æ—Å—Ç–æ—è–Ω–∏–µ –±—ã–ª–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ
            
        return True  # –°–æ—Å—Ç–æ—è–Ω–∏–µ –≤–∞–ª–∏–¥–Ω–æ


class ConsultationCleanupMiddleware(BaseMiddleware):
    """
    Middleware –¥–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –æ—á–∏—Å—Ç–∫–∏ –∏—Å—Ç—ë–∫—à–∏—Ö –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π
    –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Ä–∞–∑ –≤ N —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Å–Ω–∏–∂–µ–Ω–∏—è –Ω–∞–≥—Ä—É–∑–∫–∏
    """
    
    def __init__(self, cleanup_frequency: int = 100):
        self.cleanup_frequency = cleanup_frequency
        self.message_count = 0
    
    async def __call__(
        self,
        handler: Callable[[Update, Dict[str, Any]], Awaitable[Any]],
        event: Update,
        data: Dict[str, Any]
    ) -> Any:
        
        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á—ë—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
        self.message_count += 1
        
        # –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –∑–∞–ø—É—Å–∫–∞–µ–º –æ—á–∏—Å—Ç–∫—É
        if self.message_count % self.cleanup_frequency == 0:
            try:
                async for session in get_session():
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º SQL —Ñ—É–Ω–∫—Ü–∏—é –∏–∑ –º–∏–≥—Ä–∞—Ü–∏–∏
                    result = await session.execute("SELECT cleanup_expired_consultations()")
                    count = result.scalar()
                    
                    if count > 0:
                        print(f"üßπ Cleaned up {count} expired consultations")
                        
            except Exception as e:
                print(f"Cleanup error: {e}")
        
        # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
        return await handler(event, data)