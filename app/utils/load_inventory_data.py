# app/utils/load_inventory_simple.py

import asyncio
from datetime import datetime, timedelta
from app.database.database import get_session
from app.models import (
    Flower, Supplier, InventoryBatch, InventoryMovement, 
    MovementTypeEnum, User, RoleEnum
)

async def load_inventory_simple():
    """–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–∫–ª–∞–¥–∞ (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)"""
    
    async for session in get_session():
        try:
            print("üîç –ü–æ–∏—Å–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞...")
            
            # –ù–∞–π—Ç–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∞–¥–º–∏–Ω–∞
            from sqlalchemy import select
            result = await session.execute(select(User).where(User.role == RoleEnum.owner))
            admin_user = result.scalars().first()
            
            if not admin_user:
                print("‚ùå –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–æ–∑–¥–∞–π—Ç–µ —Å–Ω–∞—á–∞–ª–∞: python -m app.utils.create_admin YOUR_TG_ID")
                return
            
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: {admin_user.first_name} (ID: {admin_user.id})")
            
            # 1. –¶–≤–µ—Ç—ã
            print("üå∏ –°–æ–∑–¥–∞–Ω–∏–µ —Ü–≤–µ—Ç–æ–≤...")
            flowers_data = [
                {'name_ru': '–†–æ–∑–∞ –∫—Ä–∞—Å–Ω–∞—è', 'name_uz': 'Qizil atirgul', 'unit_type': 'piece', 'min_stock': 50, 'max_stock': 200, 'shelf_life_days': 7},
                {'name_ru': '–†–æ–∑–∞ –±–µ–ª–∞—è', 'name_uz': 'Oq atirgul', 'unit_type': 'piece', 'min_stock': 30, 'max_stock': 150, 'shelf_life_days': 7},
                {'name_ru': '–¢—é–ª—å–ø–∞–Ω –∫—Ä–∞—Å–Ω—ã–π', 'name_uz': 'Qizil lola', 'unit_type': 'piece', 'min_stock': 100, 'max_stock': 300, 'shelf_life_days': 5},
                {'name_ru': '–ì–∏–ø—Å–æ—Ñ–∏–ª–∞', 'name_uz': 'Gipsofila', 'unit_type': 'bundle', 'min_stock': 10, 'max_stock': 50, 'shelf_life_days': 14},
                {'name_ru': '–£–ø–∞–∫–æ–≤–æ—á–Ω–∞—è –±—É–º–∞–≥–∞', 'name_uz': 'Orash qogozi', 'unit_type': 'sheet', 'min_stock': 50, 'max_stock': 200, 'shelf_life_days': 365},
            ]
            
            flowers = []
            for data in flowers_data:
                flower = Flower(**data)
                session.add(flower)
                flowers.append(flower)
            
            await session.flush()
            print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {len(flowers)} —Ü–≤–µ—Ç–æ–≤")
            
            # 2. –ü–æ—Å—Ç–∞–≤—â–∏–∫–∏
            print("üè™ –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤...")
            suppliers_data = [
                {'name': '–¶–≤–µ—Ç–¢–æ—Ä–≥', 'contact_person': '–ê–ª–µ–∫—Å–∞–Ω–¥—Ä –ò–≤–∞–Ω–æ–≤', 'phone': '+998901234567', 'rating': 4.5},
                {'name': '–£–∑–±–µ–∫ –ì—É–ª—å', 'contact_person': '–î–∏–ª—à–æ–¥ –ö–∞—Ä–∏–º–æ–≤', 'phone': '+998901234569', 'rating': 4.8},
            ]
            
            suppliers = []
            for data in suppliers_data:
                supplier = Supplier(**data)
                session.add(supplier)
                suppliers.append(supplier)
            
            await session.flush()
            print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {len(suppliers)} –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤")
            
            # 3. –ù–∞—á–∞–ª—å–Ω—ã–µ –ø–∞—Ä—Ç–∏–∏ (–±–µ–∑ –¥–≤–∏–∂–µ–Ω–∏–π –ø–æ–∫–∞)
            print("üì¶ –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞—Ä—Ç–∏–π...")
            today = datetime.now().date()
            batches_data = [
                # –ü–∞—Ä—Ç–∏–∏ –æ—Ç –ø–µ—Ä–≤–æ–≥–æ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞
                {'flower': flowers[0], 'supplier': suppliers[0], 'quantity': 150, 'purchase_price': 2500, 'expire_date': today + timedelta(days=7)},
                {'flower': flowers[1], 'supplier': suppliers[0], 'quantity': 100, 'purchase_price': 2300, 'expire_date': today + timedelta(days=7)},
                {'flower': flowers[2], 'supplier': suppliers[0], 'quantity': 200, 'purchase_price': 1500, 'expire_date': today + timedelta(days=5)},
                # –ü–∞—Ä—Ç–∏–∏ –æ—Ç –≤—Ç–æ—Ä–æ–≥–æ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞
                {'flower': flowers[3], 'supplier': suppliers[1], 'quantity': 40, 'purchase_price': 3000, 'expire_date': today + timedelta(days=14)},
                {'flower': flowers[4], 'supplier': suppliers[1], 'quantity': 150, 'purchase_price': 300, 'expire_date': today + timedelta(days=365)},
            ]
            
            batches = []
            for data in batches_data:
                batch = InventoryBatch(
                    flower_id=data['flower'].id,
                    supplier_id=data['supplier'].id,
                    quantity=data['quantity'],
                    purchase_price=data['purchase_price'],
                    batch_date=today,
                    expire_date=data['expire_date']
                )
                session.add(batch)
                batches.append(batch)
            
            await session.flush()
            print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {len(batches)} –ø–∞—Ä—Ç–∏–π")
            
            # 4. –î–≤–∏–∂–µ–Ω–∏—è —Å–∫–ª–∞–¥–∞ –ë–ï–ó performed_by (nullable)
            print("üìä –°–æ–∑–¥–∞–Ω–∏–µ –¥–≤–∏–∂–µ–Ω–∏–π...")
            for batch in batches:
                movement = InventoryMovement(
                    flower_id=batch.flower_id,
                    batch_id=batch.id,
                    movement_type=MovementTypeEnum.purchase,
                    quantity=batch.quantity,
                    reason="–ù–∞—á–∞–ª—å–Ω—ã–µ –æ—Å—Ç–∞—Ç–∫–∏",
                    performed_by=None  # ‚Üê –£–ë–ò–†–ê–ï–ú —Å—Å—ã–ª–∫—É –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                )
                session.add(movement)
            
            await session.commit()
            print("‚úÖ –î–∞–Ω–Ω—ã–µ —Å–∫–ª–∞–¥–∞ –∑–∞–≥—Ä—É–∂–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
            
            print(f"üìä –ò—Ç–æ–≥–æ —Å–æ–∑–¥–∞–Ω–æ:")
            print(f"  –¶–≤–µ—Ç–æ–≤: {len(flowers)}")
            print(f"  –ü–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤: {len(suppliers)}")
            print(f"  –ü–∞—Ä—Ç–∏–π: {len(batches)}")
            print(f"  –î–≤–∏–∂–µ–Ω–∏–π: {len(batches)}")
            
        except Exception as e:
            await session.rollback()
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
            raise

if __name__ == "__main__":
    asyncio.run(load_inventory_simple())