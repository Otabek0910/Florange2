import asyncio
from datetime import datetime
from typing import Optional, List, Dict

from sqlalchemy.ext.asyncio import AsyncSession
from app.repositories import ConsultationRepository, FloristRepository
from app.models import Consultation, ConsultationMessage, ConsultationStatusEnum
from app.exceptions import ValidationError, UserNotFoundError
from app.services.consultation_buffer import ConsultationBuffer

class ConsultationService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è–º–∏"""
    
    def __init__(self, session: AsyncSession):
        self.session = session
        self.consultation_repo = ConsultationRepository(session)
        self.florist_repo = FloristRepository(session)
        self.buffer = ConsultationBuffer()  # üÜï

    # –ù–û–í–´–ï –§–£–ù–ö–¶–ò–ò
    
    async def request_consultation(self, client_id: int, florist_id: int) -> Consultation:
        """üÜï –ó–∞–ø—Ä–æ—Å–∏—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é (—Å–æ–∑–¥–∞–µ—Ç –≤ —Å—Ç–∞—Ç—É—Å–µ pending)"""
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —É –∫–ª–∏–µ–Ω—Ç–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π
        active_consultation = await self.consultation_repo.get_active_or_pending_consultation(client_id)
        if active_consultation:
            raise ValidationError("–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ñ–ª–æ—Ä–∏—Å—Ç –Ω–µ –∑–∞–Ω—è—Ç
        florist_consultation = await self.consultation_repo.get_active_consultation(florist_id)
        if florist_consultation:
            raise ValidationError("–§–ª–æ—Ä–∏—Å—Ç —Å–µ–π—á–∞—Å –∑–∞–Ω—è—Ç —Å –¥—Ä—É–≥–∏–º –∫–ª–∏–µ–Ω—Ç–æ–º")
        
        # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é –≤ —Å—Ç–∞—Ç—É—Å–µ pending
        consultation = Consultation(
            client_id=client_id,
            florist_id=florist_id,
            status=ConsultationStatusEnum.pending  # üÜï –ù–µ active!
        )
        consultation = await self.consultation_repo.create(consultation)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –Ω–∞ 10 –º–∏–Ω—É—Ç
        asyncio.create_task(self._timeout_consultation(consultation.id))
        
        return consultation
    
    async def accept_consultation(self, consultation_id: int, florist_id: int) -> Consultation:
        """üÜï –§–ª–æ—Ä–∏—Å—Ç –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é"""
        
        consultation = await self.consultation_repo.get(consultation_id)
        if not consultation:
            raise ValidationError("–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        
        if consultation.florist_id != florist_id:
            raise ValidationError("–≠—Ç–æ –Ω–µ –≤–∞—à–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è")
        
        if consultation.status != ConsultationStatusEnum.pending:
            raise ValidationError("–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è —É–∂–µ –Ω–µ –æ–∂–∏–¥–∞–µ—Ç –æ—Ç–≤–µ—Ç–∞")
        
        # –ú–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ active
        consultation.status = ConsultationStatusEnum.active
        await self.session.flush()
        
        return consultation
    
    async def add_buffered_message(self, consultation_id: int, sender_id: int, 
                                  message_text: str = None, photo_file_id: str = None) -> None:
        """üÜï –î–æ–±–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –±—É—Ñ–µ—Ä (–¥–ª—è pending –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π)"""
        
        message_data = {
            'sender_id': sender_id,
            'message_text': message_text,
            'photo_file_id': photo_file_id,
            'consultation_id': consultation_id
        }
        
        await self.buffer.add_message(consultation_id, message_data)
    
    async def get_buffered_messages(self, consultation_id: int) -> List[Dict]:
        """üÜï –ü–æ–ª—É—á–∏—Ç—å –±—É—Ñ–µ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        return await self.buffer.get_messages(consultation_id)
    
    async def flush_buffer_to_active(self, consultation_id: int) -> List[Dict]:
        """üÜï –ü–µ—Ä–µ–Ω–µ—Å—Ç–∏ –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –±—É—Ñ–µ—Ä–∞ –≤ –∞–∫—Ç–∏–≤–Ω—É—é –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é"""
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –±—É—Ñ–µ—Ä–∞
        messages = await self.buffer.get_messages(consultation_id)
        
        # –û—á–∏—â–∞–µ–º –±—É—Ñ–µ—Ä
        await self.buffer.clear_buffer(consultation_id)
        
        return messages
    
    async def _timeout_consultation(self, consultation_id: int) -> None:
        """üÜï –¢–∞–π–º–∞—É—Ç –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ 10 –º–∏–Ω—É—Ç"""
        await asyncio.sleep(600)  # 10 –º–∏–Ω—É—Ç
        
        try:
            consultation = await self.consultation_repo.get(consultation_id)
            if consultation and consultation.status == ConsultationStatusEnum.pending:
                consultation.status = ConsultationStatusEnum.timeout_no_response
                consultation.completed_at = datetime.utcnow()
                await self.session.commit()
                
                # –£–≤–µ–¥–æ–º–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞
                await self._notify_consultation_timeout(consultation)
                
        except Exception as e:
            print(f"Timeout error: {e}")
    
    async def _notify_consultation_timeout(self, consultation) -> None:
        """üÜï –£–≤–µ–¥–æ–º–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞ –æ —Ç–∞–π–º–∞—É—Ç–µ"""
        # –¢—É—Ç –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ –±–æ—Ç–∞
        pass
        
    # –°–¢–ê–†–´–ï –§–£–ù–ö–¶–ò–ò

    async def start_consultation(self, client_id: int, florist_id: int) -> Consultation:
        """–û–ë–ù–û–í–õ–ï–ù–û: –¢–µ–ø–µ—Ä—å —Å–æ–∑–¥–∞–µ—Ç pending –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é"""
        return await self.request_consultation(client_id, florist_id)
    
    async def get_active_consultation(self, user_id: int) -> Optional[Consultation]:
        """–û–ë–ù–û–í–õ–ï–ù–û: –ü–æ–ª—É—á–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—É—é –ò–õ–ò pending –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        return await self.consultation_repo.get_active_or_pending_consultation(user_id)
    
    async def send_message(self, consultation_id: int, sender_id: int, 
                          message_text: str = None, photo_file_id: str = None) -> ConsultationMessage:
        """–û–ë–ù–û–í–õ–ï–ù–û: –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é –∏–ª–∏ –±—É—Ñ–µ—Ä"""
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é
        consultation = await self.consultation_repo.get(consultation_id)
        if not consultation:
            raise ValidationError("–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å - —É—á–∞—Å—Ç–Ω–∏–∫ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏
        if sender_id not in [consultation.client_id, consultation.florist_id]:
            raise ValidationError("–í—ã –Ω–µ —É—á–∞—Å—Ç–Ω–∏–∫ —ç—Ç–æ–π –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏")
        
        # –ï—Å–ª–∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è pending - –¥–æ–±–∞–≤–ª—è–µ–º –≤ –±—É—Ñ–µ—Ä
        if consultation.status == ConsultationStatusEnum.pending:
            await self.add_buffered_message(consultation_id, sender_id, message_text, photo_file_id)
            return None  # –°–æ–æ–±—â–µ–Ω–∏–µ –≤ –±—É—Ñ–µ—Ä–µ, –Ω–µ –≤ –ë–î
        
        # –ï—Å–ª–∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è active - —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î –∫–∞–∫ –æ–±—ã—á–Ω–æ
        elif consultation.status == ConsultationStatusEnum.active:
            message = await self.consultation_repo.add_message(
                consultation_id, sender_id, message_text, photo_file_id
            )
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Ñ–ª–æ—Ä–∏—Å—Ç–∞ –µ—Å–ª–∏ –æ–Ω –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å
            if sender_id == consultation.florist_id:
                await self.florist_repo.update_last_seen(sender_id)
            
            return message
        
        else:
            raise ValidationError("–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞")
    
    async def complete_consultation(self, consultation_id: int, user_id: int) -> Optional[Consultation]:
        """–ó–∞–≤–µ—Ä—à–∏—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é"""
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é
        consultation = await self.consultation_repo.get(consultation_id)
        if not consultation:
            raise ValidationError("–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫—Ç–æ –∑–∞–≤–µ—Ä—à–∞–µ—Ç
        if user_id == consultation.client_id:
            completed_by = "client"
        elif user_id == consultation.florist_id:
            completed_by = "florist"
        else:
            raise ValidationError("–í—ã –Ω–µ —É—á–∞—Å—Ç–Ω–∏–∫ —ç—Ç–æ–π –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏")
        
        # –ó–∞–≤–µ—Ä—à–∞–µ–º –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é
        return await self.consultation_repo.complete_consultation(consultation_id, completed_by)
    
    async def rate_florist(self, consultation_id: int, client_id: int, rating: int) -> None:
        """–ü–æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ü–µ–Ω–∫—É —Ñ–ª–æ—Ä–∏—Å—Ç—É"""
        
        if not (1 <= rating <= 5):
            raise ValidationError("–†–µ–π—Ç–∏–Ω–≥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1 –¥–æ 5")
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é
        consultation = await self.consultation_repo.get(consultation_id)
        if not consultation:
            raise ValidationError("–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        
        if consultation.client_id != client_id:
            raise ValidationError("–¢–æ–ª—å–∫–æ –∫–ª–∏–µ–Ω—Ç –º–æ–∂–µ—Ç –æ—Ü–µ–Ω–∏—Ç—å —Ñ–ª–æ—Ä–∏—Å—Ç–∞")
        
        if consultation.status == ConsultationStatusEnum.active:
            raise ValidationError("–ù–µ–ª—å–∑—è –æ—Ü–µ–Ω–∏—Ç—å –≤–æ –≤—Ä–µ–º—è –∞–∫—Ç–∏–≤–Ω–æ–π –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–∑—ã–≤
        await self.consultation_repo.add_review(
            consultation_id, client_id, consultation.florist_id, rating
        )
        
        # –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–µ–π—Ç–∏–Ω–≥ —Ñ–ª–æ—Ä–∏—Å—Ç–∞
        await self.florist_repo.update_rating(consultation.florist_id)
    
    async def get_consultation_with_participants(self, consultation_id: int) -> Optional[dict]:
        """–ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é —Å –¥–∞–Ω–Ω—ã–º–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"""
        consultation = await self.consultation_repo.get(consultation_id)
        if not consultation:
            return None
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        await self.session.refresh(consultation, ['client', 'florist'])
        
        return {
            'consultation': consultation,
            'client': consultation.client,
            'florist': consultation.florist
        }