# üîß app/services/consultation_service.py
# 
# –ò–ù–°–¢–†–£–ö–¶–ò–Ø: –ù–∞–π–¥–∏—Ç–µ —ç—Ç–æ—Ç —Ñ–∞–π–ª –∏ –ó–ê–ú–ï–ù–ò–¢–ï –≤–µ—Å—å –∫–ª–∞—Å—Å ConsultationService –Ω–∞ –∫–æ–¥ –Ω–∏–∂–µ

import asyncio
import time
from datetime import datetime, timedelta
from typing import Optional, List, Dict

from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select, and_, or_, delete
from sqlalchemy.orm import selectinload

from app.repositories import ConsultationRepository, FloristRepository
from app.models import Consultation, ConsultationMessage, ConsultationStatusEnum, ConsultationBuffer
from app.exceptions import ValidationError, UserNotFoundError


def generate_request_key(client_id: int, florist_id: int) -> str:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª—é—á–∞ –∏–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏"""
    # –û–∫—Ä—É–≥–ª—è–µ–º –¥–æ –º–∏–Ω—É—Ç—ã –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è —Å–ø–∞–º–∞
    timestamp = int(datetime.utcnow().timestamp() // 60)
    return f"consult_{client_id}_{florist_id}_{timestamp}"


class NotificationCircuitBreaker:
    """Circuit Breaker –¥–ª—è –≤–Ω–µ—à–Ω–∏—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    
    def __init__(self, failure_threshold=3, timeout=60):
        self.failure_count = 0
        self.failure_threshold = failure_threshold
        self.timeout = timeout
        self.last_failure_time = None
        self.state = "CLOSED"  # CLOSED, OPEN, HALF_OPEN
    
    async def call(self, func, *args, **kwargs):
        if self.state == "OPEN":
            if time.time() - self.last_failure_time < self.timeout:
                raise Exception("Circuit breaker is OPEN")
            else:
                self.state = "HALF_OPEN"
        
        try:
            result = await func(*args, **kwargs)
            if self.state == "HALF_OPEN":
                self.state = "CLOSED"
                self.failure_count = 0
            return result
        except Exception as e:
            self.failure_count += 1
            self.last_failure_time = time.time()
            
            if self.failure_count >= self.failure_threshold:
                self.state = "OPEN"
            raise e


class ConsultationService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è–º–∏ (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)"""
    
    def __init__(self, session: AsyncSession):
        self.session = session
        self.consultation_repo = ConsultationRepository(session)
        self.florist_repo = FloristRepository(session)
        self.circuit_breaker = NotificationCircuitBreaker()

    async def request_consultation_idempotent(self, client_id: int, florist_id: int, request_key: str) -> Consultation:
        """üÜï –ò–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –≥–æ–Ω–æ–∫"""
        
        # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ù–ï —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é
        
        # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∑–∞–ø—Ä–æ—Å (–∏–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å)
        existing_query = select(Consultation).where(
            or_(
                Consultation.request_key == request_key,
                and_(
                    Consultation.client_id == client_id,
                    Consultation.status.in_(['active', 'pending'])
                )
            )
        ).with_for_update(skip_locked=True)
        
        result = await self.session.execute(existing_query)
        existing = result.scalar_one_or_none()
        
        if existing:
            return existing  # –ò–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω—ã–π –≤–æ–∑–≤—Ä–∞—Ç
        
        # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Ñ–ª–æ—Ä–∏—Å—Ç–∞ —Å –±–ª–æ–∫–∏—Ä–æ–≤–∫–æ–π
        florist_busy_query = select(Consultation).where(
            and_(
                Consultation.florist_id == florist_id,
                Consultation.status.in_(['active', 'pending'])
            )
        ).with_for_update(skip_locked=True)
        
        florist_busy_result = await self.session.execute(florist_busy_query)
        florist_busy = florist_busy_result.scalar_one_or_none()
        
        if florist_busy:
            raise ValidationError("–§–ª–æ—Ä–∏—Å—Ç —Å–µ–π—á–∞—Å –∑–∞–Ω—è—Ç —Å –¥—Ä—É–≥–∏–º –∫–ª–∏–µ–Ω—Ç–æ–º")
        
        # 3. –°–æ–∑–¥–∞—ë–º –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é –∞—Ç–æ–º–∞—Ä–Ω–æ
        consultation = Consultation(
            client_id=client_id,
            florist_id=florist_id,
            status=ConsultationStatusEnum.pending,
            request_key=request_key,
            expires_at=datetime.utcnow() + timedelta(minutes=15)
        )
        
        self.session.add(consultation)
        await self.session.flush()  # –ü–æ–ª—É—á–∞–µ–º ID
        
        return consultation

    async def accept_consultation(self, consultation_id: int, florist_id: int) -> Consultation:
        """–ü—Ä–∏–Ω—è—Ç–∏–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ —Ñ–ª–æ—Ä–∏—Å—Ç–æ–º"""
        
        # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ù–ï —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
        
        # –ë–ª–æ–∫–∏—Ä—É–µ–º –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        query = select(Consultation).where(
            and_(
                Consultation.id == consultation_id,
                Consultation.florist_id == florist_id,
                Consultation.status == ConsultationStatusEnum.pending
            )
        ).with_for_update()
        
        result = await self.session.execute(query)
        consultation = result.scalar_one_or_none()
        
        if not consultation:
            raise ValidationError("–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É–∂–µ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –Ω–µ –∏—Å—Ç–µ–∫–ª–∞
        if consultation.expires_at and consultation.expires_at < datetime.utcnow():
            consultation.status = ConsultationStatusEnum.expired
            await self.session.flush()
            raise ValidationError("–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –∏—Å—Ç–µ–∫–ª–∞")
        
        # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é
        consultation.status = ConsultationStatusEnum.active
        consultation.started_at = datetime.utcnow()
        consultation.expires_at = None  # –£–±–∏—Ä–∞–µ–º —Ç–∞–π–º–∞—É—Ç
        
        await self.session.flush()
        
        # –î–æ—Å—Ç–∞–≤–ª—è–µ–º –±—É—Ñ–µ—Ä–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        await self._deliver_buffered_messages(consultation_id)
        
        return consultation

    async def decline_consultation(self, consultation_id: int, florist_id: int) -> Consultation:
        """–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ —Ñ–ª–æ—Ä–∏—Å—Ç–æ–º"""
        
        # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ù–ï —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
        
        query = select(Consultation).where(
            and_(
                Consultation.id == consultation_id,
                Consultation.florist_id == florist_id,
                Consultation.status == ConsultationStatusEnum.pending
            )
        ).with_for_update()
        
        result = await self.session.execute(query)
        consultation = result.scalar_one_or_none()
        
        if not consultation:
            raise ValidationError("–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        
        consultation.status = ConsultationStatusEnum.completed
        consultation.completed_at = datetime.utcnow()
        
        # –û—á–∏—â–∞–µ–º –±—É—Ñ–µ—Ä
        await self._clear_buffered_messages(consultation_id)
        
        return consultation

    async def add_buffered_message(self, consultation_id: int, sender_id: int, 
                                 message_text: str = None, photo_file_id: str = None):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –±—É—Ñ–µ—Ä (–ø–æ–∫–∞ —Ñ–ª–æ—Ä–∏—Å—Ç –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª)"""
        
        buffer_msg = ConsultationBuffer(
            consultation_id=consultation_id,
            sender_id=sender_id,
            message_text=message_text,
            photo_file_id=photo_file_id
        )
        
        self.session.add(buffer_msg)
        await self.session.commit()

    async def _deliver_buffered_messages(self, consultation_id: int):
        """–î–æ—Å—Ç–∞–≤–∫–∞ –±—É—Ñ–µ—Ä–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Å –≥–∞—Ä–∞–Ω—Ç–∏—è–º–∏"""
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –±—É—Ñ–µ—Ä–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        query = select(ConsultationBuffer).where(
            ConsultationBuffer.consultation_id == consultation_id
        ).order_by(ConsultationBuffer.created_at).with_for_update()
        
        result = await self.session.execute(query)
        buffered_messages = result.scalars().all()
        
        if not buffered_messages:
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é —Å —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏
        consultation_query = select(Consultation).options(
            selectinload(Consultation.client),
            selectinload(Consultation.florist)
        ).where(Consultation.id == consultation_id)
        
        consultation_result = await self.session.execute(consultation_query)
        consultation = consultation_result.scalar_one()
        
        # –ü–µ—Ä–µ–Ω–æ—Å–∏–º —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –æ—Å–Ω–æ–≤–Ω—É—é —Ç–∞–±–ª–∏—Ü—É
        for msg in buffered_messages:
            consultation_msg = ConsultationMessage(
                consultation_id=consultation_id,
                sender_id=msg.sender_id,
                message_text=msg.message_text,
                photo_file_id=msg.photo_file_id,
                created_at=msg.created_at
            )
            self.session.add(consultation_msg)
        
        # –£–¥–∞–ª—è–µ–º –∏–∑ –±—É—Ñ–µ—Ä–∞
        await self._clear_buffered_messages(consultation_id)

    async def _clear_buffered_messages(self, consultation_id: int):
        """–û—á–∏—Å—Ç–∫–∞ –±—É—Ñ–µ—Ä–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        delete_query = delete(ConsultationBuffer).where(
            ConsultationBuffer.consultation_id == consultation_id
        )
        await self.session.execute(delete_query)

    async def complete_consultation(self, consultation_id: int, user_id: int):
        """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏"""
        
        # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ù–ï —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
        
        query = select(Consultation).where(
            and_(
                Consultation.id == consultation_id,
                or_(
                    Consultation.client_id == user_id,
                    Consultation.florist_id == user_id
                ),
                Consultation.status == ConsultationStatusEnum.active
            )
        ).with_for_update()
        
        result = await self.session.execute(query)
        consultation = result.scalar_one_or_none()
        
        if not consultation:
            raise ValidationError("–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        
        consultation.status = ConsultationStatusEnum.completed
        consultation.completed_at = datetime.utcnow()
        
        return consultation

    async def cleanup_expired_consultations(self) -> int:
        """–û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç—ë–∫—à–∏—Ö –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π"""
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º SQL —Ñ—É–Ω–∫—Ü–∏—é –∏–∑ –º–∏–≥—Ä–∞—Ü–∏–∏
        result = await self.session.execute("SELECT cleanup_expired_consultations()")
        count = result.scalar()
        await self.session.commit()
        
        return count

    # –°—Ç–∞—Ä—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    async def request_consultation(self, client_id: int, florist_id: int) -> Consultation:
        """–û–±—ë—Ä—Ç–∫–∞ –¥–ª—è —Å—Ç–∞—Ä–æ–≥–æ –º–µ—Ç–æ–¥–∞"""
        request_key = generate_request_key(client_id, florist_id)
        return await self.request_consultation_idempotent(client_id, florist_id, request_key)

    async def get_active_consultation(self, user_id: int) -> Optional[Consultation]:
        """–ü–æ–ª—É—á–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—É—é –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        query = select(Consultation).where(
            and_(
                or_(
                    Consultation.client_id == user_id,
                    Consultation.florist_id == user_id
                ),
                Consultation.status.in_(['active', 'pending'])
            )
        )
        
        result = await self.session.execute(query)
        return result.scalar_one_or_none()