# app/services/consultation_buffer.py

import json
import asyncio
from typing import List, Dict, Optional
from datetime import datetime, timedelta

class ConsultationBuffer:
    # –ì–ª–æ–±–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –≤ –ø–∞–º—è—Ç–∏

    _memory_storage = {}
    
    def __init__(self, redis_client=None):
        self.redis = redis_client or self._get_redis()
    
    def _get_redis(self):
        """–ü–æ–ª—É—á–∏—Ç—å Redis –∫–ª–∏–µ–Ω—Ç (fallback –Ω–∞ –ø–∞–º—è—Ç—å –µ—Å–ª–∏ Redis –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω)"""
        try:
            import redis.asyncio as redis
            from app.config import settings
            return redis.Redis.from_url(settings.REDIS_URL)
        except Exception as e:
            print(f"‚ö†Ô∏è Redis –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–∞–º—è—Ç—å: {e}")
            return None  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º None, —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–∞–º—è—Ç—å
    
    async def add_message(self, consultation_id: int, message_data: Dict) -> None:
        """–î–æ–±–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –±—É—Ñ–µ—Ä"""
        key = f"consultation:{consultation_id}:buffer"
        message_data['timestamp'] = datetime.utcnow().isoformat()
        
        try:
            if self.redis:  # –†–µ–∞–ª—å–Ω—ã–π Redis
                await self.redis.lpush(key, json.dumps(message_data))
                await self.redis.expire(key, 900)  # TTL 15 –º–∏–Ω—É—Ç
                print(f"‚úÖ Message buffered in Redis for consultation {consultation_id}")
            else:  # Fallback –ø–∞–º—è—Ç—å
                if key not in self._memory_storage:
                    self._memory_storage[key] = []
                self._memory_storage[key].append(message_data)
                print(f"‚úÖ Message buffered in memory, key: {key}")
                
                # –ê–≤—Ç–æ–æ—á–∏—Å—Ç–∫–∞ —á–µ—Ä–µ–∑ 15 –º–∏–Ω—É—Ç
                import asyncio
                asyncio.create_task(self._auto_cleanup(key, 900))  # 15 –º–∏–Ω—É—Ç
                
        except Exception as e:
            print(f"‚ùå Buffer error: {e}")
    
    async def get_messages(self, consultation_id: int) -> List[Dict]:
        """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –±—É—Ñ–µ—Ä–∞"""
        key = f"consultation:{consultation_id}:buffer"
        
        try:
            if self.redis:  # –†–µ–∞–ª—å–Ω—ã–π Redis
                messages = await self.redis.lrange(key, 0, -1)
                result = [json.loads(msg) for msg in reversed(messages)]
                print(f"üì• Retrieved {len(result)} messages from Redis buffer")
                return result
            else:  # Fallback –ø–∞–º—è—Ç—å
                result = self._memory_storage.get(key, [])
                print(f"üì• Retrieved {len(result)} messages from memory buffer")
                return result
        except Exception as e:
            print(f"‚ùå Buffer get error: {e}")
            return []
    
    async def clear_buffer(self, consultation_id: int) -> None:
        """–û—á–∏—Å—Ç–∏—Ç—å –±—É—Ñ–µ—Ä"""
        key = f"consultation:{consultation_id}:buffer"
        
        try:
            if self.redis:  # –†–µ–∞–ª—å–Ω—ã–π Redis
                await self.redis.delete(key)
                print(f"üßπ Redis buffer cleared for consultation {consultation_id}")
            else:  # Fallback –ø–∞–º—è—Ç—å
                self._memory_storage.pop(key, None)
                print(f"üßπ Memory buffer cleared for consultation {consultation_id}")
        except Exception as e:
            print(f"‚ùå Buffer clear error: {e}")
    
    async def _auto_cleanup(self, key: str, delay: int):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ –±—É—Ñ–µ—Ä–∞ —á–µ—Ä–µ–∑ delay —Å–µ–∫—É–Ω–¥"""
        await asyncio.sleep(delay)
        try:
            if key in self._memory_storage:
                del self._memory_storage[key]
                print(f"üßπ Auto-cleaned memory buffer: {key}")
        except Exception as e:
            print(f"‚ùå Auto-cleanup error: {e}")