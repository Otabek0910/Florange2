# app/services/consultation_buffer.py

import asyncio
from typing import List, Dict, Optional
from datetime import datetime, timedelta
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select, delete
from app.models import ConsultationBuffer

class ConsultationBufferService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è –±—É—Ñ–µ—Ä–∏–∑–∞—Ü–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π –≤ PostgreSQL"""
    
    def __init__(self, session: AsyncSession):
        self.session = session
    
    async def add_message(self, consultation_id: int, sender_id: int, 
                         message_text: str = None, photo_file_id: str = None) -> None:
        """–î–æ–±–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –±—É—Ñ–µ—Ä"""
        
        buffer_message = ConsultationBuffer(
            consultation_id=consultation_id,
            sender_id=sender_id,
            message_text=message_text,
            photo_file_id=photo_file_id
        )
        
        self.session.add(buffer_message)
        await self.session.flush()
        
        print(f"‚úÖ Message buffered in PostgreSQL for consultation {consultation_id}")
    
    async def get_messages(self, consultation_id: int) -> List[Dict]:
        """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –±—É—Ñ–µ—Ä–∞"""
        
        result = await self.session.execute(
            select(ConsultationBuffer)
            .where(ConsultationBuffer.consultation_id == consultation_id)
            .order_by(ConsultationBuffer.created_at)
        )
        
        buffer_messages = result.scalars().all()
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å–ª–æ–≤–∞—Ä–∏
        messages = []
        for msg in buffer_messages:
            messages.append({
                'sender_id': msg.sender_id,
                'message_text': msg.message_text,
                'photo_file_id': msg.photo_file_id,
                'timestamp': msg.created_at.isoformat()
            })
        
        print(f"üì• Retrieved {len(messages)} messages from PostgreSQL buffer")
        return messages
    
    async def clear_buffer(self, consultation_id: int) -> None:
        """–û—á–∏—Å—Ç–∏—Ç—å –±—É—Ñ–µ—Ä –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏"""
        
        await self.session.execute(
            delete(ConsultationBuffer)
            .where(ConsultationBuffer.consultation_id == consultation_id)
        )
        
        print(f"üßπ PostgreSQL buffer cleared for consultation {consultation_id}")
    
    async def cleanup_old_buffers(self, hours: int = 24) -> int:
        """–û—á–∏—Å—Ç–∏—Ç—å —Å—Ç–∞—Ä—ã–µ –±—É—Ñ–µ—Ä—ã (—Å—Ç–∞—Ä—à–µ N —á–∞—Å–æ–≤)"""
        
        cutoff_time = datetime.utcnow() - timedelta(hours=hours)
        
        result = await self.session.execute(
            delete(ConsultationBuffer)
            .where(ConsultationBuffer.created_at < cutoff_time)
        )
        
        deleted_count = result.rowcount
        print(f"üßπ Cleaned {deleted_count} old buffer messages")
        return deleted_count
    
    async def get_buffer_size(self, consultation_id: int) -> int:
        """–ü–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –±—É—Ñ–µ—Ä–µ"""
        
        result = await self.session.execute(
            select(ConsultationBuffer.id)
            .where(ConsultationBuffer.consultation_id == consultation_id)
        )
        
        return len(result.scalars().all())