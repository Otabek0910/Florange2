# ‚úÖ app/services/ai_archive_service.py
# 
# –ò–ù–°–¢–†–£–ö–¶–ò–Ø: –°–û–ó–î–ê–ô–¢–ï –ù–û–í–´–ô –§–ê–ô–õ

import os
from typing import Optional
from datetime import datetime

from app.database.database import get_session
from app.models import Consultation, ConsultationMessage


class AIArchiveService:
    """
    –°–µ—Ä–≤–∏—Å –¥–ª—è –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π –≤ –∫–∞–Ω–∞–ª
    
    –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–∞—è –∑–∞–≥–ª—É—à–∫–∞ - –≤ –±—É–¥—É—â–µ–º –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å:
    - –ì–µ–Ω–µ—Ä–∞—Ü–∏—é –∫—Ä–∞—Å–∏–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞ —Å –ø–æ–º–æ—â—å—é AI
    - –û—Ç–ø—Ä–∞–≤–∫—É –≤ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –∞—Ä—Ö–∏–≤–Ω—ã–π –∫–∞–Ω–∞–ª
    - –ü–æ–∏—Å–∫ –ø–æ –∞—Ä—Ö–∏–≤—É
    """
    
    def __init__(self, bot):
        self.bot = bot
        self.archive_channel_id = os.getenv("ARCHIVE_CHANNEL_ID")
    
    async def archive_consultation_to_channel(self, consultation_id: int) -> Optional[str]:
        """
        –ê—Ä—Ö–∏–≤–∏—Ä—É–µ—Ç –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é –≤ –∫–∞–Ω–∞–ª
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç ID –∞—Ä—Ö–∏–≤–∞ –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
        """
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏
            async for session in get_session():
                consultation = await session.get(Consultation, consultation_id)
                if not consultation:
                    return None
                
                await session.refresh(consultation, ['client', 'florist'])
                
                # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
                from sqlalchemy import select
                messages_result = await session.execute(
                    select(ConsultationMessage)
                    .where(ConsultationMessage.consultation_id == consultation_id)
                    .order_by(ConsultationMessage.created_at)
                )
                messages = messages_result.scalars().all()
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º –∞—Ä—Ö–∏–≤–Ω—ã–π –æ—Ç—á–µ—Ç
                archive_text = self._generate_archive_text(consultation, messages)
                
                # –ï—Å–ª–∏ –µ—Å—Ç—å –∫–∞–Ω–∞–ª - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç—É–¥–∞
                if self.archive_channel_id:
                    try:
                        archive_message = await self.bot.send_message(
                            chat_id=self.archive_channel_id,
                            text=archive_text,
                            parse_mode="HTML"
                        )
                        
                        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–∫ ID –∞—Ä—Ö–∏–≤–∞
                        return f"archive_{archive_message.message_id}"
                        
                    except Exception as e:
                        print(f"Error sending to archive channel: {e}")
                        return None
                else:
                    # –ï—Å–ª–∏ –∫–∞–Ω–∞–ª–∞ –Ω–µ—Ç, –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º
                    print(f"üìã Archive for consultation {consultation_id}:")
                    print(archive_text)
                    return f"local_archive_{consultation_id}_{int(datetime.utcnow().timestamp())}"
                    
        except Exception as e:
            print(f"Archive error: {e}")
            return None
    
    async def restore_consultation_from_archive(self, chat_id: int, archive_id: str) -> bool:
        """
        –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é –∏–∑ –∞—Ä—Ö–∏–≤–∞ –≤ —á–∞—Ç
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ
        """
        
        try:
            # –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–∞—è –∑–∞–≥–ª—É—à–∫–∞
            await self.bot.send_message(
                chat_id=chat_id,
                text=f"üìñ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∞—Ä—Ö–∏–≤–∞ {archive_id}\n\n"
                     f"üîß –§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ. –°–∫–æ—Ä–æ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –ø–æ–ª–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏.",
                parse_mode="HTML"
            )
            return True
            
        except Exception as e:
            print(f"Restore error: {e}")
            return False
    
    def _generate_archive_text(self, consultation, messages) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –∞—Ä—Ö–∏–≤–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏"""
        
        # –ë–∞–∑–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        start_time = consultation.started_at.strftime("%d.%m.%Y %H:%M")
        end_time = consultation.completed_at.strftime("%d.%m.%Y %H:%M") if consultation.completed_at else "–ù–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞"
        
        client_name = consultation.client.first_name or "–ö–ª–∏–µ–Ω—Ç"
        florist_name = consultation.florist.first_name or "–§–ª–æ—Ä–∏—Å—Ç"
        
        # –ü–æ–¥—Å—á–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π
        client_messages = sum(1 for msg in messages if msg.sender_id == consultation.client_id)
        florist_messages = sum(1 for msg in messages if msg.sender_id == consultation.florist_id)
        
        archive_text = f"""
üìã <b>–ê—Ä—Ö–∏–≤ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ #{consultation.id}</b>

üë§ <b>–ö–ª–∏–µ–Ω—Ç:</b> {client_name}
üå∏ <b>–§–ª–æ—Ä–∏—Å—Ç:</b> {florist_name}

‚è∞ <b>–ù–∞—á–∞–ª–æ:</b> {start_time}
üèÅ <b>–û–∫–æ–Ω—á–∞–Ω–∏–µ:</b> {end_time}
üìä <b>–°—Ç–∞—Ç—É—Å:</b> {consultation.status.value}

üí¨ <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π:</b>
‚Ä¢ –û—Ç –∫–ª–∏–µ–Ω—Ç–∞: {client_messages}
‚Ä¢ –û—Ç —Ñ–ª–æ—Ä–∏—Å—Ç–∞: {florist_messages}
‚Ä¢ –í—Å–µ–≥–æ: {len(messages)}

üìù <b>–ö—Ä–∞—Ç–∫–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ:</b>
{"–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ" if consultation.status.value == "completed" else "–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –¥–æ—Å—Ä–æ—á–Ω–æ"}

---
üí° –î–ª—è –ø–æ–ª–Ω–æ–≥–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /restore_{consultation.id}
        """.strip()
        
        return archive_text