import aiohttp
import json
from typing import List, Optional
from aiogram import Bot

from app.config import settings
from app.models import Consultation, ConsultationMessage

class AIArchiveService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ò–ò –∏ –∞—Ä—Ö–∏–≤–æ–º –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π"""
    
    def __init__(self, bot: Bot):
        self.bot = bot
    
    async def generate_consultation_theme(self, messages: List[ConsultationMessage]) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–º—ã –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ Yandex GPT"""
        try:
            # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 3-5 —Å–æ–æ–±—â–µ–Ω–∏–π –∫–ª–∏–µ–Ω—Ç–∞
            client_messages = [msg.message_text for msg in messages[:5] if msg.message_text]
            if not client_messages:
                return "–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è —Ñ–ª–æ—Ä–∏—Å—Ç–∞"
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç
            conversation = " ".join(client_messages[:3])
            prompt = f"""–°–æ–∑–¥–∞–π –∫—Ä–∞—Ç–∫—É—é —Ç–µ–º—É –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ (–º–∞–∫—Å–∏–º—É–º 30 —Å–∏–º–≤–æ–ª–æ–≤) –Ω–∞ –æ—Å–Ω–æ–≤–µ —ç—Ç–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∫–ª–∏–µ–Ω—Ç–∞ —Ñ–ª–æ—Ä–∏—Å—Ç—É:
            
"{conversation}"

–ü—Ä–∏–º–µ—Ä—ã —Ö–æ—Ä–æ—à–∏—Ö —Ç–µ–º:
- "–í—ã–±–æ—Ä —Ä–æ–∑ –¥–ª—è —Å–≤–∞–¥—å–±—ã"
- "–£—Ö–æ–¥ –∑–∞ –æ—Ä—Ö–∏–¥–µ—è–º–∏"
- "–ë—É–∫–µ—Ç –Ω–∞ –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è"
- "–ö–æ–º–ø–æ–∑–∏—Ü–∏—è –≤ –æ—Ñ–∏—Å"

–û—Ç–≤–µ—Ç—å —Ç–æ–ª—å–∫–æ —Ç–µ–º–æ–π –±–µ–∑ –∫–∞–≤—ã—á–µ–∫ –∏ –æ–±—ä—è—Å–Ω–µ–Ω–∏–π:"""

            # –ï—Å–ª–∏ –Ω–µ—Ç API –∫–ª—é—á–∞ - –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç—É—é –ª–æ–≥–∏–∫—É
            if not settings.YANDEX_GPT_API_KEY:
                return self._generate_simple_theme(client_messages[0])
            
            # –í—ã–∑–æ–≤ Yandex GPT API
            theme = await self._call_yandex_gpt(prompt)
            return theme[:30] if theme else self._generate_simple_theme(client_messages[0])
            
        except Exception as e:
            print(f"Error generating theme with AI: {e}")
            return self._generate_simple_theme(client_messages[0] if client_messages else "")
    
    async def _call_yandex_gpt(self, prompt: str) -> str:
        """–í—ã–∑–æ–≤ Yandex GPT API"""
        url = "https://llm.api.cloud.yandex.net/foundationModels/v1/completion"
        
        headers = {
            "Content-Type": "application/json",
            "Authorization": f"Api-Key {settings.YANDEX_GPT_API_KEY}"
        }
        
        data = {
            "modelUri": f"gpt://{settings.YANDEX_FOLDER_ID}/yandexgpt-lite",
            "completionOptions": {
                "stream": False,
                "temperature": 0.3,
                "maxTokens": 50
            },
            "messages": [
                {
                    "role": "user",
                    "text": prompt
                }
            ]
        }
        
        async with aiohttp.ClientSession() as session:
            async with session.post(url, headers=headers, json=data) as response:
                if response.status == 200:
                    result = await response.json()
                    return result["result"]["alternatives"][0]["message"]["text"].strip()
                else:
                    print(f"Yandex GPT API error: {response.status}")
                    return ""
    
    def _generate_simple_theme(self, first_message: str) -> str:
        """–ü—Ä–æ—Å—Ç–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–º—ã –±–µ–∑ –ò–ò"""
        if not first_message:
            return "–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è —Ñ–ª–æ—Ä–∏—Å—Ç–∞"
        
        # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã –∏ –±–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 30 —Å–∏–º–≤–æ–ª–æ–≤
        clean_text = first_message.strip()[:30]
        
        # –ü—Ä–æ—Å—Ç—ã–µ –ø—Ä–∞–≤–∏–ª–∞
        if any(word in clean_text.lower() for word in ["—Å–≤–∞–¥—å–±–∞", "—Å–≤–∞–¥–µ–±–Ω"]):
            return "–°–≤–∞–¥–µ–±–Ω–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è"
        elif any(word in clean_text.lower() for word in ["—Ä–æ–∑", "–∫—Ä–∞—Å–Ω"]):
            return "–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –ø–æ —Ä–æ–∑–∞–º"
        elif any(word in clean_text.lower() for word in ["–±—É–∫–µ—Ç", "—Ü–≤–µ—Ç"]):
            return "–í—ã–±–æ—Ä –±—É–∫–µ—Ç–∞"
        elif any(word in clean_text.lower() for word in ["—É—Ö–æ–¥", "–ø–æ–ª–∏–≤"]):
            return "–£—Ö–æ–¥ –∑–∞ —Ä–∞—Å—Ç–µ–Ω–∏—è–º–∏"
        else:
            return f"–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è: {clean_text[:20]}..."
    
    async def archive_consultation(self, consultation: Consultation, messages: List[ConsultationMessage]) -> str:
        """–ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –≤ Telegram –∫–∞–Ω–∞–ª"""
        try:
            archive_id = f"ARCHIVE_{consultation.id}"
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∞—Ä—Ö–∏–≤–∞
            client_name = consultation.client.first_name or "–ö–ª–∏–µ–Ω—Ç"
            florist_name = consultation.florist.first_name or "–§–ª–æ—Ä–∏—Å—Ç"
            date_str = consultation.started_at.strftime("%d.%m.%Y %H:%M")
            
            header_text = (
                f"üóÉ #{archive_id}\n"
                f"üìÖ {date_str}\n"
                f"üë§ –ö–ª–∏–µ–Ω—Ç: {client_name}\n"
                f"üå∏ –§–ª–æ—Ä–∏—Å—Ç: {florist_name}\n"
                f"üéØ –¢–µ–º–∞: {consultation.theme or '–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è'}\n"
                f"‚≠ê –†–µ–π—Ç–∏–Ω–≥: {self._get_consultation_rating(consultation)}\n"
                f"{'='*30}"
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –≤ –∞—Ä—Ö–∏–≤–Ω—ã–π –∫–∞–Ω–∞–ª
            await self.bot.send_message(settings.ARCHIVE_CHANNEL_ID, header_text)
            
            # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            for message in messages:
                try:
                    if message.photo_file_id:
                        await self.bot.send_photo(
                            settings.ARCHIVE_CHANNEL_ID,
                            message.photo_file_id,
                            caption=f"üë§ {message.sender.first_name}: {message.message_text or ''}"
                        )
                    elif message.message_text:
                        sender_name = message.sender.first_name or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
                        await self.bot.send_message(
                            settings.ARCHIVE_CHANNEL_ID,
                            f"üë§ {sender_name}: {message.message_text}"
                        )
                except Exception as e:
                    print(f"Error archiving message {message.id}: {e}")
            
            # –ó–∞–≤–µ—Ä—à–∞—é—â–∏–π —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
            await self.bot.send_message(settings.ARCHIVE_CHANNEL_ID, "üìÅ –ö–æ–Ω–µ—Ü –∞—Ä—Ö–∏–≤–∞\n" + "="*40)
            
            return archive_id
            
        except Exception as e:
            print(f"Error archiving consultation: {e}")
            return ""
    
    def _get_consultation_rating(self, consultation: Consultation) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å —Ä–µ–π—Ç–∏–Ω–≥ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏"""
        # TODO: —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ—Ç–∑—ã–≤–æ–≤
        return "–ù–µ –æ—Ü–µ–Ω–µ–Ω–æ"
    
    async def restore_consultation_from_archive(self, chat_id: int, archive_id: str) -> bool:
        """–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –∏–∑ –∞—Ä—Ö–∏–≤–∞"""
        try:
            # TODO: –ü–æ–∏—Å–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –∞—Ä—Ö–∏–≤–Ω–æ–º –∫–∞–Ω–∞–ª–µ –ø–æ —Ö–µ—à—Ç–µ–≥—É
            # –ü–æ–∫–∞ –∑–∞–≥–ª—É—à–∫–∞ - –≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –Ω—É–∂–Ω–æ –∏—Å–∫–∞—Ç—å –ø–æ archive_id –≤ –∫–∞–Ω–∞–ª–µ
            await self.bot.send_message(
                chat_id, 
                f"üîç –ü–æ–∏—Å–∫ –∞—Ä—Ö–∏–≤–∞ {archive_id}...\n"
                "‚ö†Ô∏è –§—É–Ω–∫—Ü–∏—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ"
            )
            return True
        except Exception as e:
            print(f"Error restoring consultation: {e}")
            return False