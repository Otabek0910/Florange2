from typing import List
from aiogram import Bot
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram import types 
from app.models import User, Order, RoleRequest
from app.translate import t

class NotificationService:
    """–°–µ—Ä–≤–∏—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    
    def __init__(self, bot: Bot):
        self.bot = bot
    
async def notify_admins_about_role_request(self, admins: List[User], request: RoleRequest) -> None:
    """–£–≤–µ–¥–æ–º–∏—Ç—å –∞–¥–º–∏–Ω–æ–≤ –æ –∑–∞—è–≤–∫–µ –Ω–∞ —Ä–æ–ª—å"""
    
    # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        user_data = eval(request.user_data)
        full_name = f"{user_data.get('first_name', '')} {user_data.get('last_name', '')}".strip()
        phone = user_data.get('phone', '–ù–µ —É–∫–∞–∑–∞–Ω')
        lang = user_data.get('lang', 'ru')
    except:
        full_name = "–û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö"
        phone = "–ù–µ —É–∫–∞–∑–∞–Ω"
        lang = "ru"
    
    # –ü–µ—Ä–µ–≤–æ–¥–∏–º —Ä–æ–ª—å –Ω–∞ —á–µ–ª–æ–≤–µ—á–µ—Å–∫–∏–π —è–∑—ã–∫
    role_names = {
        "florist": {"ru": "–§–ª–æ—Ä–∏—Å—Ç", "uz": "Florist"},
        "owner": {"ru": "–í–ª–∞–¥–µ–ª–µ—Ü", "uz": "Egasi"}
    }
    
    role_text = role_names.get(request.requested_role.value, {}).get("ru", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ä–æ–ª—å")
    
    for admin in admins:
        try:
            text = (
                f"üÜï –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ —Ä–æ–ª—å\n\n"
                f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {full_name}\n"
                f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n"
                f"üéØ –†–æ–ª—å: {role_text}\n"
                f"üÜî Telegram ID: {request.user_tg_id}\n"
            )
            
            kb = types.InlineKeyboardMarkup(inline_keyboard=[
                [types.InlineKeyboardButton(text="‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", callback_data=f"approve_req_{request.id}")],
                [types.InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_req_{request.id}")]
            ])
            
            await self.bot.send_message(chat_id=int(admin.tg_id), text=text, reply_markup=kb)
        except Exception as e:
            print(f"Error sending notification to admin {admin.tg_id}: {e}")

    async def notify_florists_about_order(self, florists: List[User], order: Order, lang: str = "ru") -> None:
        """–£–≤–µ–¥–æ–º–∏—Ç—å —Ñ–ª–æ—Ä–∏—Å—Ç–æ–≤ –æ –Ω–æ–≤–æ–º –∑–∞–∫–∞–∑–µ"""
        text = (
            f"üÜï –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ #{order.id}\n"
            f"üí∞ {order.total_price} {t(lang, 'currency')}\n"
            f"üìç {order.address}\n"
            f"üìû {order.phone}\n"
        )
        
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –ü—Ä–∏–Ω—è—Ç—å", callback_data=f"accept_{order.id}")],
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data=f"cancel_{order.id}")]
        ])
        
        for florist in florists:
            try:
                await self.bot.send_message(chat_id=int(florist.tg_id), text=text, reply_markup=kb)
            except Exception:
                pass
    
    async def notify_user_about_order_status(self, user: User, order: Order) -> None:
        """–£–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞"""
        lang = user.lang or "ru"
        status_text = t(lang, f"order_status_{order.status.value}")
        
        text = (
            f"üì¶ –ó–∞–∫–∞–∑ #{order.id}\n"
            f"–°—Ç–∞—Ç—É—Å: {status_text}\n"
        )
        
        try:
            await self.bot.send_message(chat_id=int(user.tg_id), text=text)
        except Exception:
            pass