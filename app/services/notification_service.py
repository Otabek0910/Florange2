from typing import List
from aiogram import Bot
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram import types
from datetime import datetime

from app.models import User, Order, RoleRequest
from app.translate import t

class NotificationService:
    """–°–µ—Ä–≤–∏—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    
    def __init__(self, bot: Bot):
        self.bot = bot
    
    async def notify_admins_about_role_request(self, admins: List[User], request: RoleRequest) -> None:
        """–£–≤–µ–¥–æ–º–∏—Ç—å –∞–¥–º–∏–Ω–æ–≤ –æ –∑–∞—è–≤–∫–µ –Ω–∞ —Ä–æ–ª—å"""
        
        # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        try:
            user_data = eval(request.user_data)
            full_name = f"{user_data.get('first_name', '')} {user_data.get('last_name', '')}".strip()
            phone = user_data.get('phone', '–ù–µ —É–∫–∞–∑–∞–Ω')
            lang = user_data.get('lang', 'ru')
        except:
            full_name = "–û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö"
            phone = "–ù–µ —É–∫–∞–∑–∞–Ω"
            lang = "ru"
        
        # –ü–µ—Ä–µ–≤–æ–¥–∏–º —Ä–æ–ª—å –Ω–∞ —á–µ–ª–æ–≤–µ—á–µ—Å–∫–∏–π —è–∑—ã–∫
        role_names = {
            "florist": {"ru": "–§–ª–æ—Ä–∏—Å—Ç", "uz": "Florist"},
            "owner": {"ru": "–í–ª–∞–¥–µ–ª–µ—Ü", "uz": "Egasi"}
        }
        
        role_text = role_names.get(request.requested_role.value, {}).get("ru", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ä–æ–ª—å")
        
        for admin in admins:
            try:
                text = (
                    f"üÜï –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ —Ä–æ–ª—å\n\n"
                    f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {full_name}\n"
                    f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n"
                    f"üéØ –†–æ–ª—å: {role_text}\n"
                    f"üÜî Telegram ID: {request.user_tg_id}\n"
                )
                
                kb = types.InlineKeyboardMarkup(inline_keyboard=[
                    [types.InlineKeyboardButton(text="‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", callback_data=f"approve_req_{request.id}")],
                    [types.InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_req_{request.id}")]
                ])
                
                await self.bot.send_message(chat_id=int(admin.tg_id), text=text, reply_markup=kb)
            except Exception as e:
                print(f"Error sending notification to admin {admin.tg_id}: {e}")
    
    async def notify_florists_about_order(self, florists: list, order, lang: str):
        """–£–≤–µ–¥–æ–º–∏—Ç—å —Ñ–ª–æ—Ä–∏—Å—Ç–æ–≤ –æ –Ω–æ–≤–æ–º –∑–∞–∫–∞–∑–µ –° –ü–û–î–†–û–ë–ù–û–°–¢–Ø–ú–ò"""
        user_name = getattr(order.user, 'first_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ') or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
        
        # –ü–û–õ–£–ß–ê–ï–ú –î–ï–¢–ê–õ–ò –ó–ê–ö–ê–ó–ê (–ø–æ–∑–∏—Ü–∏–∏) - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –õ–û–ì–ò–ö–ê
        order_items = []
        try:
            if hasattr(order, 'items') and order.items:
                for item in order.items:
                    if hasattr(item, 'product') and item.product:
                        product_name = item.product.name_ru if lang == "ru" else item.product.name_uz
                        order_items.append(f"‚Ä¢ {product_name} √ó {item.qty}")
                    else:
                        order_items.append(f"‚Ä¢ –¢–æ–≤–∞—Ä ID:{item.product_id} √ó {item.qty}")
        except Exception as e:
            print(f"Error getting order items: {e}")
        
        items_text = "\n".join(order_items) if order_items else "–ü–æ–∑–∏—Ü–∏–∏ –∑–∞–∫–∞–∑–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã"
        
        # –ò–ù–§–û–†–ú–ê–¢–ò–í–ù–û–ï –£–í–ï–î–û–ú–õ–ï–ù–ò–ï
        message = (
            f"üÜï <b>–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ #{order.id}</b>\n\n"
            f"üë§ <b>–ö–ª–∏–µ–Ω—Ç:</b> {user_name}\n"
            f"üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {order.phone}\n"
            f"üìç <b>–ê–¥—Ä–µ—Å:</b> {order.address}\n"
            f"üí∞ <b>–°—É–º–º–∞:</b> {order.total_price} —Å—É–º\n"
            f"üóì <b>–°–æ–∑–¥–∞–Ω:</b> {order.created_at.strftime('%d.%m.%Y %H:%M')}\n\n"
            f"üõç <b>–°–æ—Å—Ç–∞–≤ –∑–∞–∫–∞–∑–∞:</b>\n{items_text}\n\n"
            f"üí¨ <b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</b> {order.comment or '–ù–µ—Ç'}\n\n"
            f"üìã –£–ø—Ä–∞–≤–ª—è–π—Ç–µ –∑–∞–∫–∞–∑–æ–º —á–µ—Ä–µ–∑ –º–µ–Ω—é '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞–º–∏'"
        )
        
        print(f"üìß –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: {message[:100]}...")
        
        for florist in florists:
            try:
                await self.bot.send_message(
                    chat_id=int(florist.tg_id),
                    text=message,
                    parse_mode="HTML"
                )
                print(f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Ñ–ª–æ—Ä–∏—Å—Ç—É {florist.tg_id}")
            except Exception as e:
                print(f"‚ùå Failed to notify florist {florist.tg_id}: {e}")
    
    async def notify_user_about_order_status(self, user: User, order: Order) -> None:
        """–£–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞"""
        lang = user.lang or "ru"
        status_text = t(lang, f"order_status_{order.status.value}")
        
        text = (
            f"üì¶ –ó–∞–∫–∞–∑ #{order.id}\n"
            f"–°—Ç–∞—Ç—É—Å: {status_text}\n"
        )
        
        try:
            await self.bot.send_message(chat_id=int(user.tg_id), text=text)
        except Exception:
            pass

    async def notify_order_status_change(self, order, new_status: str, changed_by_user, lang: str = "ru"):
        """–£–≤–µ–¥–æ–º–∏—Ç—å –æ —Å–º–µ–Ω–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞"""
        from app.models import RoleEnum
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        from app.database.database import get_session
        from app.services import UserService
        
        async for session in get_session():
            user_service = UserService(session)
            owners = await user_service.user_repo.get_by_role(RoleEnum.owner)
            florists = await user_service.user_repo.get_by_role(RoleEnum.florist)
            
            status_emoji = {
                "accepted": "‚úÖ –ü–†–ò–ù–Ø–¢",
                "canceled": "‚ùå –û–¢–ú–ï–ù–ï–ù", 
                "preparing": "üîÑ –ì–û–¢–û–í–ò–¢–°–Ø",
                "ready": "üéâ –ì–û–¢–û–í",
                "delivering": "üöö –î–û–°–¢–ê–í–õ–Ø–ï–¢–°–Ø",
                "delivered": "‚úÖ –î–û–°–¢–ê–í–õ–ï–ù"
            }
            
            status_text = status_emoji.get(new_status, new_status.upper())
            changer_name = f"{changed_by_user.first_name} {changed_by_user.last_name or ''}".strip()
            changer_role = "üëë –í–ª–∞–¥–µ–ª–µ—Ü" if changed_by_user.role == RoleEnum.owner else "üå∏ –§–ª–æ—Ä–∏—Å—Ç"
            
            message = (
                f"üì¢ <b>–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞</b>\n\n"
                f"üÜî <b>–ó–∞–∫–∞–∑:</b> #{order.id}\n"
                f"üìä <b>–°—Ç–∞—Ç—É—Å:</b> {status_text}\n"
                f"üë§ <b>–ò–∑–º–µ–Ω–∏–ª:</b> {changer_name} ({changer_role})\n"
                f"üïê <b>–í—Ä–µ–º—è:</b> {datetime.now().strftime('%d.%m.%Y %H:%M')}\n\n"
                f"üí∞ –°—É–º–º–∞: {order.total_price} —Å—É–º\n"
                f"üìç –ê–¥—Ä–µ—Å: {order.address}"
            )
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤ (–æ–Ω–∏ –≤–∏–¥—è—Ç –∫—Ç–æ –ø—Ä–∏–Ω—è–ª)
            for owner in owners:
                try:
                    await self.bot.send_message(
                        chat_id=int(owner.tg_id),
                        text=message,
                        parse_mode="HTML"
                    )
                except Exception as e:
                    print(f"Failed to notify owner {owner.tg_id}: {e}")
            
            # –§–ª–æ—Ä–∏—Å—Ç–æ–≤ —É–≤–µ–¥–æ–º–ª—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∑–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç (—á—Ç–æ–±—ã –æ–Ω–∏ –∑–Ω–∞–ª–∏ —á—Ç–æ –∑–∞–∫–∞–∑ –∑–∞–Ω—è—Ç)
            if new_status in ["accepted", "canceled"]:
                simple_message = (
                    f"üì¢ –ó–∞–∫–∞–∑ #{order.id} {status_text}\n"
                    f"üë§ –ü—Ä–∏–Ω—è–ª: {changer_name}"
                )
                
                for florist in florists:
                    # –ù–ï —É–≤–µ–¥–æ–º–ª—è–µ–º —Ç–æ–≥–æ –∫—Ç–æ –ø—Ä–∏–Ω—è–ª –∑–∞–∫–∞–∑
                    if florist.id != changed_by_user.id:
                        try:
                            await self.bot.send_message(
                                chat_id=int(florist.tg_id),
                                text=simple_message,
                                parse_mode="HTML"
                            )
                        except Exception as e:
                            print(f"Failed to notify florist {florist.tg_id}: {e}")

    async def hide_order_from_other_florists(self, order_id: int, taken_by_user):
        """–°–∫—Ä—ã—Ç—å –∑–∞–∫–∞–∑ —É –¥—Ä—É–≥–∏—Ö —Ñ–ª–æ—Ä–∏—Å—Ç–æ–≤ –ø–æ—Å–ª–µ –ø—Ä–∏–Ω—è—Ç–∏—è"""
        from app.database.database import get_session
        from app.services import UserService
        from app.models import RoleEnum
        
        async for session in get_session():
            user_service = UserService(session)
            florists = await user_service.user_repo.get_by_role(RoleEnum.florist)
            
            hide_message = (
                f"üîí <b>–ó–∞–∫–∞–∑ #{order_id} –ø—Ä–∏–Ω—è—Ç</b>\n\n"
                f"üë§ –ü—Ä–∏–Ω—è–ª: {taken_by_user.first_name}\n"
                f"üìä –ó–∞–∫–∞–∑ –±–æ–ª—å—à–µ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è"
            )
            
            for florist in florists:
                # –ù–ï –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–º—É –∫—Ç–æ –ø—Ä–∏–Ω—è–ª
                if florist.id != taken_by_user.id:
                    try:
                        await self.bot.send_message(
                            chat_id=int(florist.tg_id),
                            text=hide_message,
                            parse_mode="HTML"
                        )
                    except Exception as e:
                        print(f"Failed to hide order from florist {florist.tg_id}: {e}")