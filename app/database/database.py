# app/database/database.py - –∑–∞–º–µ–Ω–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ engine
from typing import AsyncGenerator
from sqlalchemy.ext.asyncio import AsyncSession, create_async_engine
from sqlalchemy.orm import sessionmaker
from app.models import Base
from app.config import config
from sqlalchemy import text

# –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –≤–º–µ—Å—Ç–æ –ø—Ä—è–º–æ–≥–æ —á—Ç–µ–Ω–∏—è env
DATABASE_URL = config.DATABASE_URL

print(f"üîó Database: {DATABASE_URL.split('@')[1] if '@' in DATABASE_URL else '–ª–æ–∫–∞–ª—å–Ω–∞—è'}")

# –£–±–∏—Ä–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π engine - —Å–æ–∑–¥–∞–µ–º –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏
_engine = None
_session_factory = None

def get_engine():
    """–ü–æ–ª—É—á–∏—Ç—å –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å engine"""
    global _engine
    if _engine is None:
        _engine = create_async_engine(
            DATABASE_URL, 
            echo=False, 
            future=True,
            pool_pre_ping=True,  # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
            pool_recycle=300     # –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
        )
    return _engine

def get_session_factory():
    """–ü–æ–ª—É—á–∏—Ç—å —Ñ–∞–±—Ä–∏–∫—É —Å–µ—Å—Å–∏–π"""
    global _session_factory
    if _session_factory is None:
        _session_factory = sessionmaker(
            bind=get_engine(), 
            expire_on_commit=False, 
            class_=AsyncSession
        )
    return _session_factory

async def get_session() -> AsyncGenerator[AsyncSession, None]:
    factory = get_session_factory()
    async with factory() as session:
        yield session

async def init_db():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏"""
    try:
        print("üîó –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î...")
        
        engine = get_engine()
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        async with engine.connect() as conn:
            await conn.execute(text("SELECT 1"))
        print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î —É—Å–ø–µ—à–Ω–æ")
        
        # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü
        print("üìã –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã...")
        async with engine.begin() as conn:
            await conn.run_sync(Base.metadata.create_all)
        print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î: {e}")
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º engine –ø—Ä–∏ –æ—à–∏–±–∫–µ
        global _engine, _session_factory
        if _engine:
            await _engine.dispose()
            _engine = None
            _session_factory = None
        raise

async def close_db():
    """–ó–∞–∫—Ä—ã—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –ë–î"""
    global _engine
    if _engine:
        await _engine.dispose()
        _engine = None