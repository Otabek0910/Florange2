from aiogram import Router, types, F
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext

from app.database.database import get_session
from app.services import FloristService, UserService
from app.models import RoleEnum
from app.translate import t
from app.exceptions import UserNotFoundError

router = Router()

class FloristProfileStates(StatesGroup):
    EDIT_BIO = State()
    EDIT_SPECIALIZATION = State()

async def _get_user_and_lang(session, tg_id: int):
    """–ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —è–∑—ã–∫"""
    user_service = UserService(session)
    try:
        user = await user_service.get_user_by_tg_id(str(tg_id))
        return user, user.lang or "ru"
    except UserNotFoundError:
        return None, "ru"

@router.callback_query(F.data == "florist_profile")
async def show_florist_profile(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å —Ñ–ª–æ—Ä–∏—Å—Ç–∞"""
    async for session in get_session():
        user, lang = await _get_user_and_lang(session, callback.from_user.id)
        
        if not user or user.role != RoleEnum.florist:
            await callback.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
            return
        
        florist_service = FloristService(session)
        profile = await florist_service.get_or_create_profile(user.id)
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –ø—Ä–æ—Ñ–∏–ª—å
        bio = profile.bio if profile.bio else "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
        specialization = profile.specialization if profile.specialization else "–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Ñ–ª–æ—Ä–∏—Å—Ç"
        rating = f"{profile.rating:.1f}" if profile.reviews_count > 0 else "–Ω–µ—Ç –æ—Ü–µ–Ω–æ–∫"
        
        text = (
            f"üë§ <b>–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å</b>\n\n"
            f"üå∏ <b>–ò–º—è:</b> {user.first_name} {user.last_name or ''}\n"
            f"üìù <b>–°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è:</b> {specialization}\n"
            f"üìñ <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {bio}\n"
            f"‚≠ê <b>–†–µ–π—Ç–∏–Ω–≥:</b> {rating} ({profile.reviews_count} –æ—Ç–∑—ã–≤–æ–≤)\n"
            f"üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {user.phone or '–ù–µ —É–∫–∞–∑–∞–Ω'}"
        )
        
        kb = types.InlineKeyboardMarkup(inline_keyboard=[
            [types.InlineKeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ", callback_data="edit_bio")],
            [types.InlineKeyboardButton(text="üå∏ –ò–∑–º–µ–Ω–∏—Ç—å —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é", callback_data="edit_specialization")],
            [types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")]
        ])
        
        await callback.message.edit_text(text, reply_markup=kb, parse_mode="HTML")
        await callback.answer()

@router.callback_query(F.data == "edit_bio")
async def edit_bio_start(callback: types.CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è"""
    await state.set_state(FloristProfileStates.EDIT_BIO)
    await callback.message.answer("üìù –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≤–∞—à–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è:")
    await callback.answer()

@router.message(FloristProfileStates.EDIT_BIO)
async def edit_bio_save(message: types.Message, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ"""
    async for session in get_session():
        user, lang = await _get_user_and_lang(session, message.from_user.id)
        
        if not user:
            await message.answer("–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            await state.clear()
            return
        
        florist_service = FloristService(session)
        
        try:
            # –û–±–Ω–æ–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ
            await florist_service.update_profile(user.id, bio=message.text)
            await session.commit()
            
            await message.answer("‚úÖ –û–ø–∏—Å–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!")
            await state.clear()
            
        except Exception as e:
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
            await state.clear()

@router.callback_query(F.data == "edit_specialization")
async def edit_specialization_start(callback: types.CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏"""
    await state.set_state(FloristProfileStates.EDIT_SPECIALIZATION)
    
    # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≥–æ—Ç–æ–≤—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
    kb = types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(text="üåπ –°–≤–∞–¥–µ–±–Ω—ã–π —Ñ–ª–æ—Ä–∏—Å—Ç", callback_data="spec_wedding")],
        [types.InlineKeyboardButton(text="üéÇ –ü—Ä–∞–∑–¥–Ω–∏—á–Ω—ã–µ –±—É–∫–µ—Ç—ã", callback_data="spec_holiday")],
        [types.InlineKeyboardButton(text="üè¢ –ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–µ –∫–æ–º–ø–æ–∑–∏—Ü–∏–∏", callback_data="spec_corporate")],
        [types.InlineKeyboardButton(text="üåø –ò–Ω—Ç–µ—Ä—å–µ—Ä–Ω–∞—è —Ñ–ª–æ—Ä–∏—Å—Ç–∏–∫–∞", callback_data="spec_interior")],
        [types.InlineKeyboardButton(text="üå∏ –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Ñ–ª–æ—Ä–∏—Å—Ç", callback_data="spec_universal")],
        [types.InlineKeyboardButton(text="‚úèÔ∏è –í–≤–µ—Å—Ç–∏ —Å–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç", callback_data="spec_custom")]
    ])
    
    await callback.message.answer("üå∏ –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é:", reply_markup=kb)
    await callback.answer()

@router.callback_query(F.data.startswith("spec_"))
async def save_specialization(callback: types.CallbackQuery, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—É—é —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é"""
    spec_type = callback.data.split("_")[1]
    
    specializations = {
        "wedding": "–°–≤–∞–¥–µ–±–Ω—ã–π —Ñ–ª–æ—Ä–∏—Å—Ç",
        "holiday": "–ü—Ä–∞–∑–¥–Ω–∏—á–Ω—ã–µ –±—É–∫–µ—Ç—ã", 
        "corporate": "–ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–µ –∫–æ–º–ø–æ–∑–∏—Ü–∏–∏",
        "interior": "–ò–Ω—Ç–µ—Ä—å–µ—Ä–Ω–∞—è —Ñ–ª–æ—Ä–∏—Å—Ç–∏–∫–∞",
        "universal": "–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Ñ–ª–æ—Ä–∏—Å—Ç"
    }
    
    if spec_type == "custom":
        await callback.message.answer("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é:")
        return
    
    specialization = specializations.get(spec_type, "–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Ñ–ª–æ—Ä–∏—Å—Ç")
    
    async for session in get_session():
        user, lang = await _get_user_and_lang(session, callback.from_user.id)
        
        if not user:
            await callback.answer("–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            await state.clear()
            return
        
        florist_service = FloristService(session)
        
        try:
            await florist_service.update_profile(user.id, specialization=specialization)
            await session.commit()
            
            await callback.message.edit_text(f"‚úÖ –°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞: {specialization}")
            await state.clear()
            
        except Exception as e:
            await callback.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}", show_alert=True)
            await state.clear()

@router.message(FloristProfileStates.EDIT_SPECIALIZATION)
async def save_custom_specialization(message: types.Message, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫—É—é —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é"""
    async for session in get_session():
        user, lang = await _get_user_and_lang(session, message.from_user.id)
        
        if not user:
            await message.answer("–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            await state.clear()
            return
        
        florist_service = FloristService(session)
        
        try:
            await florist_service.update_profile(user.id, specialization=message.text)
            await session.commit()
            
            await message.answer(f"‚úÖ –°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞: {message.text}")
            await state.clear()
            
        except Exception as e:
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
            await state.clear()