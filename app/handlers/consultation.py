
from aiogram import Router, types, F
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from sqlalchemy import select

from app.database import get_session
from app.services import UserService, FloristService, ConsultationService
from app.models import RoleEnum, ConsultationStatusEnum, Consultation, ConsultationMessage
from app.translate import t
from app.exceptions import ValidationError, UserNotFoundError
import logging
from datetime import datetime

router = Router()

class ConsultationStates(StatesGroup):
    CHATTING = State()
    RATING = State()

async def _get_user_and_lang(session, tg_id: int):
    """–ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —è–∑—ã–∫"""
    user_service = UserService(session)
    try:
        user = await user_service.get_user_by_tg_id(str(tg_id))
        return user, user.lang or "ru"
    except UserNotFoundError:
        return None, "ru"

@router.callback_query(F.data == "consultation_start")
async def start_consultation_flow(callback: types.CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –≤—ã–±–æ—Ä–∞ —Ñ–ª–æ—Ä–∏—Å—Ç–∞"""
    await _show_florists_page(callback, state, page=0)

@router.callback_query(F.data.startswith("florists_page_"))
async def show_florists_page(callback: types.CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ñ–ª–æ—Ä–∏—Å—Ç–æ–≤"""
    page = int(callback.data.split("_")[2])
    await _show_florists_page(callback, state, page)

async def _show_florists_page(callback: types.CallbackQuery, state: FSMContext, page: int = 0):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å —Ñ–ª–æ—Ä–∏—Å—Ç–∞–º–∏"""
    async for session in get_session():
        user, lang = await _get_user_and_lang(session, callback.from_user.id)
        
        if not user or user.role != RoleEnum.client:
            await callback.answer(t(lang, "access_denied"), show_alert=True)
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ—Ç –ª–∏ –∞–∫—Ç–∏–≤–Ω–æ–π –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏
        consultation_service = ConsultationService(session)
        active = await consultation_service.get_active_consultation(user.id)
        
        if active:
            await callback.message.edit_text(
                t(lang, "consultation_busy"),
                reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[
                    [types.InlineKeyboardButton(text=t(lang, "end_consultation"), callback_data=f"end_consultation_{active.id}")],
                    [types.InlineKeyboardButton(text=t(lang, "back_to_menu"), callback_data="main_menu")]
                ])
            )
            await callback.answer()
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ñ–ª–æ—Ä–∏—Å—Ç–æ–≤
        florist_service = FloristService(session)
        all_florists = await florist_service.get_available_florists()
        
        if not all_florists:
            kb = types.InlineKeyboardMarkup(inline_keyboard=[
                [types.InlineKeyboardButton(text=t(lang, "back_to_menu"), callback_data="main_menu")]
            ])
            await callback.message.edit_text(t(lang, "no_florists_available"), reply_markup=kb)
            await callback.answer()
            return
        
        # –ü–∞–≥–∏–Ω–∞—Ü–∏—è: –ø–æ 3 —Ñ–ª–æ—Ä–∏—Å—Ç–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
        per_page = 3
        total_pages = (len(all_florists) + per_page - 1) // per_page
        start_idx = page * per_page
        end_idx = start_idx + per_page
        florists_on_page = all_florists[start_idx:end_idx]
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ —Ñ–ª–æ—Ä–∏—Å—Ç–æ–≤
        kb_rows = []
        text_lines = [f"{t(lang, 'choose_florist')} (—Å—Ç—Ä. {page + 1}/{total_pages})", ""]
        
        for florist_data in florists_on_page:
            profile = florist_data['profile']
            user_obj = florist_data['user']
            status_text = florist_data['status_text']
            rating_text = florist_data['rating_text']
            is_online = florist_data['is_online']
            
            # –ö—Ä–∞—Å–∏–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
            specialization = profile.specialization or "–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Ñ–ª–æ—Ä–∏—Å—Ç"
            
            # –≠–º–æ–¥–∑–∏ —Å—Ç–∞—Ç—É—Å–∞
            status_emoji = "üü¢" if is_online else "üü°"
            
            # –ö–Ω–æ–ø–∫–∞: "üå∏ –ò–º—è ‚≠ê4.2 üü¢"
            button_text = f"üå∏ {user_obj.first_name} {rating_text} {status_emoji}"
            
            kb_rows.append([types.InlineKeyboardButton(
                text=button_text,
                callback_data=f"select_florist_{user_obj.id}"
            )])
            
            # –î–µ—Ç–∞–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≤ —Ç–µ–∫—Å—Ç–µ
            text_lines.append(
                f"üå∏ <b>{user_obj.first_name}</b> {rating_text}\n"
                f"üìù {specialization}\n"
                f"{status_emoji} {status_text}\n"
            )
        
        # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        nav_row = []
        if page > 0:
            nav_row.append(types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"florists_page_{page-1}"))
        if page < total_pages - 1:
            nav_row.append(types.InlineKeyboardButton(text="–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è", callback_data=f"florists_page_{page+1}"))
        
        if nav_row:
            kb_rows.append(nav_row)
        
        kb_rows.append([types.InlineKeyboardButton(text=t(lang, "back_to_menu"), callback_data="main_menu")])
        kb = types.InlineKeyboardMarkup(inline_keyboard=kb_rows)
        text = "\n".join(text_lines)
        
        await callback.message.edit_text(text, reply_markup=kb, parse_mode="HTML")
        await callback.answer()

@router.callback_query(F.data.startswith("select_florist_"))
async def select_florist(callback: types.CallbackQuery, state: FSMContext):
    """–í—ã–±–æ—Ä —Ñ–ª–æ—Ä–∏—Å—Ç–∞ –∏ –Ω–∞—á–∞–ª–æ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏"""
    florist_id = int(callback.data.split("_")[2])
    
    async for session in get_session():
        user, lang = await _get_user_and_lang(session, callback.from_user.id)
        
        if not user:
            await callback.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        consultation_service = ConsultationService(session)
        
        try:
            # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é
            consultation = await consultation_service.start_consultation(user.id, florist_id)
            await session.commit()
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–º—è —Ñ–ª–æ—Ä–∏—Å—Ç–∞
            await session.refresh(consultation, ['florist'])
            florist_name = consultation.florist.first_name or "–§–ª–æ—Ä–∏—Å—Ç"
            
            # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–∫—Ä–µ–ø–ª—è–µ–º —É–ø—Ä–∞–≤–ª—è—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            time_str = consultation.started_at.strftime("%H:%M")
            header_text = t(lang, "consultation_header", name=florist_name, time=time_str)
            
            header_kb = types.InlineKeyboardMarkup(inline_keyboard=[
                [
                    types.InlineKeyboardButton(text=t(lang, "end_consultation"), callback_data=f"end_consultation_{consultation.id}"),
                    types.InlineKeyboardButton(text=t(lang, "call_florist"), callback_data=f"call_florist_{consultation.id}")
                ]
            ])
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏ –∑–∞–∫—Ä–µ–ø–ª—è–µ–º header
            header_msg = await callback.message.answer(header_text, reply_markup=header_kb)
            await callback.bot.pin_chat_message(callback.message.chat.id, header_msg.message_id, disable_notification=True)
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º —Ñ–ª–æ—Ä–∏—Å—Ç–∞
            await _notify_florist_about_consultation(callback.bot, consultation, session)
            
            # –ü–µ—Ä–µ–≤–æ–¥–∏–º –∫–ª–∏–µ–Ω—Ç–∞ –≤ —Ä–µ–∂–∏–º —á–∞—Ç–∞
            await state.set_state(ConsultationStates.CHATTING)
            await state.update_data(consultation_id=consultation.id, header_message_id=header_msg.message_id)
            
            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º —Ñ–ª–æ—Ä–∏—Å—Ç–∞
            await callback.message.delete()
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await callback.message.answer(t(lang, "consultation_started"))
            await callback.answer()
            
        except ValidationError as e:
            if "–∑–∞–Ω—è—Ç" in str(e):
                await callback.answer(t(lang, "florist_busy"), show_alert=True)
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫ —Å–ø–∏—Å–∫—É —Ñ–ª–æ—Ä–∏—Å—Ç–æ–≤
                await start_consultation_flow(callback, state)
            else:
                await callback.answer(str(e), show_alert=True)

@router.message(ConsultationStates.CHATTING)
async def handle_consultation_message(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ (—É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π)"""
    data = await state.get_data()
    consultation_id = data.get('consultation_id')
    
    if not consultation_id:
        await message.answer("–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        await state.clear()
        return
    
    async for session in get_session():
        user, lang = await _get_user_and_lang(session, message.from_user.id)
        consultation_service = ConsultationService(session)
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é —Å —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏
            consultation = await consultation_service.get_consultation_with_participants(consultation_id)
            if not consultation:
                await message.answer("–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                await state.clear()
                return
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            photo_file_id = None
            if message.photo:
                photo_file_id = message.photo[-1].file_id
            
            await consultation_service.send_message(
                consultation_id, user.id, message.text, photo_file_id
            )
            await session.commit()
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–ª—É—á–∞—Ç–µ–ª—è –∏ –ø–µ—Ä–µ—Å—ã–ª–∞–µ–º
            consultation_obj = consultation['consultation']
            if user.id == consultation_obj.client_id:
                # –ö–ª–∏–µ–Ω—Ç –Ω–∞–ø–∏—Å–∞–ª - –ø–µ—Ä–µ—Å—ã–ª–∞–µ–º —Ñ–ª–æ—Ä–∏—Å—Ç—É
                recipient_tg_id = consultation['florist'].tg_id
                prefix = t(lang, "consultation_message_from_client")
            else:
                # –§–ª–æ—Ä–∏—Å—Ç –Ω–∞–ø–∏—Å–∞–ª - –ø–µ—Ä–µ—Å—ã–ª–∞–µ–º –∫–ª–∏–µ–Ω—Ç—É
                recipient_tg_id = consultation['client'].tg_id
                prefix = t(lang, "consultation_message_from_florist")
            
            # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            try:
                if message.photo:
                    await message.bot.send_photo(
                        chat_id=int(recipient_tg_id),
                        photo=message.photo[-1].file_id,
                        caption=f"{prefix}\n{message.caption or ''}"
                    )
                else:
                    await message.bot.send_message(
                        chat_id=int(recipient_tg_id),
                        text=f"{prefix}\n{message.text}"
                    )
            except Exception as e:
                print(f"Error forwarding message: {e}")
                
        except ValidationError as e:
            await message.answer(f"–û—à–∏–±–∫–∞: {e}")
            await state.clear()

@router.callback_query(F.data.startswith("end_consultation_"))
async def end_consultation(callback: types.CallbackQuery, state: FSMContext):
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ —Å –ø–æ–ª–Ω–æ–π –æ—á–∏—Å—Ç–∫–æ–π"""
    consultation_id = int(callback.data.split("_")[2])
    
    from app.database.uow import get_uow
    
    async with get_uow() as uow:
        user, lang = await _get_user_and_lang(uow.session, callback.from_user.id)
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é
            consultation = await uow.consultations.get(consultation_id)
            if not consultation:
                await callback.answer("–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
                return
            
            # –ó–∞–≤–µ—Ä—à–∞–µ–º –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é
            consultation.status = ConsultationStatusEnum.completed_by_client \
                if user.id == consultation.client_id \
                else ConsultationStatusEnum.completed_by_florist
            consultation.completed_at = datetime.utcnow()
            
            # –ê—Ä—Ö–∏–≤–∏—Ä—É–µ–º –µ—Å–ª–∏ –µ—Å—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è
            messages = await uow.consultations.get_messages(consultation_id)
            if messages:
                from app.services.ai_archive_service import AIArchiveService
                ai_service = AIArchiveService(callback.bot)
                
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ–º—É
                theme = await ai_service.generate_consultation_theme(messages)
                consultation.theme = theme
                
                # –ê—Ä—Ö–∏–≤–∏—Ä—É–µ–º
                archive_id = await ai_service.archive_consultation(consultation, messages)
                consultation.archive_id = archive_id
            
            # –í–ê–ñ–ù–û: –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM –¥–ª—è –û–ë–û–ò–• —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
            await state.clear()
            
            # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—Ç–æ—Ä–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞
            other_user_id = consultation.florist_id if user.id == consultation.client_id else consultation.client_id
            other_user = await uow.users.get(other_user_id)
            if other_user:
                # –°–æ–∑–¥–∞–µ–º storage key –¥–ª—è –¥—Ä—É–≥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                from aiogram.fsm.storage.base import StorageKey
                other_key = StorageKey(
                    bot_id=callback.bot.id,
                    chat_id=int(other_user.tg_id),
                    user_id=int(other_user.tg_id)
                )
                await state.storage.set_state(other_key, None)
                await state.storage.set_data(other_key, {})
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –¥—Ä—É–≥–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞
            if other_user:
                await callback.bot.send_message(
                    int(other_user.tg_id),
                    "–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–æ–º."
                )
            
            # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –æ—Ü–µ–Ω–∏—Ç—å (—Ç–æ–ª—å–∫–æ –∫–ª–∏–µ–Ω—Ç—É)
            if user.role == RoleEnum.client:
                kb = types.InlineKeyboardMarkup(inline_keyboard=[
                    [types.InlineKeyboardButton(text=f"‚≠ê {i}", callback_data=f"rate_{consultation_id}_{i}") 
                     for i in range(1, 6)],
                    [types.InlineKeyboardButton(text=t(lang, "back_to_menu"), callback_data="main_menu")]
                ])
                await callback.message.answer(t(lang, "rate_florist_prompt"), reply_markup=kb)
            else:
                await callback.message.answer("–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
            
            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏
            await _clear_consultation_chat(
                callback.bot, 
                callback.message.chat.id,
                state
            )
            
        except Exception as e:
            logging.error(f"Error ending consultation: {e}")
            await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏", show_alert=True)

@router.callback_query(F.data == "consultation_history")
async def show_consultation_history(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π"""
    async for session in get_session():
        user, lang = await _get_user_and_lang(session, callback.from_user.id)
        
        if not user:
            await callback.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        consultation_service = ConsultationService(session)
        result = await session.execute(
            select(Consultation)
            .where(
                ((Consultation.client_id == user.id) | (Consultation.florist_id == user.id)) &
                (Consultation.status != ConsultationStatusEnum.active)
            )
            .order_by(Consultation.completed_at.desc())
            .limit(10)
        )
        consultations = result.scalars().all()
        
        if not consultations:
            kb = types.InlineKeyboardMarkup(inline_keyboard=[
                [types.InlineKeyboardButton(text=t(lang, "back_to_menu"), callback_data="main_menu")]
            ])
            await callback.message.edit_text(t(lang, "no_consultation_history"), reply_markup=kb)
            await callback.answer()
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π
        kb_rows = []
        text_lines = [t(lang, "history_consultations"), ""]
        
        for consultation in consultations:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            await session.refresh(consultation, ['client', 'florist'])
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å –∫–µ–º –±—ã–ª–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è
            if consultation.client_id == user.id:
                partner_name = consultation.florist.first_name or "–§–ª–æ—Ä–∏—Å—Ç"
                partner_emoji = "üå∏"
            else:
                partner_name = consultation.client.first_name or "–ö–ª–∏–µ–Ω—Ç"
                partner_emoji = "üë§"
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É
            date_str = consultation.started_at.strftime("%d.%m.%Y")
            theme = consultation.theme or "–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫
            text_lines.append(
                f"üìÖ {date_str} | {partner_emoji} {partner_name}\n"
                f"üí¨ {theme}\n"
            )
            
            # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
            kb_rows.append([types.InlineKeyboardButton(
                text=f"{date_str} - {partner_name}: {theme[:20]}...",
                callback_data=f"view_consultation_{consultation.id}"
            )])
        
        kb_rows.append([types.InlineKeyboardButton(text=t(lang, "back_to_menu"), callback_data="main_menu")])
        kb = types.InlineKeyboardMarkup(inline_keyboard=kb_rows)
        
        text = "\n".join(text_lines)
        await callback.message.edit_text(text, reply_markup=kb, parse_mode="HTML")
        await callback.answer()

@router.callback_query(F.data.startswith("view_consultation_"))
async def view_consultation_archive(callback: types.CallbackQuery):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –∞—Ä—Ö–∏–≤–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏"""
    consultation_id = int(callback.data.split("_")[2])
    
    async for session in get_session():
        user, lang = await _get_user_and_lang(session, callback.from_user.id)
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é
        result = await session.execute(
            select(Consultation).where(Consultation.id == consultation_id)
        )
        consultation = result.scalars().first()
        
        if not consultation:
            await callback.answer("–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
        if consultation.client_id != user.id and consultation.florist_id != user.id:
            await callback.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏", show_alert=True)
            return
        
        # –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ - –≤ –±—É–¥—É—â–µ–º –∏–∑ –∞—Ä—Ö–∏–≤–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞
        if consultation.archive_id:
            from app.services.ai_archive_service import AIArchiveService
            ai_service = AIArchiveService(callback.bot)
            success = await ai_service.restore_consultation_from_archive(
                callback.message.chat.id, 
                consultation.archive_id
            )
        else:
            await callback.message.edit_text(
                "üìÅ –ê—Ä—Ö–∏–≤ —ç—Ç–æ–π –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω\n"
                "–í–æ–∑–º–æ–∂–Ω–æ, –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –±—ã–ª–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –¥–æ –≤–Ω–µ–¥—Ä–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏—è."
            )
        
        await callback.answer()

@router.callback_query(F.data.startswith("call_florist_"))
async def request_call_florist(callback: types.CallbackQuery):
    """–ó–∞–ø—Ä–æ—Å –∑–≤–æ–Ω–∫–∞ —Ñ–ª–æ—Ä–∏—Å—Ç—É"""
    consultation_id = int(callback.data.split("_")[2])
    
    async for session in get_session():
        user, lang = await _get_user_and_lang(session, callback.from_user.id)
        
        if not user:
            await callback.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é
        consultation_service = ConsultationService(session)
        consultation_data = await consultation_service.get_consultation_with_participants(consultation_id)
        
        if not consultation_data:
            await callback.answer("–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            return
        
        consultation = consultation_data['consultation']
        client = consultation_data['client']
        florist = consultation_data['florist']
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å —Ñ–ª–æ—Ä–∏—Å—Ç—É —Å –Ω–æ–º–µ—Ä–æ–º –∫–ª–∏–µ–Ω—Ç–∞
        client_phone = client.phone or "–ù–µ —É–∫–∞–∑–∞–Ω"
        call_request_text = t(lang, "call_request_received", name=client.first_name, phone=client_phone)
        
        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –Ω–∞–±–æ—Ä–∞ –Ω–æ–º–µ—Ä–∞ (—Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö)
        call_kb = types.InlineKeyboardMarkup(inline_keyboard=[
            [types.InlineKeyboardButton(text=f"üìû –ù–∞–±—Ä–∞—Ç—å {client_phone}", url=f"tel:{client_phone}")]
        ]) if client_phone != "–ù–µ —É–∫–∞–∑–∞–Ω" else None
        
        try:
            await callback.bot.send_message(
                int(florist.tg_id), 
                call_request_text, 
                reply_markup=call_kb
            )
            await callback.answer(t(lang, "call_request_sent"))
        except Exception as e:
            await callback.answer("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞", show_alert=True)
            print(f"Error sending call request: {e}")

@router.callback_query(F.data.startswith("respond_consultation_"))
async def florist_respond_consultation(callback: types.CallbackQuery, state: FSMContext):
    """–§–ª–æ—Ä–∏—Å—Ç –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é"""
    consultation_id = int(callback.data.split("_")[2])
    
    async for session in get_session():
        user, lang = await _get_user_and_lang(session, callback.from_user.id)
        consultation_service = ConsultationService(session)
        
        if not user or user.role not in [RoleEnum.florist, RoleEnum.owner]:
            await callback.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –∞–∫—Ç–∏–≤–Ω–∞ –∏ —Ñ–ª–æ—Ä–∏—Å—Ç —É—á–∞—Å—Ç–≤—É–µ—Ç
        consultation = await consultation_service.consultation_repo.get(consultation_id)
        if not consultation or consultation.florist_id != user.id:
            await callback.answer("–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            return
        
        if consultation.status != ConsultationStatusEnum.active:
            await callback.answer("–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞", show_alert=True)
            return
        
        # –ü–µ—Ä–µ–≤–æ–¥–∏–º —Ñ–ª–æ—Ä–∏—Å—Ç–∞ –≤ —Ä–µ–∂–∏–º —á–∞—Ç–∞
        await state.set_state(ConsultationStates.CHATTING)
        await state.update_data(consultation_id=consultation_id, client_id=consultation.client_id)
        
        kb = types.InlineKeyboardMarkup(inline_keyboard=[
            [types.InlineKeyboardButton(text="üîö –ó–∞–≤–µ—Ä—à–∏—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é", callback_data=f"end_consultation_{consultation_id}")]
        ])
        
        await callback.message.edit_text(
            "üí¨ –í—ã –ø–æ–¥–∫–ª—é—á–µ–Ω—ã –∫ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏! –ù–∞–ø–∏—à–∏—Ç–µ –æ—Ç–≤–µ—Ç –∫–ª–∏–µ–Ω—Ç—É:",
            reply_markup=kb
        )
        await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π —Ñ–ª–æ—Ä–∏—Å—Ç–∞ –≤ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ —É–±–∏—Ä–∞–µ–º - —Ç–µ–ø–µ—Ä—å —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –≤—ã—à–µ

@router.callback_query(F.data.startswith("rate_"))
async def rate_florist(callback: types.CallbackQuery):
    """–û—Ü–µ–Ω–∫–∞ —Ñ–ª–æ—Ä–∏—Å—Ç–∞"""
    parts = callback.data.split("_")
    consultation_id = int(parts[1])
    rating = int(parts[2])
    
    async for session in get_session():
        user, lang = await _get_user_and_lang(session, callback.from_user.id)
        consultation_service = ConsultationService(session)
        
        try:
            await consultation_service.rate_florist(consultation_id, user.id, rating)
            await session.commit()
            
            kb = types.InlineKeyboardMarkup(inline_keyboard=[
                [types.InlineKeyboardButton(text=t(lang, "back_to_menu"), callback_data="main_menu")]
            ])
            
            await callback.message.edit_text(t(lang, "rating_saved"), reply_markup=kb)
            await callback.answer()
            
        except ValidationError as e:
            await callback.answer(str(e), show_alert=True)

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
async def _notify_florist_about_consultation(bot, consultation, session):
    """–£–≤–µ–¥–æ–º–∏—Ç—å —Ñ–ª–æ—Ä–∏—Å—Ç–∞ –æ –Ω–æ–≤–æ–π –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏"""
    try:
        await session.refresh(consultation, ['client', 'florist'])
        client = consultation.client
        florist = consultation.florist
        
        text = (
            f"üå∏ –ù–æ–≤–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è!\n\n"
            f"üë§ –ö–ª–∏–µ–Ω—Ç: {client.first_name}\n"
            f"üì± –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è #{consultation.id}"
        )
        
        kb = types.InlineKeyboardMarkup(inline_keyboard=[
            [types.InlineKeyboardButton(text="üí¨ –û—Ç–≤–µ—Ç–∏—Ç—å", callback_data=f"respond_consultation_{consultation.id}")],
            [types.InlineKeyboardButton(text="üîö –ó–∞–≤–µ—Ä—à–∏—Ç—å", callback_data=f"end_consultation_{consultation.id}")]
        ])
        
        await bot.send_message(int(florist.tg_id), text, reply_markup=kb)
    except Exception as e:
        print(f"Error notifying florist: {e}")

async def _forward_message_to_florist(bot, florist_id, message, lang):
    """–ü–µ—Ä–µ—Å–ª–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Ñ–ª–æ—Ä–∏—Å—Ç—É"""
    try:
        prefix = t(lang, "consultation_message_from_client")
        
        if message.photo:
            await bot.send_photo(
                chat_id=florist_id,
                photo=message.photo[-1].file_id,
                caption=f"{prefix}\n{message.caption or ''}"
            )
        else:
            await bot.send_message(
                chat_id=florist_id,
                text=f"{prefix}\n{message.text}"
            )
    except Exception as e:
        print(f"Error forwarding message: {e}")

async def _notify_consultation_ended(bot, consultation, ended_by_user_id, session):
    """–£–≤–µ–¥–æ–º–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏"""
    try:
        await session.refresh(consultation, ['client', 'florist'])
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–º—É –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        if ended_by_user_id == consultation.client_id:
            target_user = consultation.florist
        else:
            target_user = consultation.client
        
        await bot.send_message(
            chat_id=int(target_user.tg_id),
            text="–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–º."
        )
    except Exception as e:
        print(f"Error notifying about ended consultation: {e}")

async def _clear_consultation_chat(bot, chat_id: int, state: FSMContext):
    """–ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ —á–∞—Ç–∞ –æ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        data = await state.get_data()
        header_message_id = data.get('header_message_id')
        
        # –°–Ω–∞—á–∞–ª–∞ –æ—Ç–∫—Ä–µ–ø–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        if header_message_id:
            try:
                await bot.unpin_chat_message(chat_id, header_message_id)
            except:
                pass
        
        # –£–¥–∞–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 50 —Å–æ–æ–±—â–µ–Ω–∏–π (–≤–∫–ª—é—á–∞—è –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–µ)
        latest_message = await bot.send_message(chat_id, "üßπ –û—á–∏—Å—Ç–∫–∞ —á–∞—Ç–∞...")
        start_id = latest_message.message_id
        
        for i in range(50):  # –£–¥–∞–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 50 —Å–æ–æ–±—â–µ–Ω–∏–π
            try:
                await bot.delete_message(chat_id, start_id - i)
            except:
                continue  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è
                
    except Exception as e:
        print(f"Error clearing chat: {e}")

async def _show_main_menu_after_cleanup(bot, chat_id: int, lang: str, role: str):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏ —á–∞—Ç–∞"""
    try:
        from app.handlers.start import _create_main_menu_keyboard
        kb = await _create_main_menu_keyboard(bot, lang, role)
        await bot.send_message(
            chat_id=chat_id,
            text=t(lang, 'menu_title'),
            reply_markup=kb
        )
    except Exception as e:
        print(f"Error showing menu after cleanup: {e}")