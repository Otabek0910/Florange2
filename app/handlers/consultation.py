from aiogram import Router, types, F
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.base import StorageKey
from sqlalchemy import select, and_, delete 

from app.database.database import get_session
from app.services import UserService, FloristService, ConsultationService
from app.models import (
    RoleEnum, ConsultationStatusEnum, Consultation, 
    ConsultationMessage, ConsultationBuffer, FloristReview
)
from app.translate import t
from app.exceptions import ValidationError, UserNotFoundError
import logging
from datetime import datetime, timedelta
import os
from app.config import settings

# ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –∏–º–ø–æ—Ä—Ç –∞—Ä—Ö–∏–≤–Ω–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞
try:
    from app.services.ai_archive_service import AIArchiveService
except ImportError:
    # –ï—Å–ª–∏ —Å–µ—Ä–≤–∏—Å –Ω–µ –≥–æ—Ç–æ–≤, —Å–æ–∑–¥–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
    class AIArchiveService:
        def __init__(self, bot):
            self.bot = bot
        async def archive_consultation_to_channel(self, consultation_id):
            return None
        async def restore_consultation_from_archive(self, chat_id, archive_id):
            return False

ARCHIVE_CHANNEL_ID = os.getenv("ARCHIVE_CHANNEL_ID")

router = Router()

class ConsultationStates(StatesGroup):
    WAITING_RESPONSE = State()    # –û–∂–∏–¥–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ —Ñ–ª–æ—Ä–∏—Å—Ç–∞
    CHATTING = State()           # –ê–∫—Ç–∏–≤–Ω–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è 
    RATING = State()             # –û—Ü–µ–Ω–∫–∞ —Ñ–ª–æ—Ä–∏—Å—Ç–∞

# ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –î–æ–±–∞–≤–ª–µ–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–ª—é—á–∞ –∏–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏
def generate_request_key(client_id: int, florist_id: int) -> str:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–ª—é—á –∏–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏"""
    timestamp = int(datetime.utcnow().timestamp() // 60)  # –û–∫—Ä—É–≥–ª—è–µ–º –¥–æ –º–∏–Ω—É—Ç
    return f"consult_{client_id}_{florist_id}_{timestamp}"

async def _get_user_and_lang(session, tg_id: int):
    """–ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —è–∑—ã–∫"""
    user_service = UserService(session)
    try:
        user = await user_service.get_user_by_tg_id(str(tg_id))
        return user, user.lang or "ru"
    except UserNotFoundError:
        return None, "ru"

@router.callback_query(F.data == "consultation_start")
async def start_consultation_flow(callback: types.CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –≤—ã–±–æ—Ä–∞ —Ñ–ª–æ—Ä–∏—Å—Ç–∞"""
    await _show_florists_page(callback, state, page=0)

@router.callback_query(F.data.startswith("florists_page_"))
async def show_florists_page(callback: types.CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ñ–ª–æ—Ä–∏—Å—Ç–æ–≤"""
    page = int(callback.data.split("_")[2])
    await _show_florists_page(callback, state, page)

async def _show_florists_page(callback: types.CallbackQuery, state: FSMContext, page: int = 0):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å —Ñ–ª–æ—Ä–∏—Å—Ç–∞–º–∏"""
    async for session in get_session():
        user, lang = await _get_user_and_lang(session, callback.from_user.id)
        
        if not user or user.role != RoleEnum.client:
            await callback.answer(t(lang, "access_denied"), show_alert=True)
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ—Ç –ª–∏ –∞–∫—Ç–∏–≤–Ω–æ–π –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏
        consultation_service = ConsultationService(session)
        active = await consultation_service.get_active_consultation(user.id)
        
        if active:
            await callback.message.edit_text(
                t(lang, "consultation_busy"),
                reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[
                    [types.InlineKeyboardButton(text=t(lang, "end_consultation"), callback_data=f"end_consultation_{active.id}")],
                    [types.InlineKeyboardButton(text=t(lang, "back_to_menu"), callback_data="main_menu")]
                ])
            )
            await callback.answer()
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ñ–ª–æ—Ä–∏—Å—Ç–æ–≤
        florist_service = FloristService(session)
        all_florists = await florist_service.get_available_florists()
        
        if not all_florists:
            kb = types.InlineKeyboardMarkup(inline_keyboard=[
                [types.InlineKeyboardButton(text=t(lang, "back_to_menu"), callback_data="main_menu")]
            ])
            await callback.message.edit_text(t(lang, "no_florists_available"), reply_markup=kb)
            await callback.answer()
            return
        
        # –ü–∞–≥–∏–Ω–∞—Ü–∏—è: –ø–æ 3 —Ñ–ª–æ—Ä–∏—Å—Ç–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
        per_page = 3
        total_pages = (len(all_florists) + per_page - 1) // per_page
        start_idx = page * per_page
        end_idx = start_idx + per_page
        florists_on_page = all_florists[start_idx:end_idx]
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ —Ñ–ª–æ—Ä–∏—Å—Ç–æ–≤
        kb_rows = []
        text_lines = [f"{t(lang, 'choose_florist')} (—Å—Ç—Ä. {page + 1}/{total_pages})", ""]
        
        for florist_data in florists_on_page:
            profile = florist_data['profile']
            user_obj = florist_data['user']
            status_text = florist_data['status_text']
            rating_text = florist_data['rating_text']
            is_online = florist_data['is_online']
            
            # –ö—Ä–∞—Å–∏–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
            specialization = profile.specialization or "–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Ñ–ª–æ—Ä–∏—Å—Ç"
            
            # –≠–º–æ–¥–∑–∏ —Å—Ç–∞—Ç—É—Å–∞
            status_emoji = "üü¢" if is_online else "üü°"
            
            # –ö–Ω–æ–ø–∫–∞: "üå∏ –ò–º—è ‚≠ê4.2 üü¢"
            button_text = f"üå∏ {user_obj.first_name} {rating_text} {status_emoji}"
            
            kb_rows.append([types.InlineKeyboardButton(
                text=button_text,
                callback_data=f"select_florist_{user_obj.id}"
            )])
            
            # –î–µ—Ç–∞–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≤ —Ç–µ–∫—Å—Ç–µ
            text_lines.append(
                f"üå∏ <b>{user_obj.first_name}</b> {rating_text}\n"
                f"üìç {specialization}\n"
                f"{status_emoji} {status_text}\n"
            )
        
        # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        nav_row = []
        if page > 0:
            nav_row.append(types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"florists_page_{page-1}"))
        if page < total_pages - 1:
            nav_row.append(types.InlineKeyboardButton(text="–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è", callback_data=f"florists_page_{page+1}"))
        
        if nav_row:
            kb_rows.append(nav_row)
        
        kb_rows.append([types.InlineKeyboardButton(text=t(lang, "back_to_menu"), callback_data="main_menu")])
        kb = types.InlineKeyboardMarkup(inline_keyboard=kb_rows)
        text = "\n".join(text_lines)
        
        await callback.message.edit_text(text, reply_markup=kb, parse_mode="HTML")
        await callback.answer()

@router.callback_query(F.data.startswith("select_florist_"))
async def select_florist(callback: types.CallbackQuery, state: FSMContext):
    """‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –≤—ã–±–æ—Ä —Ñ–ª–æ—Ä–∏—Å—Ç–∞ —Å –∏–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å—é"""
    florist_id = int(callback.data.split("_")[2])
    
    async for session in get_session():
        user, lang = await _get_user_and_lang(session, callback.from_user.id)
        
        if not user:
            await callback.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        consultation_service = ConsultationService(session)
        
        try:
            # ‚úÖ –û–ß–ò–©–ê–ï–ú –ª—é–±—ã–µ —Å—Ç–∞—Ä—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            await state.clear()
            
            # ‚úÖ –ó–ê–ö–†–´–í–ê–ï–ú –ª—é–±—ã–µ —Å—Ç–∞—Ä—ã–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ —ç—Ç–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
            old_consultations = await session.execute(
                select(Consultation).where(
                    and_(
                        Consultation.client_id == user.id,
                        Consultation.status.in_(['pending', 'active'])
                    )
                )
            )
            for old_consult in old_consultations.scalars():
                old_consult.status = ConsultationStatusEnum.expired
                old_consult.completed_at = datetime.utcnow()
            
            await session.commit()
            
            # ‚úÖ –°–û–ó–î–ê–ï–ú –Ω–æ–≤—É—é –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é —Å –∏–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å—é
            request_key = generate_request_key(user.id, florist_id)
            consultation = await consultation_service.request_consultation_idempotent(
                user.id, florist_id, request_key
            )
            await session.commit()
            
            # ‚úÖ –£–í–ï–î–û–ú–õ–Ø–ï–ú –§–õ–û–†–ò–°–¢–ê
            await session.refresh(consultation, ['florist'])
            florist_name = consultation.florist.first_name or "–§–ª–æ—Ä–∏—Å—Ç"
            
            try:
                await callback.bot.send_message(
                    int(consultation.florist.tg_id),
                    f"üå∏ –ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é!\n\n"
                    f"üë§ –ö–ª–∏–µ–Ω—Ç: {user.first_name}\n"
                    f"üì± –ó–∞–ø—Ä–æ—Å #{consultation.id}\n\n"
                    f"üí° –ü—Ä–∏–º–∏—Ç–µ –∑–∞–ø—Ä–æ—Å —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é",
                    reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[
                        [types.InlineKeyboardButton(text="‚úÖ –ü—Ä–∏–Ω—è—Ç—å", callback_data=f"accept_consultation_{consultation.id}")],
                        [types.InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"decline_consultation_{consultation.id}")],
                        [types.InlineKeyboardButton(text="üìû –ù–æ–º–µ—Ä –∫–ª–∏–µ–Ω—Ç–∞", callback_data=f"call_client_{consultation.id}")]
                    ])
                )
            except Exception as e:
                print(f"‚ùå Error notifying florist: {e}")
            
            # ‚úÖ –°–û–û–ë–©–ï–ù–ò–ï –ö–õ–ò–ï–ù–¢–£ –° –ü–†–ê–í–ò–õ–¨–ù–´–ú–ò –ö–ù–û–ü–ö–ê–ú–ò
            client_message = await callback.message.edit_text(
                f"‚è≥ –û–∂–∏–¥–∞–µ–º –æ—Ç–≤–µ—Ç–∞ —Ñ–ª–æ—Ä–∏—Å—Ç–∞ {florist_name}\n\n"
                f"üí¨ –ú–æ–∂–µ—Ç–µ –ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è ‚Äî —Ñ–ª–æ—Ä–∏—Å—Ç –ø–æ–ª—É—á–∏—Ç –∏—Ö –ø–æ—Å–ª–µ –ø—Ä–∏–Ω—è—Ç–∏—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏\n\n"
                f"üïï –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è: 15 –º–∏–Ω—É—Ç",
                reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[
                    [types.InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å", callback_data=f"cancel_consultation_{consultation.id}")],
                    [types.InlineKeyboardButton(text="üìû –ù–æ–º–µ—Ä —Ñ–ª–æ—Ä–∏—Å—Ç–∞", callback_data=f"call_florist_{consultation.id}")],
                    [types.InlineKeyboardButton(text="üè† –í –º–µ–Ω—é", callback_data="main_menu")]
                ])
            )
            
            # ‚úÖ –ó–ê–ö–†–ï–ü–õ–Ø–ï–ú —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º ID
            try:
                await callback.bot.unpin_all_chat_messages(callback.message.chat.id)
            except Exception:
                pass

            try:
                await callback.bot.pin_chat_message(callback.message.chat.id, client_message.message_id, disable_notification=True)
            except Exception:
                pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏—è

            # ‚úÖ –ü–ï–†–ï–í–û–î–ò–ú –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è
            await state.set_state(ConsultationStates.WAITING_RESPONSE)
            await state.update_data(
                consultation_id=consultation.id, 
                header_message_id=client_message.message_id,
                florist_name=florist_name
            )
            
            await callback.answer()
            
        except ValidationError as e:
            await callback.answer(str(e), show_alert=True)
        except Exception as e:
            print(f"Select florist error: {e}")
            await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)

@router.message(ConsultationStates.CHATTING)
async def handle_consultation_message(message: types.Message, state: FSMContext):
    """‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –∞–∫—Ç–∏–≤–Ω–æ–π –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏"""
    data = await state.get_data()
    consultation_id = data.get('consultation_id')
    
    if not consultation_id:
        await message.answer("‚ùå –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        await state.clear()
        return
    
    async for session in get_session():
        user, lang = await _get_user_and_lang(session, message.from_user.id)
        
        try:
            consultation = await session.get(Consultation, consultation_id)
            
            if not consultation or consultation.status != ConsultationStatusEnum.active:
                await message.answer("‚ùå –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞")
                await state.clear()
                return
            
            await session.refresh(consultation, ['client', 'florist'])
            
            # ‚úÖ –û–ü–†–ï–î–ï–õ–Ø–ï–ú –ø–æ–ª—É—á–∞—Ç–µ–ª—è
            if user.id == consultation.client_id:
                recipient_tg_id = consultation.florist.tg_id
                sender_name = consultation.client.first_name
            elif user.id == consultation.florist_id:
                recipient_tg_id = consultation.client.tg_id
                sender_name = consultation.florist.first_name
            else:
                await message.answer("‚ùå –í—ã –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ —ç—Ç–æ–π –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏")
                return
            
            # ‚úÖ –°–û–•–†–ê–ù–Ø–ï–ú —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ë–î
            consultation_msg = ConsultationMessage(
                consultation_id=consultation_id,
                sender_id=user.id,
                message_text=message.text or "",
                photo_file_id=message.photo[-1].file_id if message.photo else None
            )
            session.add(consultation_msg)
            await session.commit()
            
            # ‚úÖ –ü–ï–†–ï–°–´–õ–ê–ï–ú —Å–æ–æ–±—â–µ–Ω–∏–µ
            try:
                if message.photo:
                    await message.bot.send_photo(
                        chat_id=int(recipient_tg_id),
                        photo=message.photo[-1].file_id,
                        caption=f"üí¨ {sender_name}: {message.caption or ''}"
                    )
                else:
                    await message.bot.send_message(
                        chat_id=int(recipient_tg_id),
                        text=f"üí¨ {sender_name}: {message.text}"
                    )
            except Exception as e:
                print(f"Error forwarding message: {e}")
                await message.answer("‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è")
                
        except Exception as e:
            print(f"Consultation message error: {e}")
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è")

@router.callback_query(F.data.startswith("end_consultation_"))
async def end_consultation(callback: types.CallbackQuery, state: FSMContext):
    """‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ï –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ —Å –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
    consultation_id = int(callback.data.split("_")[2])
    
    async for session in get_session():
        user, lang = await _get_user_and_lang(session, callback.from_user.id)
        
        try:
            consultation = await session.get(Consultation, consultation_id)
            if not consultation:
                await callback.answer("‚ùå –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
                return
            
            await session.refresh(consultation, ['client', 'florist'])
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
            if user.id not in [consultation.client_id, consultation.florist_id]:
                await callback.answer("‚ùå –í—ã –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ —ç—Ç–æ–π –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏", show_alert=True)
                return
            
            # –ó–∞–≤–µ—Ä—à–∞–µ–º –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é
            consultation.status = ConsultationStatusEnum.completed
            consultation.completed_at = datetime.utcnow()
            await session.commit()
            
            # ‚úÖ –ê–†–•–ò–í–ò–†–£–ï–ú –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é
            try:
                ai_service = AIArchiveService(callback.bot)
                archive_id = await ai_service.archive_consultation_to_channel(consultation.id)
                
                if archive_id:
                    consultation.archive_id = archive_id
                    await session.commit()
                    print(f"‚úÖ Consultation {consultation.id} archived with ID: {archive_id}")
                else:
                    print(f"‚ùå Failed to archive consultation {consultation.id}")
            except Exception as e:
                print(f"Archive error: {e}")

            # ‚úÖ –û–ß–ò–©–ê–ï–ú —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            await state.clear()
            
            # ‚úÖ –ö–†–ê–°–ò–í–û–ï –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –¥–ª—è –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä–∞
            if user.id == consultation.client_id:
                await callback.message.edit_text(
                    "‚úÖ –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞\n\n"
                    "üå∏ –°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ –≤ Florange!\n"
                    "üëç –ë—É–¥–µ–º —Ä–∞–¥—ã –≤–∏–¥–µ—Ç—å –≤–∞—Å —Å–Ω–æ–≤–∞",
                    reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[
                        [types.InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")],
                        [types.InlineKeyboardButton(text="üîç –ù–æ–≤–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è", callback_data="consultation_start")]
                    ])
                )
                
                # –£–≤–µ–¥–æ–º–ª—è–µ–º —Ñ–ª–æ—Ä–∏—Å—Ç–∞
                try:
                    await callback.bot.send_message(
                        int(consultation.florist.tg_id),
                        f"‚ÑπÔ∏è –ö–ª–∏–µ–Ω—Ç {consultation.client.first_name} –∑–∞–≤–µ—Ä—à–∏–ª –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é.\n"
                        f"‚úÖ –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è #{consultation_id} –∑–∞–∫—Ä—ã—Ç–∞."
                    )
                except Exception:
                    pass
                    
            else:
                await callback.message.edit_text(
                    "‚úÖ –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞\n\n"
                    "üëç –•–æ—Ä–æ—à–µ–π —Ä–∞–±–æ—Ç—ã!",
                    reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[
                        [types.InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
                    ])
                )
                
                # –£–≤–µ–¥–æ–º–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞
                try:
                    await callback.bot.send_message(
                        int(consultation.client.tg_id),
                        f"‚úÖ –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞\n\n"
                        f"üå∏ –§–ª–æ—Ä–∏—Å—Ç {consultation.florist.first_name} –∑–∞–≤–µ—Ä—à–∏–ª –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é.\n"
                        f"üëç –°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ –≤ Florange!",
                        reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[
                            [types.InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")],
                            [types.InlineKeyboardButton(text="üîç –ù–æ–≤–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è", callback_data="consultation_start")]
                        ])
                    )
                except Exception:
                    pass
            
            await callback.answer("–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
            
        except Exception as e:
            print(f"End consultation error: {e}")
            await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)

@router.message(ConsultationStates.WAITING_RESPONSE)
async def handle_waiting_messages(message: types.Message, state: FSMContext):
    """‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –æ–∂–∏–¥–∞–Ω–∏–∏"""
    data = await state.get_data()
    consultation_id = data.get('consultation_id')
    
    if not consultation_id:
        await message.answer("‚ùå –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        await state.clear()
        return
    
    async for session in get_session():
        user, lang = await _get_user_and_lang(session, message.from_user.id)
        
        try:
            consultation = await session.get(Consultation, consultation_id)
            
            if not consultation:
                await message.answer("‚ùå –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                await state.clear()
                return
            
            # ‚úÖ –ü–†–û–í–ï–†–Ø–ï–ú —Å—Ç–∞—Ç—É—Å –∏ –ø–µ—Ä–µ–≤–æ–¥–∏–º –≤ –∞–∫—Ç–∏–≤–Ω—ã–π —á–∞—Ç –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            if consultation.status == ConsultationStatusEnum.active:
                # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—â–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ WAITING_RESPONSE, –ø–µ—Ä–µ–≤–æ–¥–∏–º –≤ CHATTING
                current_state = await state.get_state()
                if current_state == ConsultationStates.WAITING_RESPONSE.state:
                    await state.set_state(ConsultationStates.CHATTING)
                    await state.update_data(consultation_id=consultation_id)
                    await handle_consultation_message(message, state)
                    return
            
            if consultation.status != ConsultationStatusEnum.pending:
                await message.answer("‚ùå –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –±–æ–ª—å—à–µ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞")
                await state.clear()
                return
            
            # ‚úÖ –°–û–•–†–ê–ù–Ø–ï–ú —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –±—É—Ñ–µ—Ä
            buffer_msg = ConsultationBuffer(
                consultation_id=consultation_id,
                sender_id=user.id,
                message_text=message.text or "",
                photo_file_id=message.photo[-1].file_id if message.photo else None
            )
            session.add(buffer_msg)
            await session.commit()
            
            # ‚úÖ –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–ï —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            await message.answer("üìù –°–æ–æ–±—â–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ. –§–ª–æ—Ä–∏—Å—Ç –ø–æ–ª—É—á–∏—Ç –µ–≥–æ –ø–æ—Å–ª–µ –ø—Ä–∏–Ω—è—Ç–∏—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏.")
            
        except Exception as e:
            print(f"Waiting message error: {e}")
            await message.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è")

@router.callback_query(F.data.startswith("accept_consultation_"))
async def accept_consultation_handler(callback: types.CallbackQuery):
    """‚úÖ –ü–†–ò–ù–Ø–¢–ò–ï –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ —Ñ–ª–æ—Ä–∏—Å—Ç–æ–º"""
    consultation_id = int(callback.data.split("_")[2])
    
    async for session in get_session():
        user, lang = await _get_user_and_lang(session, callback.from_user.id)
        consultation_service = ConsultationService(session)
        
        try:
            # –ü—Ä–∏–Ω–∏–º–∞–µ–º –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é
            consultation = await consultation_service.accept_consultation(consultation_id, user.id)
            await session.commit()
            
            await session.refresh(consultation, ['client', 'florist'])
            
            # ‚úÖ –î–û–°–¢–ê–í–õ–Ø–ï–ú –±—É—Ñ–µ—Ä–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –§–õ–û–†–ò–°–¢–£
            await _deliver_buffered_messages_to_florist(callback.bot, consultation_id, session)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Ñ–ª–æ—Ä–∏—Å—Ç–∞
            await callback.message.edit_text(
                f"‚úÖ –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è —Å {consultation.client.first_name} –Ω–∞—á–∞—Ç–∞!\n\n"
                f"üí¨ –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –æ–±—â–∞—Ç—å—Å—è –Ω–∞–ø—Ä—è–º—É—é",
                reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[
                    [types.InlineKeyboardButton(text="üìö –ó–∞–≤–µ—Ä—à–∏—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é", callback_data=f"end_consultation_{consultation_id}")],
                    [types.InlineKeyboardButton(text="üìû –ù–æ–º–µ—Ä –∫–ª–∏–µ–Ω—Ç–∞", callback_data=f"call_client_{consultation_id}")]
                ])
            )
            
            # ‚úÖ –£–í–ï–î–û–ú–õ–Ø–ï–ú –∫–ª–∏–µ–Ω—Ç–∞ –ò –û–ë–ù–û–í–õ–Ø–ï–ú –ï–ì–û –ò–ù–¢–ï–†–§–ï–ô–°
            try:
                client_chat_id = int(consultation.client.tg_id)
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É
                new_message = await callback.bot.send_message(
                    chat_id=client_chat_id,
                    text=f"‚úÖ –§–ª–æ—Ä–∏—Å—Ç {consultation.florist.first_name} –ø—Ä–∏–Ω—è–ª –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é!\n\n"
                         f"üí¨ –¢–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç–µ –æ–±—â–∞—Ç—å—Å—è –Ω–∞–ø—Ä—è–º—É—é",
                    reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[
                        [types.InlineKeyboardButton(text="üìö –ó–∞–≤–µ—Ä—à–∏—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é", callback_data=f"end_consultation_{consultation_id}")],
                        [types.InlineKeyboardButton(text="üìû –ù–æ–º–µ—Ä —Ñ–ª–æ—Ä–∏—Å—Ç–∞", callback_data=f"call_florist_{consultation_id}")]
                    ])
                )
                
                # –ó–∞–∫—Ä–µ–ø–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                try:
                    await callback.bot.pin_chat_message(client_chat_id, new_message.message_id, disable_notification=True)
                except Exception:
                    pass
                
            except Exception as e:
                print(f"Error updating client interface: {e}")
            
            await callback.answer("–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –ø—Ä–∏–Ω—è—Ç–∞!")
            
        except ValidationError as e:
            await callback.answer(str(e), show_alert=True)
        except Exception as e:
            print(f"Accept consultation error: {e}")
            await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)

async def _deliver_buffered_messages_to_florist(bot, consultation_id: int, session):
    """‚úÖ –ü–†–ê–í–ò–õ–¨–ù–ê–Ø –¥–æ—Å—Ç–∞–≤–∫–∞ –±—É—Ñ–µ—Ä–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Ñ–ª–æ—Ä–∏—Å—Ç—É"""
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é –¥–ª—è —Ñ–ª–æ—Ä–∏—Å—Ç–∞
    consultation = await session.get(Consultation, consultation_id)
    if not consultation:
        return
        
    await session.refresh(consultation, ['client', 'florist'])
    
    # –ü–æ–ª—É—á–∞–µ–º –±—É—Ñ–µ—Ä–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    buffer_query = select(ConsultationBuffer).where(
        ConsultationBuffer.consultation_id == consultation_id
    ).order_by(ConsultationBuffer.created_at)
    
    result = await session.execute(buffer_query)
    buffered_messages = result.scalars().all()
    
    if not buffered_messages:
        return
    
    print(f"üì¨ Delivering {len(buffered_messages)} buffered messages to florist")
    
    # ‚úÖ –î–û–°–¢–ê–í–õ–Ø–ï–ú –∫–∞–∂–¥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ñ–ª–æ—Ä–∏—Å—Ç—É
    try:
        for msg in buffered_messages:
            await session.refresh(msg, ['sender'])
            sender_name = msg.sender.first_name or "–ö–ª–∏–µ–Ω—Ç"
            
            if msg.photo_file_id:
                await bot.send_photo(
                    chat_id=int(consultation.florist.tg_id),
                    photo=msg.photo_file_id,
                    caption=f"üìù {sender_name} (–∏–∑ –±—É—Ñ–µ—Ä–∞): {msg.message_text or ''}"
                )
            else:
                await bot.send_message(
                    chat_id=int(consultation.florist.tg_id),
                    text=f"üìù {sender_name} (–∏–∑ –±—É—Ñ–µ—Ä–∞): {msg.message_text}"
                )
    
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        if len(buffered_messages) > 0:
            await bot.send_message(
                chat_id=int(consultation.florist.tg_id),
                text=f"üì¨ –î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ {len(buffered_messages)} —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –±—É—Ñ–µ—Ä–∞"
            )
    
    except Exception as e:
        print(f"Error delivering buffered messages: {e}")
    
    # –£–¥–∞–ª—è–µ–º –±—É—Ñ–µ—Ä–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    await session.execute(
        delete(ConsultationBuffer)
        .where(ConsultationBuffer.consultation_id == consultation_id)
    )
    
    print(f"üóëÔ∏è Cleared {len(buffered_messages)} buffered messages from buffer")

@router.callback_query(F.data.startswith("decline_consultation_"))
async def decline_consultation_handler(callback: types.CallbackQuery):
    """‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ï –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ —Ñ–ª–æ—Ä–∏—Å—Ç–æ–º"""
    consultation_id = int(callback.data.split("_")[2])
    
    async for session in get_session():
        user, lang = await _get_user_and_lang(session, callback.from_user.id)
        consultation_service = ConsultationService(session)
        
        try:
            consultation = await consultation_service.decline_consultation(consultation_id, user.id)
            await session.commit()
            
            await session.refresh(consultation, ['client', 'florist'])
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Ñ–ª–æ—Ä–∏—Å—Ç–∞
            await callback.message.edit_text(
                "‚ùå –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞\n\n"
                "‚ÑπÔ∏è –ö–ª–∏–µ–Ω—Ç –±—É–¥–µ—Ç —É–≤–µ–¥–æ–º–ª—ë–Ω",
                reply_markup=None
            )
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞
            try:
                await callback.bot.send_message(
                    chat_id=int(consultation.client.tg_id),
                    text=f"üòî –§–ª–æ—Ä–∏—Å—Ç {consultation.florist.first_name} –Ω–µ –º–æ–∂–µ—Ç –ø—Ä–∏–Ω—è—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é\n\n"
                         f"üå∏ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–≥–æ —Ñ–ª–æ—Ä–∏—Å—Ç–∞",
                    reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[
                        [types.InlineKeyboardButton(text="üîç –í—ã–±—Ä–∞—Ç—å —Ñ–ª–æ—Ä–∏—Å—Ç–∞", callback_data="consultation_start")],
                        [types.InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
                    ])
                )
            except Exception as e:
                print(f"Error notifying client about decline: {e}")
            
            await callback.answer("–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞")
            
        except ValidationError as e:
            await callback.answer(str(e), show_alert=True)
        except Exception as e:
            print(f"Decline consultation error: {e}")
            await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)

@router.callback_query(F.data.startswith("cancel_consultation_"))
async def cancel_consultation_request(callback: types.CallbackQuery, state: FSMContext):
    """‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –æ—Ç–º–µ–Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏"""
    consultation_id = int(callback.data.split("_")[2])
    
    async for session in get_session():
        user, lang = await _get_user_and_lang(session, callback.from_user.id)
        
        try:
            consultation = await session.get(Consultation, consultation_id)
            
            if not consultation or consultation.client_id != user.id:
                await callback.answer("–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
                return
            
            # –û—Ç–º–µ–Ω—è–µ–º –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é
            consultation.status = ConsultationStatusEnum.expired
            consultation.completed_at = datetime.utcnow()
            await session.commit()
            
            # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            await state.clear()
            
            await callback.message.edit_text(
                "‚ùå –ó–∞–ø—Ä–æ—Å –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é –æ—Ç–º–µ–Ω—ë–Ω\n\n"
                "üå∏ –û–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ –Ω–∞–º –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è!",
                reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[
                    [types.InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")],
                    [types.InlineKeyboardButton(text="üîç –ù–æ–≤–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è", callback_data="consultation_start")]
                ])
            )
            await callback.answer("–ó–∞–ø—Ä–æ—Å –æ—Ç–º–µ–Ω—ë–Ω")
            
        except Exception as e:
            print(f"Cancel consultation error: {e}")
            await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)

@router.callback_query(F.data.startswith("call_florist_"))
async def call_florist(callback: types.CallbackQuery):
    """‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –∑–∞–ø—Ä–æ—Å –Ω–æ–º–µ—Ä–∞ —Ñ–ª–æ—Ä–∏—Å—Ç–∞"""
    consultation_id = int(callback.data.split("_")[2])
    
    async for session in get_session():
        consultation = await session.get(Consultation, consultation_id)
        if not consultation:
            await callback.answer("–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            return
            
        await session.refresh(consultation, ['florist'])
        florist_phone = consultation.florist.phone or "–ù–µ —É–∫–∞–∑–∞–Ω"
        
        await callback.bot.send_message(
            callback.from_user.id,
            f"üìû –ù–æ–º–µ—Ä —Ñ–ª–æ—Ä–∏—Å—Ç–∞ {consultation.florist.first_name}:\n\n"
            f"`{florist_phone}`\n\n"
            f"üí° –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –Ω–æ–º–µ—Ä —á—Ç–æ–±—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å",
            parse_mode="Markdown"
        )
        await callback.answer("–ù–æ–º–µ—Ä –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")

@router.callback_query(F.data.startswith("call_client_"))
async def call_client(callback: types.CallbackQuery):
    """‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –∑–∞–ø—Ä–æ—Å –Ω–æ–º–µ—Ä–∞ –∫–ª–∏–µ–Ω—Ç–∞"""
    consultation_id = int(callback.data.split("_")[2])
    
    async for session in get_session():
        consultation = await session.get(Consultation, consultation_id)
        if not consultation:
            await callback.answer("–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            return
            
        await session.refresh(consultation, ['client'])
        client_phone = consultation.client.phone or "–ù–µ —É–∫–∞–∑–∞–Ω"
        
        await callback.bot.send_message(
            callback.from_user.id,
            f"üìû –ù–æ–º–µ—Ä –∫–ª–∏–µ–Ω—Ç–∞ {consultation.client.first_name}:\n\n"
            f"`{client_phone}`\n\n"
            f"üí° –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –Ω–æ–º–µ—Ä —á—Ç–æ–±—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å",
            parse_mode="Markdown"
        )
        await callback.answer("–ù–æ–º–µ—Ä –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")

@router.callback_query(F.data == "consultation_history")
async def show_consultation_history(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π"""
    async for session in get_session():
        user, lang = await _get_user_and_lang(session, callback.from_user.id)
        
        if not user:
            await callback.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        result = await session.execute(
            select(Consultation)
            .where(
                ((Consultation.client_id == user.id) | (Consultation.florist_id == user.id)) &
                (Consultation.status != ConsultationStatusEnum.active)
            )
            .order_by(Consultation.completed_at.desc())
            .limit(10)
        )
        consultations = result.scalars().all()
        
        if not consultations:
            kb = types.InlineKeyboardMarkup(inline_keyboard=[
                [types.InlineKeyboardButton(text=t(lang, "back_to_menu"), callback_data="main_menu")]
            ])
            await callback.message.edit_text(t(lang, "no_consultation_history"), reply_markup=kb)
            await callback.answer()
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π
        kb_rows = []
        text_lines = [t(lang, "history_consultations"), ""]
        
        for consultation in consultations:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            await session.refresh(consultation, ['client', 'florist'])
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å –∫–µ–º –±—ã–ª–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è
            if consultation.client_id == user.id:
                partner_name = consultation.florist.first_name or "–§–ª–æ—Ä–∏—Å—Ç"
                partner_emoji = "üå∏"
            else:
                partner_name = consultation.client.first_name or "–ö–ª–∏–µ–Ω—Ç"
                partner_emoji = "üë§"
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É
            date_str = consultation.started_at.strftime("%d.%m.%Y")
            theme = consultation.theme or "–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫
            text_lines.append(
                f"üìÖ {date_str} | {partner_emoji} {partner_name}\n"
                f"üí¨ {theme}\n"
            )
            
            # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
            kb_rows.append([types.InlineKeyboardButton(
                text=f"{date_str} - {partner_name}: {theme[:20]}...",
                callback_data=f"view_consultation_{consultation.id}"
            )])
        
        kb_rows.append([types.InlineKeyboardButton(text=t(lang, "back_to_menu"), callback_data="main_menu")])
        kb = types.InlineKeyboardMarkup(inline_keyboard=kb_rows)
        
        text = "\n".join(text_lines)
        await callback.message.edit_text(text, reply_markup=kb, parse_mode="HTML")
        await callback.answer()

@router.callback_query(F.data.startswith("view_consultation_"))
async def view_consultation_archive(callback: types.CallbackQuery):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –∞—Ä—Ö–∏–≤–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏"""
    consultation_id = int(callback.data.split("_")[2])
    
    async for session in get_session():
        user, lang = await _get_user_and_lang(session, callback.from_user.id)
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é
        result = await session.execute(
            select(Consultation).where(Consultation.id == consultation_id)
        )
        consultation = result.scalars().first()
        
        if not consultation:
            await callback.answer("–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
        if consultation.client_id != user.id and consultation.florist_id != user.id:
            await callback.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏", show_alert=True)
            return
        
        # –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ - –≤ –±—É–¥—É—â–µ–º –∏–∑ –∞—Ä—Ö–∏–≤–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞
        if consultation.archive_id:
            try:
                ai_service = AIArchiveService(callback.bot)
                success = await ai_service.restore_consultation_from_archive(
                    callback.message.chat.id, 
                    consultation.archive_id
                )
                
                if success:
                    await callback.answer("üìñ –ê—Ä—Ö–∏–≤ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                else:
                    await callback.message.edit_text(
                        "üìù –ê—Ä—Ö–∏–≤ —ç—Ç–æ–π –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω\n"
                        "–í–æ–∑–º–æ–∂–Ω–æ, –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –±—ã–ª–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –¥–æ –≤–Ω–µ–¥—Ä–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏—è."
                    )
            except Exception as e:
                print(f"Archive restore error: {e}")
                await callback.message.edit_text(
                    "üìù –û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∞—Ä—Ö–∏–≤–∞\n"
                    "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
                )
        else:
            await callback.message.edit_text(
                "üìù –ê—Ä—Ö–∏–≤ —ç—Ç–æ–π –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω\n"
                "–í–æ–∑–º–æ–∂–Ω–æ, –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –±—ã–ª–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –¥–æ –≤–Ω–µ–¥—Ä–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏—è."
            )
        
        await callback.answer()

@router.callback_query(F.data.startswith("rate_florist_"))
async def rate_florist(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ü–µ–Ω–∫–∏ —Ñ–ª–æ—Ä–∏—Å—Ç–∞ –∫–ª–∏–µ–Ω—Ç–æ–º"""
    parts = callback.data.split("_")
    consultation_id = int(parts[2])
    rating = int(parts[3])  # 1-5 –∑–≤—ë–∑–¥
    
    async for session in get_session():
        user, lang = await _get_user_and_lang(session, callback.from_user.id)
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é —Å —Ñ–ª–æ—Ä–∏—Å—Ç–æ–º
            consultation = await session.get(Consultation, consultation_id)
            if not consultation:
                await callback.answer("‚ùå –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
                return
            
            await session.refresh(consultation, ['client', 'florist'])
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –∫–ª–∏–µ–Ω—Ç –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏
            if user.id != consultation.client_id:
                await callback.answer("‚ùå –¢–æ–ª—å–∫–æ –∫–ª–∏–µ–Ω—Ç –º–æ–∂–µ—Ç –æ—Ü–µ–Ω–∏—Ç—å —Ñ–ª–æ—Ä–∏—Å—Ç–∞", show_alert=True)
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ—Ç –ª–∏ —É–∂–µ –æ—Ü–µ–Ω–∫–∏
            existing_review = await session.execute(
                select(FloristReview).where(FloristReview.consultation_id == consultation_id)
            )
            
            if existing_review.scalar_one_or_none():
                await callback.answer("‚ùå –û—Ü–µ–Ω–∫–∞ —É–∂–µ –æ—Å—Ç–∞–≤–ª–µ–Ω–∞", show_alert=True)
                return
            
            # –°–æ–∑–¥–∞—ë–º –æ—Ü–µ–Ω–∫—É
            review = FloristReview(
                consultation_id=consultation_id,
                client_id=user.id,
                florist_id=consultation.florist_id,
                rating=rating,
                created_at=datetime.utcnow()
            )
            session.add(review)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â–∏–π —Ä–µ–π—Ç–∏–Ω–≥ —Ñ–ª–æ—Ä–∏—Å—Ç–∞
            await _update_florist_rating(session, consultation.florist_id)
            
            await session.commit()
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å
            stars = "‚≠ê" * rating
            await callback.message.edit_text(
                f"üåü –°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ü–µ–Ω–∫—É!\n\n"
                f"–í–∞—à–∞ –æ—Ü–µ–Ω–∫–∞ —Ñ–ª–æ—Ä–∏—Å—Ç–∞ {consultation.florist.first_name}: {stars}\n\n"
                f"–í–∞—à –æ—Ç–∑—ã–≤ –ø–æ–º–æ–∂–µ—Ç –Ω–∞–º —É–ª—É—á—à–∏—Ç—å —Å–µ—Ä–≤–∏—Å! üå∏",
                reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[
                    [types.InlineKeyboardButton(text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
                ])
            )
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º —Ñ–ª–æ—Ä–∏—Å—Ç–∞ –æ –ø–æ–ª—É—á–µ–Ω–Ω–æ–π –æ—Ü–µ–Ω–∫–µ
            try:
                await callback.bot.send_message(
                    chat_id=int(consultation.florist.tg_id),
                    text=f"üåü –í—ã –ø–æ–ª—É—á–∏–ª–∏ –æ—Ü–µ–Ω–∫—É –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞ {consultation.client.first_name}!\n\n"
                         f"–û—Ü–µ–Ω–∫–∞: {stars}\n"
                         f"–°–ø–∞—Å–∏–±–æ –∑–∞ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—É—é —Ä–∞–±–æ—Ç—É! üå∏"
                )
            except Exception as e:
                print(f"Error notifying florist about rating: {e}")
            
            # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            await state.clear()
            await callback.answer(f"‚úÖ –û—Ü–µ–Ω–∫–∞ {stars} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!")
            
        except Exception as e:
            print(f"Rating error: {e}")
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ü–µ–Ω–∫–∏", show_alert=True)

@router.callback_query(F.data.startswith("skip_rating_"))
async def skip_rating(callback: types.CallbackQuery, state: FSMContext):
    """–ü—Ä–æ–ø—É—Å–∫ –æ—Ü–µ–Ω–∫–∏ —Ñ–ª–æ—Ä–∏—Å—Ç–∞"""
    consultation_id = int(callback.data.split("_")[2])
    
    async for session in get_session():
        try:
            consultation = await session.get(Consultation, consultation_id)
            if consultation:
                await session.refresh(consultation, ['florist'])
                
                await callback.message.edit_text(
                    f"‚úÖ –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞.\n"
                    f"–°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –Ω–∞—à–µ–≥–æ —Å–µ—Ä–≤–∏—Å–∞! üå∏\n\n"
                    f"–ï—Å–ª–∏ –∑–∞—Ö–æ—Ç–∏—Ç–µ –æ—Ü–µ–Ω–∏—Ç—å —Ñ–ª–æ—Ä–∏—Å—Ç–∞ {consultation.florist.first_name} –ø–æ–∑–∂–µ, "
                    f"–æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
                    reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[
                        [types.InlineKeyboardButton(text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
                    ])
                )
            
            await state.clear()
            await callback.answer("–û—Ü–µ–Ω–∫–∞ –ø—Ä–æ–ø—É—â–µ–Ω–∞")
            
        except Exception as e:
            print(f"Skip rating error: {e}")
            await callback.answer("‚ùå –û—à–∏–±–∫–∞", show_alert=True)

# üÜï –î–û–ë–ê–í–¨–¢–ï –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è RATING (–µ—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç –ø–∏—à–µ—Ç —Ç–µ–∫—Å—Ç –≤–º–µ—Å—Ç–æ –∫–Ω–æ–ø–æ–∫)
@router.message(ConsultationStates.RATING)
async def handle_rating_state_message(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –æ—Ü–µ–Ω–∫–∏"""
    data = await state.get_data()
    consultation_id = data.get('consultation_id')
    
    if consultation_id:
        await message.answer(
            "üåü –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –≤—ã—à–µ –¥–ª—è –æ—Ü–µ–Ω–∫–∏ —Ñ–ª–æ—Ä–∏—Å—Ç–∞.\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤—ë–∑–¥ –æ—Ç 1 –¥–æ 5:",
            reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[
                [
                    types.InlineKeyboardButton(text="‚≠ê", callback_data=f"rate_florist_{consultation_id}_1"),
                    types.InlineKeyboardButton(text="‚≠ê‚≠ê", callback_data=f"rate_florist_{consultation_id}_2"),
                    types.InlineKeyboardButton(text="‚≠ê‚≠ê‚≠ê", callback_data=f"rate_florist_{consultation_id}_3")
                ],
                [
                    types.InlineKeyboardButton(text="‚≠ê‚≠ê‚≠ê‚≠ê", callback_data=f"rate_florist_{consultation_id}_4"),
                    types.InlineKeyboardButton(text="‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê", callback_data=f"rate_florist_{consultation_id}_5")
                ],
                [types.InlineKeyboardButton(text="üö´ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data=f"skip_rating_{consultation_id}")]
            ])
        )
    else:
        await state.clear()
        await message.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")

async def _update_florist_rating(session, florist_id: int):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–±—â–µ–≥–æ —Ä–µ–π—Ç–∏–Ω–≥–∞ —Ñ–ª–æ—Ä–∏—Å—Ç–∞"""
    from sqlalchemy import func
    from app.models import FloristProfile
    
    # –í—ã—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∑—ã–≤–æ–≤
    result = await session.execute(
        select(
            func.avg(FloristReview.rating).label('avg_rating'),
            func.count(FloristReview.id).label('reviews_count')
        ).where(FloristReview.florist_id == florist_id)
    )
    
    stats = result.first()
    avg_rating = float(stats.avg_rating) if stats.avg_rating else 0.0
    reviews_count = stats.reviews_count if stats.reviews_count else 0
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å —Ñ–ª–æ—Ä–∏—Å—Ç–∞
    florist_profile = await session.execute(
        select(FloristProfile).where(FloristProfile.user_id == florist_id)
    )
    profile = florist_profile.scalar_one_or_none()
    
    if profile:
        profile.rating = round(avg_rating, 2)
        profile.reviews_count = reviews_count
        profile.updated_at = datetime.utcnow()
    
    print(f"Updated florist {florist_id} rating: {avg_rating:.2f} ({reviews_count} reviews)")