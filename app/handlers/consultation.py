from aiogram import Router, types, F
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.base import StorageKey
from sqlalchemy import select

from app.database.database import get_session
from app.services import UserService, FloristService, ConsultationService
from app.models import RoleEnum, ConsultationStatusEnum, Consultation, ConsultationMessage
from app.translate import t
from app.exceptions import ValidationError, UserNotFoundError
import logging
from datetime import datetime

from aiogram.fsm.storage.base import StorageKey
import os
from app.services.consultation_service import generate_request_key
from app.config import settings

ARCHIVE_CHANNEL_ID = os.getenv("ARCHIVE_CHANNEL_ID")

router = Router()

class ConsultationStates(StatesGroup):
    WAITING_RESPONSE = State()    # üÜï –û–∂–∏–¥–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ —Ñ–ª–æ—Ä–∏—Å—Ç–∞
    CHATTING = State()           # –ê–∫—Ç–∏–≤–Ω–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è  
    RATING = State()             # –û—Ü–µ–Ω–∫–∞ —Ñ–ª–æ—Ä–∏—Å—Ç–∞

async def _get_user_and_lang(session, tg_id: int):
    """–ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —è–∑—ã–∫"""
    user_service = UserService(session)
    try:
        user = await user_service.get_user_by_tg_id(str(tg_id))
        return user, user.lang or "ru"
    except UserNotFoundError:
        return None, "ru"

@router.callback_query(F.data == "consultation_start")
async def start_consultation_flow(callback: types.CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –≤—ã–±–æ—Ä–∞ —Ñ–ª–æ—Ä–∏—Å—Ç–∞"""
    await _show_florists_page(callback, state, page=0)

@router.callback_query(F.data.startswith("florists_page_"))
async def show_florists_page(callback: types.CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ñ–ª–æ—Ä–∏—Å—Ç–æ–≤"""
    page = int(callback.data.split("_")[2])
    await _show_florists_page(callback, state, page)

async def _show_florists_page(callback: types.CallbackQuery, state: FSMContext, page: int = 0):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å —Ñ–ª–æ—Ä–∏—Å—Ç–∞–º–∏"""
    async for session in get_session():
        user, lang = await _get_user_and_lang(session, callback.from_user.id)
        
        if not user or user.role != RoleEnum.client:
            await callback.answer(t(lang, "access_denied"), show_alert=True)
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ—Ç –ª–∏ –∞–∫—Ç–∏–≤–Ω–æ–π –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏
        consultation_service = ConsultationService(session)
        active = await consultation_service.get_active_consultation(user.id)
        
        if active:
            await callback.message.edit_text(
                t(lang, "consultation_busy"),
                reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[
                    [types.InlineKeyboardButton(text=t(lang, "end_consultation"), callback_data=f"end_consultation_{active.id}")],
                    [types.InlineKeyboardButton(text=t(lang, "back_to_menu"), callback_data="main_menu")]
                ])
            )
            await callback.answer()
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ñ–ª–æ—Ä–∏—Å—Ç–æ–≤
        florist_service = FloristService(session)
        all_florists = await florist_service.get_available_florists()
        
        if not all_florists:
            kb = types.InlineKeyboardMarkup(inline_keyboard=[
                [types.InlineKeyboardButton(text=t(lang, "back_to_menu"), callback_data="main_menu")]
            ])
            await callback.message.edit_text(t(lang, "no_florists_available"), reply_markup=kb)
            await callback.answer()
            return
        
        # –ü–∞–≥–∏–Ω–∞—Ü–∏—è: –ø–æ 3 —Ñ–ª–æ—Ä–∏—Å—Ç–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
        per_page = 3
        total_pages = (len(all_florists) + per_page - 1) // per_page
        start_idx = page * per_page
        end_idx = start_idx + per_page
        florists_on_page = all_florists[start_idx:end_idx]
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ —Ñ–ª–æ—Ä–∏—Å—Ç–æ–≤
        kb_rows = []
        text_lines = [f"{t(lang, 'choose_florist')} (—Å—Ç—Ä. {page + 1}/{total_pages})", ""]
        
        for florist_data in florists_on_page:
            profile = florist_data['profile']
            user_obj = florist_data['user']
            status_text = florist_data['status_text']
            rating_text = florist_data['rating_text']
            is_online = florist_data['is_online']
            
            # –ö—Ä–∞—Å–∏–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
            specialization = profile.specialization or "–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Ñ–ª–æ—Ä–∏—Å—Ç"
            
            # –≠–º–æ–¥–∑–∏ —Å—Ç–∞—Ç—É—Å–∞
            status_emoji = "üü¢" if is_online else "üü°"
            
            # –ö–Ω–æ–ø–∫–∞: "üå∏ –ò–º—è ‚≠ê4.2 üü¢"
            button_text = f"üå∏ {user_obj.first_name} {rating_text} {status_emoji}"
            
            kb_rows.append([types.InlineKeyboardButton(
                text=button_text,
                callback_data=f"select_florist_{user_obj.id}"
            )])
            
            # –î–µ—Ç–∞–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≤ —Ç–µ–∫—Å—Ç–µ
            text_lines.append(
                f"üå∏ <b>{user_obj.first_name}</b> {rating_text}\n"
                f"üìù {specialization}\n"
                f"{status_emoji} {status_text}\n"
            )
        
        # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        nav_row = []
        if page > 0:
            nav_row.append(types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"florists_page_{page-1}"))
        if page < total_pages - 1:
            nav_row.append(types.InlineKeyboardButton(text="–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è", callback_data=f"florists_page_{page+1}"))
        
        if nav_row:
            kb_rows.append(nav_row)
        
        kb_rows.append([types.InlineKeyboardButton(text=t(lang, "back_to_menu"), callback_data="main_menu")])
        kb = types.InlineKeyboardMarkup(inline_keyboard=kb_rows)
        text = "\n".join(text_lines)
        
        await callback.message.edit_text(text, reply_markup=kb, parse_mode="HTML")
        await callback.answer()

@router.callback_query(F.data.startswith("select_florist_"))
async def select_florist(callback: types.CallbackQuery, state: FSMContext):
    """–í—ã–±–æ—Ä —Ñ–ª–æ—Ä–∏—Å—Ç–∞ –∏ –ó–ê–ü–†–û–° –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ (pending —Å—Ç–∞—Ç—É—Å)"""
    florist_id = int(callback.data.split("_")[2])
    
    async for session in get_session():
        user, lang = await _get_user_and_lang(session, callback.from_user.id)
        
        if not user:
            await callback.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        consultation_service = ConsultationService(session)
        
        try:
            # üÜï –°–û–ó–î–ê–ï–ú PENDING –ö–û–ù–°–£–õ–¨–¢–ê–¶–ò–Æ (–ù–ï –ê–ö–¢–ò–í–ù–£–Æ!)
            consultation = await consultation_service.request_consultation(user.id, florist_id)
            await session.commit()
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–º—è —Ñ–ª–æ—Ä–∏—Å—Ç–∞
            await session.refresh(consultation, ['florist'])
            florist_name = consultation.florist.first_name or "–§–ª–æ—Ä–∏—Å—Ç"
            
            # üÜï –ù–û–í–û–ï –°–û–û–ë–©–ï–ù–ò–ï –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ - –æ–∂–∏–¥–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞
            header_text = (
                f"‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ —Ñ–ª–æ—Ä–∏—Å—Ç–∞ {florist_name}\n\n"
                f"üí¨ –ú–æ–∂–µ—Ç–µ –ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è - —Ñ–ª–æ—Ä–∏—Å—Ç –ø–æ–ª—É—á–∏—Ç –∏—Ö –≤—Å–µ —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –ø—Ä–∏–Ω—è—Ç–∏—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏"
            )
            
            header_kb = types.InlineKeyboardMarkup(inline_keyboard=[
                [
                    types.InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å", callback_data=f"cancel_consultation_{consultation.id}"),
                    types.InlineKeyboardButton(text="üìû –ü–æ–∑–≤–æ–Ω–∏—Ç—å", callback_data=f"call_florist_{consultation.id}")
                ]
            ])
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏ –∑–∞–∫—Ä–µ–ø–ª—è–µ–º header
            header_msg = await callback.message.answer(header_text, reply_markup=header_kb)
            await callback.bot.pin_chat_message(callback.message.chat.id, header_msg.message_id, disable_notification=True)
            
            # üÜï –£–í–ï–î–û–ú–õ–Ø–ï–ú –§–õ–û–†–ò–°–¢–ê –æ –ó–ê–ü–†–û–°–ï (–ù–ï –æ–± –∞–∫—Ç–∏–≤–Ω–æ–π –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏!)
            await _notify_florist_about_consultation_request(callback.bot, consultation, session)
            
            # –ü–µ—Ä–µ–≤–æ–¥–∏–º –∫–ª–∏–µ–Ω—Ç–∞ –≤ —Ä–µ–∂–∏–º –û–ñ–ò–î–ê–ù–ò–Ø (–Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ)
            await state.set_state(ConsultationStates.WAITING_RESPONSE)
            await state.update_data(consultation_id=consultation.id, header_message_id=header_msg.message_id)
            
            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º —Ñ–ª–æ—Ä–∏—Å—Ç–∞
            await callback.message.delete()
            await callback.answer()
            
        except ValidationError as e:
            if "–∑–∞–Ω—è—Ç" in str(e):
                await callback.answer("–§–ª–æ—Ä–∏—Å—Ç –∑–∞–Ω—è—Ç", show_alert=True)
                await start_consultation_flow(callback, state)
            else:
                await callback.answer(str(e), show_alert=True)

@router.message(ConsultationStates.CHATTING)
async def handle_consultation_message(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –ê–ö–¢–ò–í–ù–û–ô –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏"""
    
    data = await state.get_data()
    consultation_id = data.get('consultation_id')
    
    if not consultation_id:
        await message.answer("‚ùå –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        await state.clear()
        return
    
    async for session in get_session():
        user, lang = await _get_user_and_lang(session, message.from_user.id)
        consultation_service = ConsultationService(session)
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –∞–∫—Ç–∏–≤–Ω–∞
            consultation = await consultation_service.consultation_repo.get(consultation_id)
            
            if not consultation or consultation.status != ConsultationStatusEnum.active:
                await message.answer("‚ùå –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞")
                await state.clear()
                return
            
            await session.refresh(consultation, ['client', 'florist'])
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–º—É –ø–µ—Ä–µ—Å–ª–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
            if user.id == consultation.client_id:
                # –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ö–õ–ò–ï–ù–¢–ê ‚Üí –ø–µ—Ä–µ—Å—ã–ª–∞–µ–º –§–õ–û–†–ò–°–¢–£
                recipient_tg_id = consultation.florist.tg_id
                sender_name = consultation.client.first_name or "–ö–ª–∏–µ–Ω—Ç"
                sender_role = "üë§ –ö–ª–∏–µ–Ω—Ç"
            elif user.id == consultation.florist_id:
                # –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –§–õ–û–†–ò–°–¢–ê ‚Üí –ø–µ—Ä–µ—Å—ã–ª–∞–µ–º –ö–õ–ò–ï–ù–¢–£  
                recipient_tg_id = consultation.client.tg_id
                sender_name = consultation.florist.first_name or "–§–ª–æ—Ä–∏—Å—Ç"
                sender_role = "üå∏ –§–ª–æ—Ä–∏—Å—Ç"
            else:
                await message.answer("‚ùå –í—ã –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ —ç—Ç–æ–π –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏")
                return
            
            # ‚úÖ –û–°–ù–û–í–ù–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—é
            try:
                # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
                forwarded_text = f"{sender_role} {sender_name}:\n{message.text}"
                
                # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º –ø–æ–ª—É—á–∞—Ç–µ–ª—é
                if message.photo:
                    await message.copy_to(
                        chat_id=int(recipient_tg_id),
                        caption=f"{sender_role} {sender_name}"
                    )
                else:
                    await message.copy_to(
                        chat_id=int(recipient_tg_id),
                        reply_markup=None
                    )
                    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
                    await message.bot.send_message(
                        chat_id=int(recipient_tg_id),
                        text=f"‚Üë {sender_role} {sender_name}"
                    )
                
                # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—é
                await message.react([types.ReactionTypeEmoji(emoji="‚úÖ")])
                
            except Exception as e:
                print(f"Error forwarding message: {e}")
                await message.answer("‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è")
                
        except Exception as e:
            print(f"Consultation message error: {e}")
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è")

@router.callback_query(F.data.startswith("end_consultation_"))
async def end_consultation(callback: types.CallbackQuery, state: FSMContext):
    """‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ï –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏"""
    consultation_id = int(callback.data.split("_")[2])
    
    async for session in get_session():
        user, lang = await _get_user_and_lang(session, callback.from_user.id)
        consultation_service = ConsultationService(session)
        
        try:
            consultation = await consultation_service.consultation_repo.get(consultation_id)
            if not consultation:
                await callback.answer("‚ùå –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
                return
            
            await session.refresh(consultation, ['client', 'florist'])
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
            if user.id not in [consultation.client_id, consultation.florist_id]:
                await callback.answer("‚ùå –í—ã –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ —ç—Ç–æ–π –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏", show_alert=True)
                return
            
            if consultation.status != ConsultationStatusEnum.active:
                await callback.answer("‚ùå –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞", show_alert=True)
                return
            
            # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ó–∞–≤–µ—Ä—à–∞–µ–º –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
            await consultation_service.complete_consultation(consultation_id, user.id)
            await session.commit()
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫—Ç–æ –∑–∞–≤–µ—Ä—à–∏–ª –∏ –∫–æ–º—É —É–≤–µ–¥–æ–º–∏—Ç—å
            if user.id == consultation.client_id:
                # ‚úÖ –ö–õ–ò–ï–ù–¢ –∑–∞–≤–µ—Ä—à–∏–ª - –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –æ—Ü–µ–Ω–∏—Ç—å —Ñ–ª–æ—Ä–∏—Å—Ç–∞
                await callback.message.edit_text(
                    f"‚úÖ –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
                    f"üåü –û—Ü–µ–Ω–∏—Ç–µ —Ä–∞–±–æ—Ç—É —Ñ–ª–æ—Ä–∏—Å—Ç–∞ {consultation.florist.first_name}:",
                    reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[
                        [
                            types.InlineKeyboardButton(text="‚≠ê", callback_data=f"rate_florist_{consultation_id}_1"),
                            types.InlineKeyboardButton(text="‚≠ê‚≠ê", callback_data=f"rate_florist_{consultation_id}_2"),
                            types.InlineKeyboardButton(text="‚≠ê‚≠ê‚≠ê", callback_data=f"rate_florist_{consultation_id}_3")
                        ],
                        [
                            types.InlineKeyboardButton(text="‚≠ê‚≠ê‚≠ê‚≠ê", callback_data=f"rate_florist_{consultation_id}_4"),
                            types.InlineKeyboardButton(text="‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê", callback_data=f"rate_florist_{consultation_id}_5")
                        ],
                        [types.InlineKeyboardButton(text="üö´ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data=f"skip_rating_{consultation_id}")]
                    ])
                )
                
                # –ü–µ—Ä–µ–≤–æ–¥–∏–º –∫–ª–∏–µ–Ω—Ç–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ—Ü–µ–Ω–∫–∏
                await state.set_state(ConsultationStates.RATING)
                await state.update_data(consultation_id=consultation_id)
                
                other_user = consultation.florist
                other_role = "—Ñ–ª–æ—Ä–∏—Å—Ç—É"
                ender_name = consultation.client.first_name or "–ö–ª–∏–µ–Ω—Ç"
                
            else:
                # –§–õ–û–†–ò–°–¢ –∑–∞–≤–µ—Ä—à–∏–ª - –æ–±—ã—á–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
                ender_name = consultation.florist.first_name or "–§–ª–æ—Ä–∏—Å—Ç"
                other_user = consultation.client
                other_role = "–∫–ª–∏–µ–Ω—Ç—É"
                
                await callback.message.edit_text(
                    f"‚úÖ –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞.\n"
                    f"–°–ø–∞—Å–∏–±–æ –∑–∞ —Ä–∞–±–æ—Ç—É! üå∏",
                    reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[
                        [types.InlineKeyboardButton(text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
                    ])
                )
            
            # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –£–≤–µ–¥–æ–º–ª—è–µ–º –î–†–£–ì–û–ì–û —É—á–∞—Å—Ç–Ω–∏–∫–∞ (–Ω–µ —É–¥–∞–ª—è–µ–º —É –Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è)
            try:
                await callback.bot.send_message(
                    chat_id=int(other_user.tg_id),
                    text=f"‚úÖ –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ {other_role} {ender_name}.\n"
                         f"–°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –Ω–∞—à–µ–≥–æ —Å–µ—Ä–≤–∏—Å–∞! üå∏",
                    reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[
                        [types.InlineKeyboardButton(text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
                    ])
                )
                
                # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM —É –û–ë–û–ò–• —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
                from aiogram.fsm.storage.base import StorageKey
                
                # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä–∞
                initiator_key = StorageKey(
                    bot_id=callback.bot.id, 
                    chat_id=int(user.tg_id), 
                    user_id=int(user.tg_id)
                )
                
                # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥—Ä—É–≥–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞
                other_key = StorageKey(
                    bot_id=callback.bot.id, 
                    chat_id=int(other_user.tg_id), 
                    user_id=int(other_user.tg_id)
                )
                
                # –ü–æ–ª—É—á–∞–µ–º storage –∏–∑ callback
                if hasattr(callback.bot, 'session') and hasattr(callback.bot.session, 'storage'):
                    storage = callback.bot.session.storage
                elif hasattr(callback, 'bot') and hasattr(callback.bot, '_session') and hasattr(callback.bot._session, 'storage'):
                    storage = callback.bot._session.storage
                else:
                    # Fallback - –æ—á–∏—â–∞–µ–º —á–µ—Ä–µ–∑ state
                    await state.clear()
                    print("‚ö†Ô∏è Storage not accessible, cleared local state only")
                    
                if 'storage' in locals():
                    try:
                        await storage.set_state(initiator_key, None)
                        await storage.set_state(other_key, None)
                        print(f"‚úÖ Cleared FSM states for both participants")
                    except Exception as e:
                        print(f"Storage clear error: {e}")
                        await state.clear()  # Fallback
                        
            except Exception as e:
                print(f"Error notifying other participant: {e}")
            
            await callback.answer("‚úÖ –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
            
        except ValidationError as e:
            await callback.answer(str(e), show_alert=True)
        except Exception as e:
            print(f"End consultation error: {e}")
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏", show_alert=True)

@router.callback_query(F.data == "consultation_history")
async def show_consultation_history(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π"""
    async for session in get_session():
        user, lang = await _get_user_and_lang(session, callback.from_user.id)
        
        if not user:
            await callback.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        consultation_service = ConsultationService(session)
        result = await session.execute(
            select(Consultation)
            .where(
                ((Consultation.client_id == user.id) | (Consultation.florist_id == user.id)) &
                (Consultation.status != ConsultationStatusEnum.active)
            )
            .order_by(Consultation.completed_at.desc())
            .limit(10)
        )
        consultations = result.scalars().all()
        
        if not consultations:
            kb = types.InlineKeyboardMarkup(inline_keyboard=[
                [types.InlineKeyboardButton(text=t(lang, "back_to_menu"), callback_data="main_menu")]
            ])
            await callback.message.edit_text(t(lang, "no_consultation_history"), reply_markup=kb)
            await callback.answer()
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π
        kb_rows = []
        text_lines = [t(lang, "history_consultations"), ""]
        
        for consultation in consultations:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            await session.refresh(consultation, ['client', 'florist'])
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å –∫–µ–º –±—ã–ª–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è
            if consultation.client_id == user.id:
                partner_name = consultation.florist.first_name or "–§–ª–æ—Ä–∏—Å—Ç"
                partner_emoji = "üå∏"
            else:
                partner_name = consultation.client.first_name or "–ö–ª–∏–µ–Ω—Ç"
                partner_emoji = "üë§"
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É
            date_str = consultation.started_at.strftime("%d.%m.%Y")
            theme = consultation.theme or "–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫
            text_lines.append(
                f"üìÖ {date_str} | {partner_emoji} {partner_name}\n"
                f"üí¨ {theme}\n"
            )
            
            # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
            kb_rows.append([types.InlineKeyboardButton(
                text=f"{date_str} - {partner_name}: {theme[:20]}...",
                callback_data=f"view_consultation_{consultation.id}"
            )])
        
        kb_rows.append([types.InlineKeyboardButton(text=t(lang, "back_to_menu"), callback_data="main_menu")])
        kb = types.InlineKeyboardMarkup(inline_keyboard=kb_rows)
        
        text = "\n".join(text_lines)
        await callback.message.edit_text(text, reply_markup=kb, parse_mode="HTML")
        await callback.answer()

@router.callback_query(F.data.startswith("view_consultation_"))
async def view_consultation_archive(callback: types.CallbackQuery):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –∞—Ä—Ö–∏–≤–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏"""
    consultation_id = int(callback.data.split("_")[2])
    
    async for session in get_session():
        user, lang = await _get_user_and_lang(session, callback.from_user.id)
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é
        result = await session.execute(
            select(Consultation).where(Consultation.id == consultation_id)
        )
        consultation = result.scalars().first()
        
        if not consultation:
            await callback.answer("–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
        if consultation.client_id != user.id and consultation.florist_id != user.id:
            await callback.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏", show_alert=True)
            return
        
        # –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ - –≤ –±—É–¥—É—â–µ–º –∏–∑ –∞—Ä—Ö–∏–≤–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞
        if consultation.archive_id:
            from app.services.ai_archive_service import AIArchiveService
            ai_service = AIArchiveService(callback.bot)
            success = await ai_service.restore_consultation_from_archive(
                callback.message.chat.id, 
                consultation.archive_id
            )
        else:
            await callback.message.edit_text(
                "üìÅ –ê—Ä—Ö–∏–≤ —ç—Ç–æ–π –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω\n"
                "–í–æ–∑–º–æ–∂–Ω–æ, –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –±—ã–ª–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –¥–æ –≤–Ω–µ–¥—Ä–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏—è."
            )
        
        await callback.answer()

@router.callback_query(F.data.startswith("call_florist_"))
async def request_call_florist(callback: types.CallbackQuery):
    """–ó–∞–ø—Ä–æ—Å –∑–≤–æ–Ω–∫–∞ —Ñ–ª–æ—Ä–∏—Å—Ç—É"""
    consultation_id = int(callback.data.split("_")[2])
    
    async for session in get_session():
        user, lang = await _get_user_and_lang(session, callback.from_user.id)
        
        if not user:
            await callback.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é
        consultation_service = ConsultationService(session)
        consultation_data = await consultation_service.get_consultation_with_participants(consultation_id)
        
        if not consultation_data:
            await callback.answer("–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            return
        
        consultation = consultation_data['consultation']
        client = consultation_data['client']
        florist = consultation_data['florist']
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å —Ñ–ª–æ—Ä–∏—Å—Ç—É —Å –Ω–æ–º–µ—Ä–æ–º –∫–ª–∏–µ–Ω—Ç–∞
        client_phone = client.phone or "–ù–µ —É–∫–∞–∑–∞–Ω"
        call_request_text = t(lang, "call_request_received", name=client.first_name, phone=client_phone)
        
        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –Ω–∞–±–æ—Ä–∞ –Ω–æ–º–µ—Ä–∞ (—Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö)
        clean_phone = client_phone.replace("+", "") if client_phone != "–ù–µ —É–∫–∞–∑–∞–Ω" else ""
        call_kb = types.InlineKeyboardMarkup(inline_keyboard=[
            [types.InlineKeyboardButton(text=f"üìû –ù–∞–±—Ä–∞—Ç—å {client_phone}", url=f"tel:{clean_phone}")]
        ]) if client_phone != "–ù–µ —É–∫–∞–∑–∞–Ω" else None
        try:
            await callback.bot.send_message(
                int(florist.tg_id), 
                call_request_text, 
                reply_markup=call_kb
            )
            await callback.answer(t(lang, "call_request_sent"))
        except Exception as e:
            await callback.answer("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞", show_alert=True)
            print(f"Error sending call request: {e}")

@router.callback_query(F.data.startswith("respond_consultation_"))
async def florist_respond_consultation(callback: types.CallbackQuery, state: FSMContext):
    """–§–ª–æ—Ä–∏—Å—Ç –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é"""
    consultation_id = int(callback.data.split("_")[2])
    
    async for session in get_session():
        user, lang = await _get_user_and_lang(session, callback.from_user.id)
        consultation_service = ConsultationService(session)
        
        if not user or user.role not in [RoleEnum.florist, RoleEnum.owner]:
            await callback.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –∞–∫—Ç–∏–≤–Ω–∞ –∏ —Ñ–ª–æ—Ä–∏—Å—Ç —É—á–∞—Å—Ç–≤—É–µ—Ç
        consultation = await consultation_service.consultation_repo.get(consultation_id)
        if not consultation or consultation.florist_id != user.id:
            await callback.answer("–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            return
        
        if consultation.status != ConsultationStatusEnum.active:
            await callback.answer("–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞", show_alert=True)
            return
        
        # –ü–µ—Ä–µ–≤–æ–¥–∏–º —Ñ–ª–æ—Ä–∏—Å—Ç–∞ –≤ —Ä–µ–∂–∏–º —á–∞—Ç–∞
        await state.set_state(ConsultationStates.CHATTING)
        await state.update_data(consultation_id=consultation_id, client_id=consultation.client_id)
        
        kb = types.InlineKeyboardMarkup(inline_keyboard=[
            [types.InlineKeyboardButton(text="üîö –ó–∞–≤–µ—Ä—à–∏—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é", callback_data=f"end_consultation_{consultation_id}")]
        ])
        
        await callback.message.edit_text(
            "üí¨ –í—ã –ø–æ–¥–∫–ª—é—á–µ–Ω—ã –∫ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏! –ù–∞–ø–∏—à–∏—Ç–µ –æ—Ç–≤–µ—Ç –∫–ª–∏–µ–Ω—Ç—É:",
            reply_markup=kb
        )
        await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π —Ñ–ª–æ—Ä–∏—Å—Ç–∞ –≤ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ —É–±–∏—Ä–∞–µ–º - —Ç–µ–ø–µ—Ä—å —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –≤—ã—à–µ

@router.callback_query(F.data.startswith("rate_florist_"))
async def rate_florist(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ü–µ–Ω–∫–∏ —Ñ–ª–æ—Ä–∏—Å—Ç–∞ –∫–ª–∏–µ–Ω—Ç–æ–º"""
    parts = callback.data.split("_")
    consultation_id = int(parts[2])
    rating = int(parts[3])  # 1-5 –∑–≤—ë–∑–¥
    
    async for session in get_session():
        user, lang = await _get_user_and_lang(session, callback.from_user.id)
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é —Å —Ñ–ª–æ—Ä–∏—Å—Ç–æ–º
            consultation = await session.get(Consultation, consultation_id)
            if not consultation:
                await callback.answer("‚ùå –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
                return
            
            await session.refresh(consultation, ['client', 'florist'])
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –∫–ª–∏–µ–Ω—Ç –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏
            if user.id != consultation.client_id:
                await callback.answer("‚ùå –¢–æ–ª—å–∫–æ –∫–ª–∏–µ–Ω—Ç –º–æ–∂–µ—Ç –æ—Ü–µ–Ω–∏—Ç—å —Ñ–ª–æ—Ä–∏—Å—Ç–∞", show_alert=True)
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ—Ç –ª–∏ —É–∂–µ –æ—Ü–µ–Ω–∫–∏
            from app.models import FloristReview
            existing_review = await session.execute(
                select(FloristReview).where(FloristReview.consultation_id == consultation_id)
            )
            
            if existing_review.scalar_one_or_none():
                await callback.answer("‚ùå –û—Ü–µ–Ω–∫–∞ —É–∂–µ –æ—Å—Ç–∞–≤–ª–µ–Ω–∞", show_alert=True)
                return
            
            # –°–æ–∑–¥–∞—ë–º –æ—Ü–µ–Ω–∫—É
            review = FloristReview(
                consultation_id=consultation_id,
                client_id=user.id,
                florist_id=consultation.florist_id,
                rating=rating,
                created_at=datetime.utcnow()
            )
            session.add(review)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â–∏–π —Ä–µ–π—Ç–∏–Ω–≥ —Ñ–ª–æ—Ä–∏—Å—Ç–∞
            await _update_florist_rating(session, consultation.florist_id)
            
            await session.commit()
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å
            stars = "‚≠ê" * rating
            await callback.message.edit_text(
                f"üåü –°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ü–µ–Ω–∫—É!\n\n"
                f"–í–∞—à–∞ –æ—Ü–µ–Ω–∫–∞ —Ñ–ª–æ—Ä–∏—Å—Ç–∞ {consultation.florist.first_name}: {stars}\n\n"
                f"–í–∞—à –æ—Ç–∑—ã–≤ –ø–æ–º–æ–∂–µ—Ç –Ω–∞–º —É–ª—É—á—à–∏—Ç—å —Å–µ—Ä–≤–∏—Å! üå∏",
                reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[
                    [types.InlineKeyboardButton(text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
                ])
            )
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º —Ñ–ª–æ—Ä–∏—Å—Ç–∞ –æ –ø–æ–ª—É—á–µ–Ω–Ω–æ–π –æ—Ü–µ–Ω–∫–µ
            try:
                await callback.bot.send_message(
                    chat_id=int(consultation.florist.tg_id),
                    text=f"üåü –í—ã –ø–æ–ª—É—á–∏–ª–∏ –æ—Ü–µ–Ω–∫—É –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞ {consultation.client.first_name}!\n\n"
                         f"–û—Ü–µ–Ω–∫–∞: {stars}\n"
                         f"–°–ø–∞—Å–∏–±–æ –∑–∞ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—É—é —Ä–∞–±–æ—Ç—É! üå∏"
                )
            except Exception as e:
                print(f"Error notifying florist about rating: {e}")
            
            # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            await state.clear()
            await callback.answer(f"‚úÖ –û—Ü–µ–Ω–∫–∞ {stars} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!")
            
        except Exception as e:
            print(f"Rating error: {e}")
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ü–µ–Ω–∫–∏", show_alert=True)

@router.callback_query(F.data.startswith("skip_rating_"))
async def skip_rating(callback: types.CallbackQuery, state: FSMContext):
    """–ü—Ä–æ–ø—É—Å–∫ –æ—Ü–µ–Ω–∫–∏ —Ñ–ª–æ—Ä–∏—Å—Ç–∞"""
    consultation_id = int(callback.data.split("_")[2])
    
    async for session in get_session():
        try:
            consultation = await session.get(Consultation, consultation_id)
            if consultation:
                await session.refresh(consultation, ['florist'])
                
                await callback.message.edit_text(
                    f"‚úÖ –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞.\n"
                    f"–°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –Ω–∞—à–µ–≥–æ —Å–µ—Ä–≤–∏—Å–∞! üå∏\n\n"
                    f"–ï—Å–ª–∏ –∑–∞—Ö–æ—Ç–∏—Ç–µ –æ—Ü–µ–Ω–∏—Ç—å —Ñ–ª–æ—Ä–∏—Å—Ç–∞ {consultation.florist.first_name} –ø–æ–∑–∂–µ, "
                    f"–æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
                    reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[
                        [types.InlineKeyboardButton(text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
                    ])
                )
            
            await state.clear()
            await callback.answer("–û—Ü–µ–Ω–∫–∞ –ø—Ä–æ–ø—É—â–µ–Ω–∞")
            
        except Exception as e:
            print(f"Skip rating error: {e}")
            await callback.answer("‚ùå –û—à–∏–±–∫–∞", show_alert=True)


async def _update_florist_rating(session, florist_id: int):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–±—â–µ–≥–æ —Ä–µ–π—Ç–∏–Ω–≥–∞ —Ñ–ª–æ—Ä–∏—Å—Ç–∞"""
    from app.models import FloristReview, FloristProfile
    from sqlalchemy import func
    
    # –í—ã—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∑—ã–≤–æ–≤
    result = await session.execute(
        select(
            func.avg(FloristReview.rating).label('avg_rating'),
            func.count(FloristReview.id).label('reviews_count')
        ).where(FloristReview.florist_id == florist_id)
    )
    
    stats = result.first()
    avg_rating = float(stats.avg_rating) if stats.avg_rating else 0.0
    reviews_count = stats.reviews_count if stats.reviews_count else 0
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å —Ñ–ª–æ—Ä–∏—Å—Ç–∞
    florist_profile = await session.execute(
        select(FloristProfile).where(FloristProfile.user_id == florist_id)
    )
    profile = florist_profile.scalar_one_or_none()
    
    if profile:
        profile.rating = round(avg_rating, 2)
        profile.reviews_count = reviews_count
        profile.updated_at = datetime.utcnow()
    
    print(f"Updated florist {florist_id} rating: {avg_rating:.2f} ({reviews_count} reviews)")


# üÜï –î–û–ë–ê–í–¨–¢–ï –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è RATING (–µ—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç –ø–∏—à–µ—Ç —Ç–µ–∫—Å—Ç –≤–º–µ—Å—Ç–æ –∫–Ω–æ–ø–æ–∫)
@router.message(ConsultationStates.RATING)
async def handle_rating_state_message(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –æ—Ü–µ–Ω–∫–∏"""
    data = await state.get_data()
    consultation_id = data.get('consultation_id')
    
    if consultation_id:
        await message.answer(
            "üåü –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –≤—ã—à–µ –¥–ª—è –æ—Ü–µ–Ω–∫–∏ —Ñ–ª–æ—Ä–∏—Å—Ç–∞.\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤—ë–∑–¥ –æ—Ç 1 –¥–æ 5:",
            reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[
                [
                    types.InlineKeyboardButton(text="‚≠ê", callback_data=f"rate_florist_{consultation_id}_1"),
                    types.InlineKeyboardButton(text="‚≠ê‚≠ê", callback_data=f"rate_florist_{consultation_id}_2"),
                    types.InlineKeyboardButton(text="‚≠ê‚≠ê‚≠ê", callback_data=f"rate_florist_{consultation_id}_3")
                ],
                [
                    types.InlineKeyboardButton(text="‚≠ê‚≠ê‚≠ê‚≠ê", callback_data=f"rate_florist_{consultation_id}_4"),
                    types.InlineKeyboardButton(text="‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê", callback_data=f"rate_florist_{consultation_id}_5")
                ],
                [types.InlineKeyboardButton(text="üö´ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data=f"skip_rating_{consultation_id}")]
            ])
        )
    else:
        await state.clear()
        await message.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")


# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
async def _notify_florist_about_consultation_request(bot, consultation, session):
    """üÜï –£–≤–µ–¥–æ–º–∏—Ç—å —Ñ–ª–æ—Ä–∏—Å—Ç–∞ –æ –ó–ê–ü–†–û–°–ï –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ (–Ω–µ –∞–∫—Ç–∏–≤–Ω–æ–π!)"""
    try:
        await session.refresh(consultation, ['client', 'florist'])
        client = consultation.client
        florist = consultation.florist
        
        text = (
            f"üå∏ –ó–∞–ø—Ä–æ—Å –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é!\n\n"
            f"üë§ –ö–ª–∏–µ–Ω—Ç: {client.first_name}\n"
            f"üì± –ó–∞–ø—Ä–æ—Å #{consultation.id}\n\n"
            f"üí° –ü—Ä–∏–º–∏—Ç–µ –∑–∞–ø—Ä–æ—Å —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é"
        )
        
        kb = types.InlineKeyboardMarkup(inline_keyboard=[
            [types.InlineKeyboardButton(text="‚úÖ –ü—Ä–∏–Ω—è—Ç—å", callback_data=f"accept_consultation_{consultation.id}")],
            [types.InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"decline_consultation_{consultation.id}")],
            [types.InlineKeyboardButton(text="üìû –ü–æ–∑–≤–æ–Ω–∏—Ç—å –∫–ª–∏–µ–Ω—Ç—É", callback_data=f"call_client_{consultation.id}")]
        ])
        
        await bot.send_message(int(florist.tg_id), text, reply_markup=kb)
        print(f"‚úÖ Consultation request sent to florist {florist.tg_id}")
    except Exception as e:
        print(f"‚ùå Error notifying florist: {e}")

@router.callback_query(F.data.startswith("accept_consultation_"))
async def accept_consultation_handler(callback: types.CallbackQuery):
    """üÜï –ü—Ä–∏–Ω—è—Ç–∏–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ —Å –¥–æ—Å—Ç–∞–≤–∫–æ–π –±—É—Ñ–µ—Ä–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    consultation_id = int(callback.data.split("_")[2])
    
    async for session in get_session():
        user, lang = await _get_user_and_lang(session, callback.from_user.id)
        consultation_service = ConsultationService(session)
        
        try:
            # üÜï –ü—Ä–∏–Ω–∏–º–∞–µ–º –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é (—Å –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏ –∏ –¥–æ—Å—Ç–∞–≤–∫–æ–π –±—É—Ñ–µ—Ä–∞)
            consultation = await consultation_service.accept_consultation(consultation_id, user.id)
            
            await session.refresh(consultation, ['client', 'florist'])
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –æ –ø—Ä–∏–Ω—è—Ç–∏–∏
            try:
                await callback.bot.send_message(
                    chat_id=int(consultation.client.tg_id),
                    text=f"‚úÖ –§–ª–æ—Ä–∏—Å—Ç {consultation.florist.first_name} –ø—Ä–∏–Ω—è–ª –≤–∞—à—É –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é!\n"
                         f"–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –æ–±—â–∞—Ç—å—Å—è –Ω–∞–ø—Ä—è–º—É—é.\n\n"
                         f"–î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /end_consultation",
                    reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[
                        [types.InlineKeyboardButton(text="üìû –ü–æ–∑–≤–æ–Ω–∏—Ç—å —Ñ–ª–æ—Ä–∏—Å—Ç—É", callback_data=f"call_florist_{consultation.id}")],
                        [types.InlineKeyboardButton(text="‚ùå –ó–∞–≤–µ—Ä—à–∏—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é", callback_data=f"end_consultation_{consultation.id}")]
                    ])
                )
                
                # üÜï –ü–µ—Ä–µ–≤–æ–¥–∏–º –∫–ª–∏–µ–Ω—Ç–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ CHATTING
                from aiogram.fsm.storage.base import StorageKey
                storage_key = StorageKey(bot_id=callback.bot.id, chat_id=int(consultation.client.tg_id), user_id=int(consultation.client.tg_id))
                await callback.bot.fsm.storage.set_state(key=storage_key, state=ConsultationStates.CHATTING)
                await callback.bot.fsm.storage.update_data(key=storage_key, data={'consultation_id': consultation.id})
                
            except Exception as e:
                print(f"Error notifying client: {e}")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Ñ–ª–æ—Ä–∏—Å—Ç–∞
            await callback.message.edit_text(
                f"‚úÖ –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –ø—Ä–∏–Ω—è—Ç–∞!\n"
                f"–ö–ª–∏–µ–Ω—Ç: {consultation.client.first_name}\n"
                f"–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –æ–±—â–∞—Ç—å—Å—è –Ω–∞–ø—Ä—è–º—É—é.",
                reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[
                    [types.InlineKeyboardButton(text="‚ùå –ó–∞–≤–µ—Ä—à–∏—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é", callback_data=f"end_consultation_{consultation.id}")]
                ])
            )
            
            await callback.answer("–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –ø—Ä–∏–Ω—è—Ç–∞!")
            
        except ValidationError as e:
            await callback.answer(str(e), show_alert=True)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
            if "–∏—Å—Ç–µ–∫–ª–∞" in str(e):
                await callback.message.edit_text(
                    "‚ùå –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –∏—Å—Ç–µ–∫–ª–∞ (–ø—Ä–æ—à–ª–æ –±–æ–ª–µ–µ 15 –º–∏–Ω—É—Ç)",
                    reply_markup=None
                )
            else:
                await callback.message.edit_text(
                    f"‚ùå –û—à–∏–±–∫–∞: {str(e)}",
                    reply_markup=None
                )
        
        except Exception as e:
            print(f"Accept consultation error: {e}")
            await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)

@router.callback_query(F.data.startswith("decline_consultation_"))
async def decline_consultation_handler(callback: types.CallbackQuery):
    """üÜï –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ —Å –æ—á–∏—Å—Ç–∫–æ–π –±—É—Ñ–µ—Ä–∞"""
    consultation_id = int(callback.data.split("_")[2])
    
    async for session in get_session():
        user, lang = await _get_user_and_lang(session, callback.from_user.id)
        consultation_service = ConsultationService(session)
        
        try:
            # üÜï –û—Ç–∫–ª–æ–Ω—è–µ–º –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é (—Å –æ—á–∏—Å—Ç–∫–æ–π –±—É—Ñ–µ—Ä–∞)
            consultation = await consultation_service.decline_consultation(consultation_id, user.id)
            
            await session.refresh(consultation, ['client', 'florist'])
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –æ–± –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏
            try:
                await callback.bot.send_message(
                    chat_id=int(consultation.client.tg_id),
                    text=f"üòî –§–ª–æ—Ä–∏—Å—Ç {consultation.florist.first_name} –Ω–µ –º–æ–∂–µ—Ç –ø—Ä–∏–Ω—è—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é.\n"
                         f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–≥–æ —Ñ–ª–æ—Ä–∏—Å—Ç–∞.",
                    reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[
                        [types.InlineKeyboardButton(text="üå∏ –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–≥–æ —Ñ–ª–æ—Ä–∏—Å—Ç–∞", callback_data="consultation_start")],
                        [types.InlineKeyboardButton(text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
                    ])
                )
                
                # üÜï –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞
                from aiogram.fsm.storage.base import StorageKey
                storage_key = StorageKey(bot_id=callback.bot.id, chat_id=int(consultation.client.tg_id), user_id=int(consultation.client.tg_id))
                await callback.bot.fsm.storage.set_state(key=storage_key, state=None)
                
            except Exception as e:
                print(f"Error notifying client about decline: {e}")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Ñ–ª–æ—Ä–∏—Å—Ç–∞
            await callback.message.edit_text(
                "‚ùå –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.",
                reply_markup=None
            )
            
            await callback.answer("–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞")
            
        except ValidationError as e:
            await callback.answer(str(e), show_alert=True)
        except Exception as e:
            print(f"Decline consultation error: {e}")
            await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)

@router.message(ConsultationStates.WAITING_RESPONSE)
async def handle_waiting_messages_improved(message: types.Message, state: FSMContext):
    """üÜï –£–ª—É—á—à–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Ä–µ–∂–∏–º–µ –æ–∂–∏–¥–∞–Ω–∏—è"""
    data = await state.get_data()
    consultation_id = data.get('consultation_id')
    
    if not consultation_id:
        await message.answer("‚ùå –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        await state.clear()
        return
    
    async for session in get_session():
        user, lang = await _get_user_and_lang(session, message.from_user.id)
        consultation_service = ConsultationService(session)
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏
            consultation = await session.get(Consultation, consultation_id)
            
            if not consultation:
                await message.answer("‚ùå –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                await state.clear()
                return
            
            if consultation.status == ConsultationStatusEnum.active:
                # –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è —É–∂–µ –∞–∫—Ç–∏–≤–Ω–∞ - –ø–µ—Ä–µ–≤–æ–¥–∏–º –≤ —Ä–µ–∂–∏–º —á–∞—Ç–∞
                await state.set_state(ConsultationStates.CHATTING)
                await handle_consultation_message(message, state)
                return
            
            if consultation.status != ConsultationStatusEnum.pending:
                await message.answer("‚ùå –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –±–æ–ª—å—à–µ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞")
                await state.clear()
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–π–º–∞—É—Ç
            if consultation.expires_at and consultation.expires_at < datetime.utcnow():
                consultation.status = ConsultationStatusEnum.expired
                await session.commit()
                await message.answer(
                    "‚è∞ –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∏—Å—Ç–µ–∫–ª–æ (15 –º–∏–Ω—É—Ç).\n"
                    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–≥–æ —Ñ–ª–æ—Ä–∏—Å—Ç–∞.",
                    reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[
                        [types.InlineKeyboardButton(text="üå∏ –í—ã–±—Ä–∞—Ç—å —Ñ–ª–æ—Ä–∏—Å—Ç–∞", callback_data="consultation_start")]
                    ])
                )
                await state.clear()
                return
            
            # üÜï –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –±—É—Ñ–µ—Ä —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π
            await consultation_service.add_buffered_message(
                consultation_id, 
                user.id, 
                message.text,
                message.photo[-1].file_id if message.photo else None
            )
            
            # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–ª–µ–º–Ω—É—é —Ä–µ–∞–∫—Ü–∏—é, –æ—Å—Ç–∞–≤–ª—è–µ–º –ø—Ä–æ—Å—Ç–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
            # await message.react([types.ReactionTypeEmoji(emoji="üíå")])  # ‚ùå –£–ë–†–ê–õ–ò
            
            # –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–µ–º –æ —Å—Ç–∞—Ç—É—Å–µ
            import random
            if random.randint(1, 3) == 1:  # 33% –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å
                remaining_minutes = max(0, int((consultation.expires_at - datetime.utcnow()).total_seconds() / 60))
                await message.answer(
                    f"üíå –°–æ–æ–±—â–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ. –§–ª–æ—Ä–∏—Å—Ç –ø–æ–ª—É—á–∏—Ç –µ–≥–æ –ø–æ—Å–ª–µ –ø—Ä–∏–Ω—è—Ç–∏—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏.\n"
                    f"‚è± –û—Å—Ç–∞–ª–æ—Å—å –≤—Ä–µ–º–µ–Ω–∏: {remaining_minutes} –º–∏–Ω.",
                    reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[
                        [types.InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å", callback_data=f"cancel_request_{consultation_id}")]
                    ])
                )
            else:
                # –ü—Ä–æ—Å—Ç–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –±–µ–∑ –∫–Ω–æ–ø–æ–∫
                await message.answer("üíå –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ")

        except Exception as e:
            print(f"Buffer message error: {e}")
            await message.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è")

@router.callback_query(F.data.startswith("call_florist_"))  
async def call_florist(callback: types.CallbackQuery):
    """–ö–ª–∏–µ–Ω—Ç –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –Ω–æ–º–µ—Ä —Ñ–ª–æ—Ä–∏—Å—Ç–∞"""
    consultation_id = int(callback.data.split("_")[2])
    
    async for session in get_session():
        consultation = await session.get(Consultation, consultation_id)
        if not consultation:
            await callback.answer("–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            return
            
        await session.refresh(consultation, ['florist'])
        florist_phone = consultation.florist.phone or "–ù–µ —É–∫–∞–∑–∞–Ω"
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–º–µ—Ä —Ç–µ–∫—Å—Ç–æ–º
        await callback.message.answer(
            f"üìû –ù–æ–º–µ—Ä —Ñ–ª–æ—Ä–∏—Å—Ç–∞: `{florist_phone}`\n\n"
            f"–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –Ω–æ–º–µ—Ä —á—Ç–æ–±—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∏ –ø–æ–∑–≤–æ–Ω–∏—Ç–µ —á–µ—Ä–µ–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Ç–µ–ª–µ—Ñ–æ–Ω–∞.",
            parse_mode="Markdown"
        )
        await callback.answer("–ù–æ–º–µ—Ä –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")

        if florist_phone != "–ù–µ —É–∫–∞–∑–∞–Ω":
            clean_phone = florist_phone.replace("+", "")
            tel_kb = types.InlineKeyboardMarkup(inline_keyboard=[
                [types.InlineKeyboardButton(text=f"üìû –ù–∞–±—Ä–∞—Ç—å", url=f"tel:{clean_phone}")]
            ])
            await callback.message.answer("üëÜ –ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É:", reply_markup=tel_kb)

### 1.2 call_client() - —Ñ–ª–æ—Ä–∏—Å—Ç –ø—Ä–æ—Å–∏—Ç –ø–æ–∑–≤–æ–Ω–∏—Ç—å –∫–ª–∏–µ–Ω—Ç—É  
@router.callback_query(F.data.startswith("call_client_"))
async def call_client(callback: types.CallbackQuery):
    """–§–ª–æ—Ä–∏—Å—Ç –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –Ω–æ–º–µ—Ä –∫–ª–∏–µ–Ω—Ç–∞"""
    consultation_id = int(callback.data.split("_")[2])
    
    async for session in get_session():
        consultation = await session.get(Consultation, consultation_id)
        if not consultation:
            await callback.answer("–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            return
            
        await session.refresh(consultation, ['client'])
        client_phone = consultation.client.phone or "–ù–µ —É–∫–∞–∑–∞–Ω"
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–º–µ—Ä —Ç–µ–∫—Å—Ç–æ–º —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π
        await callback.message.answer(
            f"üìû –ù–æ–º–µ—Ä –∫–ª–∏–µ–Ω—Ç–∞: `{client_phone}`\n\n"
            f"–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –Ω–æ–º–µ—Ä —á—Ç–æ–±—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∏ –ø–æ–∑–≤–æ–Ω–∏—Ç–µ —á–µ—Ä–µ–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Ç–µ–ª–µ—Ñ–æ–Ω–∞.",
            parse_mode="Markdown"
        )
        await callback.answer("–ù–æ–º–µ—Ä –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")

        if client_phone != "–ù–µ —É–∫–∞–∑–∞–Ω":
            clean_phone = client_phone.replace("+", "")
            tel_kb = types.InlineKeyboardMarkup(inline_keyboard=[
                [types.InlineKeyboardButton(text=f"üìû –ù–∞–±—Ä–∞—Ç—å", url=f"tel:{clean_phone}")]
            ])
            await callback.message.answer("üëÜ –ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É:", reply_markup=tel_kb)

### 1.3 show_phone_info() - –Ω–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ù–æ–º–µ—Ä"
@router.callback_query(F.data == "show_phone")
async def show_phone_info(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–æ–º–µ—Ä–µ —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
    await callback.answer("üí° –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏ –Ω–∞–±–µ—Ä–∏—Ç–µ –µ–≥–æ —á–µ—Ä–µ–∑ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ", show_alert=True)

## –®–ê–ì 2: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –æ—Ç–º–µ–Ω—ã –∑–∞–ø—Ä–æ—Å–∞ –∫–ª–∏–µ–Ω—Ç–æ–º

@router.callback_query(F.data.startswith("cancel_request_"))
async def cancel_consultation_request(callback: types.CallbackQuery, state: FSMContext):
    """üÜï –û—Ç–º–µ–Ω–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –∫–ª–∏–µ–Ω—Ç–æ–º"""
    consultation_id = int(callback.data.split("_")[2])
    
    async for session in get_session():
        user, lang = await _get_user_and_lang(session, callback.from_user.id)
        consultation_service = ConsultationService(session)
        
        try:
            # –û—Ç–º–µ–Ω—è–µ–º –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é (–∏—Å–ø–æ–ª—å–∑—É–µ–º decline –æ—Ç –∏–º–µ–Ω–∏ –∫–ª–∏–µ–Ω—Ç–∞)
            consultation = await consultation_service.decline_consultation(consultation_id, user.id)
            
            await callback.message.edit_text(
                "‚ùå –ó–∞–ø—Ä–æ—Å –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é –æ—Ç–º–µ–Ω—ë–Ω.",
                reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[
                    [types.InlineKeyboardButton(text="üå∏ –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–≥–æ —Ñ–ª–æ—Ä–∏—Å—Ç–∞", callback_data="consultation_start")],
                    [types.InlineKeyboardButton(text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
                ])
            )
            
            await state.clear()
            await callback.answer("–ó–∞–ø—Ä–æ—Å –æ—Ç–º–µ–Ω—ë–Ω")
            
        except Exception as e:
            print(f"Cancel request error: {e}")
            await callback.answer("–û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã", show_alert=True)


