from aiogram import Router, types, F
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.base import StorageKey
from sqlalchemy import select

from app.database.database import get_session
from app.services import UserService, FloristService, ConsultationService
from app.models import RoleEnum, ConsultationStatusEnum, Consultation, ConsultationMessage
from app.translate import t
from app.exceptions import ValidationError, UserNotFoundError
import logging
from datetime import datetime


router = Router()

class ConsultationStates(StatesGroup):
    WAITING_RESPONSE = State()    # üÜï –û–∂–∏–¥–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ —Ñ–ª–æ—Ä–∏—Å—Ç–∞
    CHATTING = State()           # –ê–∫—Ç–∏–≤–Ω–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è  
    RATING = State()             # –û—Ü–µ–Ω–∫–∞ —Ñ–ª–æ—Ä–∏—Å—Ç–∞

async def _get_user_and_lang(session, tg_id: int):
    """–ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —è–∑—ã–∫"""
    user_service = UserService(session)
    try:
        user = await user_service.get_user_by_tg_id(str(tg_id))
        return user, user.lang or "ru"
    except UserNotFoundError:
        return None, "ru"

@router.callback_query(F.data == "consultation_start")
async def start_consultation_flow(callback: types.CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –≤—ã–±–æ—Ä–∞ —Ñ–ª–æ—Ä–∏—Å—Ç–∞"""
    await _show_florists_page(callback, state, page=0)

@router.callback_query(F.data.startswith("florists_page_"))
async def show_florists_page(callback: types.CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ñ–ª–æ—Ä–∏—Å—Ç–æ–≤"""
    page = int(callback.data.split("_")[2])
    await _show_florists_page(callback, state, page)

async def _show_florists_page(callback: types.CallbackQuery, state: FSMContext, page: int = 0):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å —Ñ–ª–æ—Ä–∏—Å—Ç–∞–º–∏"""
    async for session in get_session():
        user, lang = await _get_user_and_lang(session, callback.from_user.id)
        
        if not user or user.role != RoleEnum.client:
            await callback.answer(t(lang, "access_denied"), show_alert=True)
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ—Ç –ª–∏ –∞–∫—Ç–∏–≤–Ω–æ–π –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏
        consultation_service = ConsultationService(session)
        active = await consultation_service.get_active_consultation(user.id)
        
        if active:
            await callback.message.edit_text(
                t(lang, "consultation_busy"),
                reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[
                    [types.InlineKeyboardButton(text=t(lang, "end_consultation"), callback_data=f"end_consultation_{active.id}")],
                    [types.InlineKeyboardButton(text=t(lang, "back_to_menu"), callback_data="main_menu")]
                ])
            )
            await callback.answer()
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ñ–ª–æ—Ä–∏—Å—Ç–æ–≤
        florist_service = FloristService(session)
        all_florists = await florist_service.get_available_florists()
        
        if not all_florists:
            kb = types.InlineKeyboardMarkup(inline_keyboard=[
                [types.InlineKeyboardButton(text=t(lang, "back_to_menu"), callback_data="main_menu")]
            ])
            await callback.message.edit_text(t(lang, "no_florists_available"), reply_markup=kb)
            await callback.answer()
            return
        
        # –ü–∞–≥–∏–Ω–∞—Ü–∏—è: –ø–æ 3 —Ñ–ª–æ—Ä–∏—Å—Ç–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
        per_page = 3
        total_pages = (len(all_florists) + per_page - 1) // per_page
        start_idx = page * per_page
        end_idx = start_idx + per_page
        florists_on_page = all_florists[start_idx:end_idx]
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ —Ñ–ª–æ—Ä–∏—Å—Ç–æ–≤
        kb_rows = []
        text_lines = [f"{t(lang, 'choose_florist')} (—Å—Ç—Ä. {page + 1}/{total_pages})", ""]
        
        for florist_data in florists_on_page:
            profile = florist_data['profile']
            user_obj = florist_data['user']
            status_text = florist_data['status_text']
            rating_text = florist_data['rating_text']
            is_online = florist_data['is_online']
            
            # –ö—Ä–∞—Å–∏–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
            specialization = profile.specialization or "–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Ñ–ª–æ—Ä–∏—Å—Ç"
            
            # –≠–º–æ–¥–∑–∏ —Å—Ç–∞—Ç—É—Å–∞
            status_emoji = "üü¢" if is_online else "üü°"
            
            # –ö–Ω–æ–ø–∫–∞: "üå∏ –ò–º—è ‚≠ê4.2 üü¢"
            button_text = f"üå∏ {user_obj.first_name} {rating_text} {status_emoji}"
            
            kb_rows.append([types.InlineKeyboardButton(
                text=button_text,
                callback_data=f"select_florist_{user_obj.id}"
            )])
            
            # –î–µ—Ç–∞–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≤ —Ç–µ–∫—Å—Ç–µ
            text_lines.append(
                f"üå∏ <b>{user_obj.first_name}</b> {rating_text}\n"
                f"üìù {specialization}\n"
                f"{status_emoji} {status_text}\n"
            )
        
        # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        nav_row = []
        if page > 0:
            nav_row.append(types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"florists_page_{page-1}"))
        if page < total_pages - 1:
            nav_row.append(types.InlineKeyboardButton(text="–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è", callback_data=f"florists_page_{page+1}"))
        
        if nav_row:
            kb_rows.append(nav_row)
        
        kb_rows.append([types.InlineKeyboardButton(text=t(lang, "back_to_menu"), callback_data="main_menu")])
        kb = types.InlineKeyboardMarkup(inline_keyboard=kb_rows)
        text = "\n".join(text_lines)
        
        await callback.message.edit_text(text, reply_markup=kb, parse_mode="HTML")
        await callback.answer()

@router.callback_query(F.data.startswith("select_florist_"))
async def select_florist(callback: types.CallbackQuery, state: FSMContext):
    """–í—ã–±–æ—Ä —Ñ–ª–æ—Ä–∏—Å—Ç–∞ –∏ –ó–ê–ü–†–û–° –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ (pending —Å—Ç–∞—Ç—É—Å)"""
    florist_id = int(callback.data.split("_")[2])
    
    async for session in get_session():
        user, lang = await _get_user_and_lang(session, callback.from_user.id)
        
        if not user:
            await callback.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        consultation_service = ConsultationService(session)
        
        try:
            # üÜï –°–û–ó–î–ê–ï–ú PENDING –ö–û–ù–°–£–õ–¨–¢–ê–¶–ò–Æ (–ù–ï –ê–ö–¢–ò–í–ù–£–Æ!)
            consultation = await consultation_service.request_consultation(user.id, florist_id)
            await session.commit()
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–º—è —Ñ–ª–æ—Ä–∏—Å—Ç–∞
            await session.refresh(consultation, ['florist'])
            florist_name = consultation.florist.first_name or "–§–ª–æ—Ä–∏—Å—Ç"
            
            # üÜï –ù–û–í–û–ï –°–û–û–ë–©–ï–ù–ò–ï –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ - –æ–∂–∏–¥–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞
            header_text = (
                f"‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ —Ñ–ª–æ—Ä–∏—Å—Ç–∞ {florist_name}\n\n"
                f"üí¨ –ú–æ–∂–µ—Ç–µ –ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è - —Ñ–ª–æ—Ä–∏—Å—Ç –ø–æ–ª—É—á–∏—Ç –∏—Ö –≤—Å–µ —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –ø—Ä–∏–Ω—è—Ç–∏—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏"
            )
            
            header_kb = types.InlineKeyboardMarkup(inline_keyboard=[
                [
                    types.InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å", callback_data=f"cancel_consultation_{consultation.id}"),
                    types.InlineKeyboardButton(text="üìû –ü–æ–∑–≤–æ–Ω–∏—Ç—å", callback_data=f"call_florist_{consultation.id}")
                ]
            ])
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏ –∑–∞–∫—Ä–µ–ø–ª—è–µ–º header
            header_msg = await callback.message.answer(header_text, reply_markup=header_kb)
            await callback.bot.pin_chat_message(callback.message.chat.id, header_msg.message_id, disable_notification=True)
            
            # üÜï –£–í–ï–î–û–ú–õ–Ø–ï–ú –§–õ–û–†–ò–°–¢–ê –æ –ó–ê–ü–†–û–°–ï (–ù–ï –æ–± –∞–∫—Ç–∏–≤–Ω–æ–π –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏!)
            await _notify_florist_about_consultation_request(callback.bot, consultation, session)
            
            # –ü–µ—Ä–µ–≤–æ–¥–∏–º –∫–ª–∏–µ–Ω—Ç–∞ –≤ —Ä–µ–∂–∏–º –û–ñ–ò–î–ê–ù–ò–Ø (–Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ)
            await state.set_state(ConsultationStates.WAITING_RESPONSE)
            await state.update_data(consultation_id=consultation.id, header_message_id=header_msg.message_id)
            
            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º —Ñ–ª–æ—Ä–∏—Å—Ç–∞
            await callback.message.delete()
            await callback.answer()
            
        except ValidationError as e:
            if "–∑–∞–Ω—è—Ç" in str(e):
                await callback.answer("–§–ª–æ—Ä–∏—Å—Ç –∑–∞–Ω—è—Ç", show_alert=True)
                await start_consultation_flow(callback, state)
            else:
                await callback.answer(str(e), show_alert=True)

@router.message(ConsultationStates.CHATTING)
async def handle_consultation_message(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –ê–ö–¢–ò–í–ù–û–ô –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏"""
    data = await state.get_data()
    consultation_id = data.get('consultation_id')
    
    if not consultation_id:
        await message.answer("‚ùå –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        await state.clear()
        return
    
    async for session in get_session():
        user, lang = await _get_user_and_lang(session, message.from_user.id)
        consultation_service = ConsultationService(session)
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –∞–∫—Ç–∏–≤–Ω–∞
            consultation = await consultation_service.consultation_repo.get(consultation_id)
            if not consultation or consultation.status != ConsultationStatusEnum.active:
                await message.answer("‚ùå –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞")
                await state.clear()
                return
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ë–î
            await consultation_service.send_message(
                consultation_id, user.id, message.text, 
                message.photo[-1].file_id if message.photo else None
            )
            await session.commit()
            
            # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º –¥—Ä—É–≥–æ–º—É —É—á–∞—Å—Ç–Ω–∏–∫—É
            await session.refresh(consultation, ['client', 'florist'])
            
            if user.id == consultation.client_id:
                # –ö–ª–∏–µ–Ω—Ç –Ω–∞–ø–∏—Å–∞–ª - –ø–µ—Ä–µ—Å—ã–ª–∞–µ–º —Ñ–ª–æ—Ä–∏—Å—Ç—É
                recipient = consultation.florist
                prefix = "üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞:"
            else:
                # –§–ª–æ—Ä–∏—Å—Ç –Ω–∞–ø–∏—Å–∞–ª - –ø–µ—Ä–µ—Å—ã–ª–∞–µ–º –∫–ª–∏–µ–Ω—Ç—É
                recipient = consultation.client
                prefix = "üå∏ –û—Ç–≤–µ—Ç —Ñ–ª–æ—Ä–∏—Å—Ç–∞:"
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            try:
                if message.photo:
                    await message.bot.send_photo(
                        chat_id=int(recipient.tg_id),
                        photo=message.photo[-1].file_id,
                        caption=f"{prefix}\n{message.caption or message.text or ''}"
                    )
                else:
                    await message.bot.send_message(
                        chat_id=int(recipient.tg_id),
                        text=f"{prefix}\n{message.text}"
                    )
            except Exception as e:
                print(f"Error forwarding message: {e}")
                
        except Exception as e:
            print(f"Handle message error: {e}")
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è")

@router.callback_query(F.data.startswith("end_consultation_"))
async def end_consultation(callback: types.CallbackQuery, state: FSMContext):
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ —Å –ø–æ–ª–Ω–æ–π –æ—á–∏—Å—Ç–∫–æ–π"""
    consultation_id = int(callback.data.split("_")[2])
    
    async for session in get_session():
        user, lang = await _get_user_and_lang(session, callback.from_user.id)
        
        try:
            consultation_service = ConsultationService(session)
            
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é
            consultation = await consultation_service.consultation_repo.get(consultation_id)
            if not consultation:
                await callback.answer("–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
                return
            
            # –ó–∞–≤–µ—Ä—à–∞–µ–º –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é
            consultation.status = ConsultationStatusEnum.completed_by_client \
                if user.id == consultation.client_id \
                else ConsultationStatusEnum.completed_by_florist
            consultation.completed_at = datetime.utcnow()
            
            # –ê—Ä—Ö–∏–≤–∏—Ä—É–µ–º –µ—Å–ª–∏ –µ—Å—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è
            from sqlalchemy import select
            from app.models import ConsultationMessage
            
            result = await session.execute(
                select(ConsultationMessage)
                .where(ConsultationMessage.consultation_id == consultation_id)
                .order_by(ConsultationMessage.sent_at)
            )
            messages = result.scalars().all()
            
            if messages:
                from app.services.ai_archive_service import AIArchiveService
                ai_service = AIArchiveService(callback.bot)
                
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ–º—É
                theme = await ai_service.generate_consultation_theme(messages)
                consultation.theme = theme
                
                # –ê—Ä—Ö–∏–≤–∏—Ä—É–µ–º
                archive_id = await ai_service.archive_consultation(consultation, messages)
                consultation.archive_id = archive_id
            
            await session.commit()
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –¥—Ä—É–≥–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞
            other_user_id = consultation.florist_id if user.id == consultation.client_id else consultation.client_id
            await session.refresh(consultation, ['client', 'florist'])
            other_user = consultation.florist if user.id == consultation.client_id else consultation.client
            
            if other_user:
                try:
                    await callback.bot.send_message(
                        int(other_user.tg_id),
                        "–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–æ–º."
                    )
                except Exception as e:
                    print(f"Error notifying other user: {e}")
            
            # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            await state.clear()
            
            # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –æ—Ü–µ–Ω–∏—Ç—å (—Ç–æ–ª—å–∫–æ –∫–ª–∏–µ–Ω—Ç—É)
            if user.role == RoleEnum.client:
                kb = types.InlineKeyboardMarkup(inline_keyboard=[
                    [types.InlineKeyboardButton(text=f"‚≠ê {i}", callback_data=f"rate_{consultation_id}_{i}") 
                     for i in range(1, 6)],
                    [types.InlineKeyboardButton(text=t(lang, "back_to_menu"), callback_data="main_menu")]
                ])
                await callback.message.answer(t(lang, "rate_florist_prompt"), reply_markup=kb)
            else:
                await callback.message.answer("–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
                
        except Exception as e:
            print(f"Error ending consultation: {e}")
            await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏", show_alert=True)

@router.callback_query(F.data == "consultation_history")
async def show_consultation_history(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π"""
    async for session in get_session():
        user, lang = await _get_user_and_lang(session, callback.from_user.id)
        
        if not user:
            await callback.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        consultation_service = ConsultationService(session)
        result = await session.execute(
            select(Consultation)
            .where(
                ((Consultation.client_id == user.id) | (Consultation.florist_id == user.id)) &
                (Consultation.status != ConsultationStatusEnum.active)
            )
            .order_by(Consultation.completed_at.desc())
            .limit(10)
        )
        consultations = result.scalars().all()
        
        if not consultations:
            kb = types.InlineKeyboardMarkup(inline_keyboard=[
                [types.InlineKeyboardButton(text=t(lang, "back_to_menu"), callback_data="main_menu")]
            ])
            await callback.message.edit_text(t(lang, "no_consultation_history"), reply_markup=kb)
            await callback.answer()
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π
        kb_rows = []
        text_lines = [t(lang, "history_consultations"), ""]
        
        for consultation in consultations:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            await session.refresh(consultation, ['client', 'florist'])
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å –∫–µ–º –±—ã–ª–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è
            if consultation.client_id == user.id:
                partner_name = consultation.florist.first_name or "–§–ª–æ—Ä–∏—Å—Ç"
                partner_emoji = "üå∏"
            else:
                partner_name = consultation.client.first_name or "–ö–ª–∏–µ–Ω—Ç"
                partner_emoji = "üë§"
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É
            date_str = consultation.started_at.strftime("%d.%m.%Y")
            theme = consultation.theme or "–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫
            text_lines.append(
                f"üìÖ {date_str} | {partner_emoji} {partner_name}\n"
                f"üí¨ {theme}\n"
            )
            
            # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
            kb_rows.append([types.InlineKeyboardButton(
                text=f"{date_str} - {partner_name}: {theme[:20]}...",
                callback_data=f"view_consultation_{consultation.id}"
            )])
        
        kb_rows.append([types.InlineKeyboardButton(text=t(lang, "back_to_menu"), callback_data="main_menu")])
        kb = types.InlineKeyboardMarkup(inline_keyboard=kb_rows)
        
        text = "\n".join(text_lines)
        await callback.message.edit_text(text, reply_markup=kb, parse_mode="HTML")
        await callback.answer()

@router.callback_query(F.data.startswith("view_consultation_"))
async def view_consultation_archive(callback: types.CallbackQuery):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –∞—Ä—Ö–∏–≤–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏"""
    consultation_id = int(callback.data.split("_")[2])
    
    async for session in get_session():
        user, lang = await _get_user_and_lang(session, callback.from_user.id)
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é
        result = await session.execute(
            select(Consultation).where(Consultation.id == consultation_id)
        )
        consultation = result.scalars().first()
        
        if not consultation:
            await callback.answer("–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
        if consultation.client_id != user.id and consultation.florist_id != user.id:
            await callback.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏", show_alert=True)
            return
        
        # –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ - –≤ –±—É–¥—É—â–µ–º –∏–∑ –∞—Ä—Ö–∏–≤–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞
        if consultation.archive_id:
            from app.services.ai_archive_service import AIArchiveService
            ai_service = AIArchiveService(callback.bot)
            success = await ai_service.restore_consultation_from_archive(
                callback.message.chat.id, 
                consultation.archive_id
            )
        else:
            await callback.message.edit_text(
                "üìÅ –ê—Ä—Ö–∏–≤ —ç—Ç–æ–π –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω\n"
                "–í–æ–∑–º–æ–∂–Ω–æ, –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –±—ã–ª–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –¥–æ –≤–Ω–µ–¥—Ä–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏—è."
            )
        
        await callback.answer()

@router.callback_query(F.data.startswith("call_florist_"))
async def request_call_florist(callback: types.CallbackQuery):
    """–ó–∞–ø—Ä–æ—Å –∑–≤–æ–Ω–∫–∞ —Ñ–ª–æ—Ä–∏—Å—Ç—É"""
    consultation_id = int(callback.data.split("_")[2])
    
    async for session in get_session():
        user, lang = await _get_user_and_lang(session, callback.from_user.id)
        
        if not user:
            await callback.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é
        consultation_service = ConsultationService(session)
        consultation_data = await consultation_service.get_consultation_with_participants(consultation_id)
        
        if not consultation_data:
            await callback.answer("–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            return
        
        consultation = consultation_data['consultation']
        client = consultation_data['client']
        florist = consultation_data['florist']
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å —Ñ–ª–æ—Ä–∏—Å—Ç—É —Å –Ω–æ–º–µ—Ä–æ–º –∫–ª–∏–µ–Ω—Ç–∞
        client_phone = client.phone or "–ù–µ —É–∫–∞–∑–∞–Ω"
        call_request_text = t(lang, "call_request_received", name=client.first_name, phone=client_phone)
        
        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –Ω–∞–±–æ—Ä–∞ –Ω–æ–º–µ—Ä–∞ (—Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö)
        call_kb = types.InlineKeyboardMarkup(inline_keyboard=[
            [types.InlineKeyboardButton(text=f"üìû –ù–∞–±—Ä–∞—Ç—å {client_phone}", url=f"tel:{client_phone}")]
        ]) if client_phone != "–ù–µ —É–∫–∞–∑–∞–Ω" else None
        
        try:
            await callback.bot.send_message(
                int(florist.tg_id), 
                call_request_text, 
                reply_markup=call_kb
            )
            await callback.answer(t(lang, "call_request_sent"))
        except Exception as e:
            await callback.answer("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞", show_alert=True)
            print(f"Error sending call request: {e}")

@router.callback_query(F.data.startswith("respond_consultation_"))
async def florist_respond_consultation(callback: types.CallbackQuery, state: FSMContext):
    """–§–ª–æ—Ä–∏—Å—Ç –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é"""
    consultation_id = int(callback.data.split("_")[2])
    
    async for session in get_session():
        user, lang = await _get_user_and_lang(session, callback.from_user.id)
        consultation_service = ConsultationService(session)
        
        if not user or user.role not in [RoleEnum.florist, RoleEnum.owner]:
            await callback.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –∞–∫—Ç–∏–≤–Ω–∞ –∏ —Ñ–ª–æ—Ä–∏—Å—Ç —É—á–∞—Å—Ç–≤—É–µ—Ç
        consultation = await consultation_service.consultation_repo.get(consultation_id)
        if not consultation or consultation.florist_id != user.id:
            await callback.answer("–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            return
        
        if consultation.status != ConsultationStatusEnum.active:
            await callback.answer("–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞", show_alert=True)
            return
        
        # –ü–µ—Ä–µ–≤–æ–¥–∏–º —Ñ–ª–æ—Ä–∏—Å—Ç–∞ –≤ —Ä–µ–∂–∏–º —á–∞—Ç–∞
        await state.set_state(ConsultationStates.CHATTING)
        await state.update_data(consultation_id=consultation_id, client_id=consultation.client_id)
        
        kb = types.InlineKeyboardMarkup(inline_keyboard=[
            [types.InlineKeyboardButton(text="üîö –ó–∞–≤–µ—Ä—à–∏—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é", callback_data=f"end_consultation_{consultation_id}")]
        ])
        
        await callback.message.edit_text(
            "üí¨ –í—ã –ø–æ–¥–∫–ª—é—á–µ–Ω—ã –∫ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏! –ù–∞–ø–∏—à–∏—Ç–µ –æ—Ç–≤–µ—Ç –∫–ª–∏–µ–Ω—Ç—É:",
            reply_markup=kb
        )
        await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π —Ñ–ª–æ—Ä–∏—Å—Ç–∞ –≤ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ —É–±–∏—Ä–∞–µ–º - —Ç–µ–ø–µ—Ä—å —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –≤—ã—à–µ

@router.callback_query(F.data.startswith("rate_"))
async def rate_florist(callback: types.CallbackQuery):
    """–û—Ü–µ–Ω–∫–∞ —Ñ–ª–æ—Ä–∏—Å—Ç–∞"""
    parts = callback.data.split("_")
    consultation_id = int(parts[1])
    rating = int(parts[2])
    
    async for session in get_session():
        user, lang = await _get_user_and_lang(session, callback.from_user.id)
        consultation_service = ConsultationService(session)
        
        try:
            await consultation_service.rate_florist(consultation_id, user.id, rating)
            await session.commit()
            
            kb = types.InlineKeyboardMarkup(inline_keyboard=[
                [types.InlineKeyboardButton(text=t(lang, "back_to_menu"), callback_data="main_menu")]
            ])
            
            await callback.message.edit_text(t(lang, "rating_saved"), reply_markup=kb)
            await callback.answer()
            
        except ValidationError as e:
            await callback.answer(str(e), show_alert=True)

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
async def _notify_florist_about_consultation_request(bot, consultation, session):
    """üÜï –£–≤–µ–¥–æ–º–∏—Ç—å —Ñ–ª–æ—Ä–∏—Å—Ç–∞ –æ –ó–ê–ü–†–û–°–ï –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ (–Ω–µ –∞–∫—Ç–∏–≤–Ω–æ–π!)"""
    try:
        await session.refresh(consultation, ['client', 'florist'])
        client = consultation.client
        florist = consultation.florist
        
        text = (
            f"üå∏ –ó–∞–ø—Ä–æ—Å –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é!\n\n"
            f"üë§ –ö–ª–∏–µ–Ω—Ç: {client.first_name}\n"
            f"üì± –ó–∞–ø—Ä–æ—Å #{consultation.id}\n\n"
            f"üí° –ü—Ä–∏–º–∏—Ç–µ –∑–∞–ø—Ä–æ—Å —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é"
        )
        
        kb = types.InlineKeyboardMarkup(inline_keyboard=[
            [types.InlineKeyboardButton(text="‚úÖ –ü—Ä–∏–Ω—è—Ç—å", callback_data=f"accept_consultation_{consultation.id}")],
            [types.InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"decline_consultation_{consultation.id}")],
            [types.InlineKeyboardButton(text="üìû –ü–æ–∑–≤–æ–Ω–∏—Ç—å –∫–ª–∏–µ–Ω—Ç—É", callback_data=f"call_client_{consultation.id}")]
        ])
        
        await bot.send_message(int(florist.tg_id), text, reply_markup=kb)
        print(f"‚úÖ Consultation request sent to florist {florist.tg_id}")
    except Exception as e:
        print(f"‚ùå Error notifying florist: {e}")

async def _clear_consultation_chat(bot, chat_id: int, state: FSMContext):
    """–ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ —á–∞—Ç–∞ –æ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        data = await state.get_data()
        header_message_id = data.get('header_message_id')
        
        # –°–Ω–∞—á–∞–ª–∞ –æ—Ç–∫—Ä–µ–ø–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        if header_message_id:
            try:
                await bot.unpin_chat_message(chat_id, header_message_id)
            except:
                pass
        
        # –£–¥–∞–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 50 —Å–æ–æ–±—â–µ–Ω–∏–π (–≤–∫–ª—é—á–∞—è –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–µ)
        latest_message = await bot.send_message(chat_id, "üßπ –û—á–∏—Å—Ç–∫–∞ —á–∞—Ç–∞...")
        start_id = latest_message.message_id
        
        for i in range(50):  # –£–¥–∞–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 50 —Å–æ–æ–±—â–µ–Ω–∏–π
            try:
                await bot.delete_message(chat_id, start_id - i)
            except:
                continue  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è
                
    except Exception as e:
        print(f"Error clearing chat: {e}")


@router.callback_query(F.data.startswith("accept_consultation_"))
async def florist_accept_consultation(callback: types.CallbackQuery):
    """üÜï –§–ª–æ—Ä–∏—Å—Ç –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é"""
    consultation_id = int(callback.data.split("_")[2])
    
    async for session in get_session():
        user, lang = await _get_user_and_lang(session, callback.from_user.id)
        
        if not user or user.role not in [RoleEnum.florist, RoleEnum.owner]:
            await callback.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
            return
        
        consultation_service = ConsultationService(session)
        
        try:
            # –ü—Ä–∏–Ω–∏–º–∞–µ–º –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é (–º–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ active)
            consultation = await consultation_service.accept_consultation(consultation_id, user.id)
            
            # –ü–æ–ª—É—á–∞–µ–º –±—É—Ñ–µ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–ª–æ—Ä–∏—Å—Ç—É
            buffered_messages = await consultation_service.flush_buffer_to_active(consultation_id)
            
            await session.commit()
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞ —á—Ç–æ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –ø—Ä–∏–Ω—è—Ç–∞
            await session.refresh(consultation, ['client', 'florist'])
            client = consultation.client
            
            try:
                # 1. –ü–ï–†–í–´–ú –î–ï–õ–û–ú - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –±—É—Ñ–µ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Ñ–ª–æ—Ä–∏—Å—Ç—É
                if buffered_messages:
                    await callback.bot.send_message(
                        int(user.tg_id),
                        f"üì• –°–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞ {client.first_name} ({len(buffered_messages)} —à—Ç.):"
                    )
                    
                    for msg_data in buffered_messages:
                        if msg_data.get('photo_file_id'):
                            await callback.bot.send_photo(
                                int(user.tg_id),
                                photo=msg_data['photo_file_id'],
                                caption=msg_data.get('message_text', '')
                            )
                        elif msg_data.get('message_text'):
                            await callback.bot.send_message(
                                int(user.tg_id),
                                text=msg_data['message_text']
                            )
                
                # 2. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–ª–æ—Ä–∏—Å—Ç—É –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–µ–π
                florist_kb = types.InlineKeyboardMarkup(inline_keyboard=[
                    [
                        types.InlineKeyboardButton(text="üîö –ó–∞–≤–µ—Ä—à–∏—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é", callback_data=f"end_consultation_{consultation.id}"),
                        types.InlineKeyboardButton(text="üìû –ü–æ–∑–≤–æ–Ω–∏—Ç—å –∫–ª–∏–µ–Ω—Ç—É", callback_data=f"call_client_{consultation.id}")
                    ]
                ])
                
                await callback.bot.send_message(
                    int(user.tg_id),
                    f"üí¨ –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è —Å {client.first_name} –∞–∫—Ç–∏–≤–Ω–∞!\n\n–í—ã –º–æ–∂–µ—Ç–µ –æ–±—â–∞—Ç—å—Å—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏.",
                    reply_markup=florist_kb
                )
                
                # 3. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
                client_kb = types.InlineKeyboardMarkup(inline_keyboard=[
                    [
                        types.InlineKeyboardButton(text="üîö –ó–∞–≤–µ—Ä—à–∏—Ç—å", callback_data=f"end_consultation_{consultation.id}"),
                        types.InlineKeyboardButton(text="üìû –ü–æ–∑–≤–æ–Ω–∏—Ç—å", callback_data=f"call_florist_{consultation.id}")
                    ]
                ])
                
                await callback.bot.send_message(
                    int(client.tg_id),
                    f"‚úÖ –§–ª–æ—Ä–∏—Å—Ç {user.first_name} –ø—Ä–∏–Ω—è–ª –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é!\n\nüí¨ –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –æ–±—â–∞—Ç—å—Å—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏.",
                    reply_markup=client_kb
                )
                
            except Exception as e:
                print(f"Error notifying about accepted consultation: {e}")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Ñ–ª–æ—Ä–∏—Å—Ç–∞
            await callback.message.edit_text(
                f"‚úÖ –í—ã –ø—Ä–∏–Ω—è–ª–∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é —Å –∫–ª–∏–µ–Ω—Ç–æ–º {client.first_name}!\n\n–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –∞–∫—Ç–∏–≤–Ω–∞.",
                reply_markup=None
            )
            await callback.answer("–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –ø—Ä–∏–Ω—è—Ç–∞!")

            # –î–ª—è —Ñ–ª–æ—Ä–∏—Å—Ç–∞
            florist_key = StorageKey(
                bot_id=callback.bot.id,
                chat_id=int(user.tg_id),
                user_id=int(user.tg_id)
            )

            client_key = StorageKey(
                bot_id=callback.bot.id,
                chat_id=int(client.tg_id),
                user_id=int(client.tg_id)
            )

            storage = callback.message.bot.session.storage if hasattr(callback.message.bot, 'session') else None

            if storage:
                await storage.set_state(florist_key, ConsultationStates.CHATTING)
                await storage.set_state(client_key, ConsultationStates.CHATTING)
                await storage.set_data(florist_key, {'consultation_id': consultation.id})
                await storage.set_data(client_key, {'consultation_id': consultation.id})
                print(f"‚úÖ Both participants set to CHATTING state")
            else:
                print("‚ö†Ô∏è Could not access storage, using simpler approach")

            print(f"‚úÖ Both participants set to CHATTING state")
            
        except ValidationError as e:
            await callback.answer(str(e), show_alert=True)
        except Exception as e:
            print(f"Accept consultation error: {e}")
            await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)

@router.callback_query(F.data.startswith("decline_consultation_"))
async def florist_decline_consultation(callback: types.CallbackQuery):
    """üÜï –§–ª–æ—Ä–∏—Å—Ç –æ—Ç–∫–ª–æ–Ω—è–µ—Ç –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é"""
    consultation_id = int(callback.data.split("_")[2])
    
    async for session in get_session():
        user, lang = await _get_user_and_lang(session, callback.from_user.id)
        
        consultation_service = ConsultationService(session)
        
        try:
            consultation = await consultation_service.consultation_repo.get(consultation_id)
            if consultation and consultation.status == ConsultationStatusEnum.pending:
                # –ú–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ (–º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å)
                consultation.status = ConsultationStatusEnum.force_closed
                consultation.completed_at = datetime.utcnow()
                
                await session.commit()
                
                # –£–≤–µ–¥–æ–º–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞
                await session.refresh(consultation, ['client'])
                client = consultation.client
                
                try:
                    await callback.bot.send_message(
                        int(client.tg_id),
                        f"‚ùå –§–ª–æ—Ä–∏—Å—Ç {user.first_name} –Ω–µ –º–æ–∂–µ—Ç –ø—Ä–∏–Ω—è—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é —Å–µ–π—á–∞—Å.\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–≥–æ —Ñ–ª–æ—Ä–∏—Å—Ç–∞."
                    )
                except:
                    pass
                
                await callback.message.edit_text(
                    "‚ùå –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.",
                    reply_markup=None
                )
                await callback.answer("–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞")
            else:
                await callback.answer("–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è —É–∂–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞", show_alert=True)
                
        except Exception as e:
            print(f"Decline consultation error: {e}")
            await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)

@router.message(ConsultationStates.WAITING_RESPONSE)
async def handle_waiting_messages(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–∫–∞ —Ñ–ª–æ—Ä–∏—Å—Ç –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª (–±—É—Ñ–µ—Ä–∏–∑–∞—Ü–∏—è)"""
    data = await state.get_data()
    consultation_id = data.get('consultation_id')
    
    if not consultation_id:
        await message.answer("‚ùå –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        await state.clear()
        return
    
    async for session in get_session():
        user, lang = await _get_user_and_lang(session, message.from_user.id)
        consultation_service = ConsultationService(session)
        
        try:
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –±—É—Ñ–µ—Ä
            await consultation_service.add_buffered_message(
                consultation_id, user.id, message.text, 
                message.photo[-1].file_id if message.photo else None
            )

        except Exception as e:
            print(f"Buffer message error: {e}")
            await message.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è")


@router.callback_query(F.data.startswith("call_florist_"))
async def call_florist(callback: types.CallbackQuery):
    """–ö–ª–∏–µ–Ω—Ç –ø—Ä–æ—Å–∏—Ç –ø–æ–∑–≤–æ–Ω–∏—Ç—å —Ñ–ª–æ—Ä–∏—Å—Ç—É"""
    consultation_id = int(callback.data.split("_")[2])
    
    async for session in get_session():
        user, lang = await _get_user_and_lang(session, callback.from_user.id)
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é
        from sqlalchemy import select
        result = await session.execute(
            select(Consultation).where(Consultation.id == consultation_id)
        )
        consultation = result.scalars().first()
        
        if not consultation:
            await callback.answer("–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            return
        
        await session.refresh(consultation, ['client', 'florist'])
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å —Ñ–ª–æ—Ä–∏—Å—Ç—É
        client_phone = user.phone or "–ù–µ —É–∫–∞–∑–∞–Ω"
        client_name = user.first_name or "–ö–ª–∏–µ–Ω—Ç"
        
        try:
            # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø—Ä—è–º–æ–≥–æ –∑–≤–æ–Ω–∫–∞
            call_kb = types.InlineKeyboardMarkup(inline_keyboard=[
                [types.InlineKeyboardButton(text=f"üìû –ü–æ–∑–≤–æ–Ω–∏—Ç—å {client_phone}", url=f"tel:{client_phone}")]
            ]) if client_phone != "–ù–µ —É–∫–∞–∑–∞–Ω" else None
            
            await callback.bot.send_message(
                int(consultation.florist.tg_id),
                f"üìû –ö–ª–∏–µ–Ω—Ç {client_name} –ø—Ä–æ—Å–∏—Ç –æ–±—Ä–∞—Ç–Ω—ã–π –∑–≤–æ–Ω–æ–∫\n\n"
                f"üì± –ù–æ–º–µ—Ä: {client_phone}",
                reply_markup=call_kb
            )
            
            await callback.answer("‚úÖ –ó–∞–ø—Ä–æ—Å –Ω–∞ –∑–≤–æ–Ω–æ–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —Ñ–ª–æ—Ä–∏—Å—Ç—É")
            
        except Exception as e:
            print(f"Call request error: {e}")
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞", show_alert=True)

@router.callback_query(F.data.startswith("call_client_"))
async def call_client(callback: types.CallbackQuery):
    """–§–ª–æ—Ä–∏—Å—Ç –ø—Ä–æ—Å–∏—Ç –ø–æ–∑–≤–æ–Ω–∏—Ç—å –∫–ª–∏–µ–Ω—Ç—É"""
    consultation_id = int(callback.data.split("_")[2])
    
    async for session in get_session():
        user, lang = await _get_user_and_lang(session, callback.from_user.id)
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é
        from sqlalchemy import select
        result = await session.execute(
            select(Consultation).where(Consultation.id == consultation_id)
        )
        consultation = result.scalars().first()
        
        if not consultation:
            await callback.answer("–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            return
        
        await session.refresh(consultation, ['client', 'florist'])
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫–ª–∏–µ–Ω—Ç—É
        florist_phone = user.phone or "–ù–µ —É–∫–∞–∑–∞–Ω"
        florist_name = user.first_name or "–§–ª–æ—Ä–∏—Å—Ç"
        
        try:
            # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø—Ä—è–º–æ–≥–æ –∑–≤–æ–Ω–∫–∞
            call_kb = types.InlineKeyboardMarkup(inline_keyboard=[
                [types.InlineKeyboardButton(text=f"üìû –ü–æ–∑–≤–æ–Ω–∏—Ç—å {florist_phone}", url=f"tel:{florist_phone}")]
            ]) if florist_phone != "–ù–µ —É–∫–∞–∑–∞–Ω" else None
            
            await callback.bot.send_message(
                int(consultation.client.tg_id),
                f"üìû –§–ª–æ—Ä–∏—Å—Ç {florist_name} —Ö–æ—á–µ—Ç —Å –≤–∞–º–∏ —Å–≤—è–∑–∞—Ç—å—Å—è\n\n"
                f"üì± –ù–æ–º–µ—Ä: {florist_phone}",
                reply_markup=call_kb
            )
            
            await callback.answer("‚úÖ –ó–∞–ø—Ä–æ—Å –Ω–∞ –∑–≤–æ–Ω–æ–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∫–ª–∏–µ–Ω—Ç—É")
            
        except Exception as e:
            print(f"Call request error: {e}")
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞", show_alert=True)