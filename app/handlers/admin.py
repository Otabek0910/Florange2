from aiogram import Router, types, F

from app.database import get_session
from app.services import UserService, NotificationService
from app.repositories import SettingsRepository
from app.models import RoleEnum, RoleRequest, RequestStatusEnum, RequestedRoleEnum
from app.translate import t
from app.exceptions import UserNotFoundError

router = Router()

async def _get_user_and_check_admin(session, tg_id: int):
    """–ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∞"""
    user_service = UserService(session)
    try:
        user = await user_service.get_user_by_tg_id(str(tg_id))
        is_admin = user.role == RoleEnum.owner
        return user, is_admin
    except UserNotFoundError:
        return None, False

@router.callback_query(F.data == "manage_registration")
async def manage_registration_settings(callback: types.CallbackQuery):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
    async for session in get_session():
        user, is_admin = await _get_user_and_check_admin(session, callback.from_user.id)
        
        if not is_admin:
            await callback.answer(t(user.lang if user else "ru", "access_denied"), show_alert=True)
            return
        
        lang = user.lang or "ru"
        settings_repo = SettingsRepository(session)
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        florist_open = await settings_repo.get_bool_value("florist_registration_open", False)
        owner_open = await settings_repo.get_bool_value("owner_registration_open", False)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∏ –∫–Ω–æ–ø–∫–∏
        text = (
            f"{t(lang, 'settings_title')}\n\n"
            f"üå∏ {t(lang, 'florist_registration')}: {t(lang, 'status_open') if florist_open else t(lang, 'status_closed')}\n"
            f"üëë {t(lang, 'owner_registration')}: {t(lang, 'status_open') if owner_open else t(lang, 'status_closed')}"
        )
        
        kb = types.InlineKeyboardMarkup(inline_keyboard=[
            [types.InlineKeyboardButton(
                text=f"üîÑ {t(lang, 'toggle_florist_reg')}", 
                callback_data="toggle_florist"
            )],
            [types.InlineKeyboardButton(
                text=f"üîÑ {t(lang, 'toggle_owner_reg')}", 
                callback_data="toggle_owner"
            )],
            [types.InlineKeyboardButton(
                text=t(lang, "menu_pending_requests"), 
                callback_data="pending_requests"
            )],
            [types.InlineKeyboardButton(
                text=t(lang, "back_to_menu"), 
                callback_data="main_menu"
            )]
        ])
        
        await callback.message.edit_text(text, reply_markup=kb)
        await callback.answer()

@router.callback_query(F.data == "toggle_florist")
async def toggle_florist_registration(callback: types.CallbackQuery):
    """–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é —Ñ–ª–æ—Ä–∏—Å—Ç–æ–≤"""
    async for session in get_session():
        user, is_admin = await _get_user_and_check_admin(session, callback.from_user.id)
        
        if not is_admin:
            await callback.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
            return
        
        lang = user.lang or "ru"
        settings_repo = SettingsRepository(session)
        
        # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É
        current = await settings_repo.get_bool_value("florist_registration_open", False)
        new_value = "true" if not current else "false"
        await settings_repo.set_value("florist_registration_open", new_value)
        await session.commit()
        
        await callback.answer(f"‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ñ–ª–æ—Ä–∏—Å—Ç–æ–≤ {'–æ—Ç–∫—Ä—ã—Ç–∞' if not current else '–∑–∞–∫—Ä—ã—Ç–∞'}")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ–Ω—é
        await manage_registration_settings(callback)

@router.callback_query(F.data == "toggle_owner")
async def toggle_owner_registration(callback: types.CallbackQuery):
    """–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤"""
    async for session in get_session():
        user, is_admin = await _get_user_and_check_admin(session, callback.from_user.id)
        
        if not is_admin:
            await callback.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
            return
        
        lang = user.lang or "ru"
        settings_repo = SettingsRepository(session)
        
        # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É
        current = await settings_repo.get_bool_value("owner_registration_open", False)
        new_value = "true" if not current else "false"
        await settings_repo.set_value("owner_registration_open", new_value)
        await session.commit()
        
        await callback.answer(f"‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤ {'–æ—Ç–∫—Ä—ã—Ç–∞' if not current else '–∑–∞–∫—Ä—ã—Ç–∞'}")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ–Ω—é
        await manage_registration_settings(callback)

@router.callback_query(F.data == "pending_requests")
async def show_pending_requests(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –æ–∂–∏–¥–∞—é—â–∏–µ –∑–∞—è–≤–∫–∏"""
    async for session in get_session():
        user, is_admin = await _get_user_and_check_admin(session, callback.from_user.id)
        
        if not is_admin:
            await callback.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
            return
        
        lang = user.lang or "ru"
        user_service = UserService(session)
        
        # –ü–æ–ª—É—á–∞–µ–º –æ–∂–∏–¥–∞—é—â–∏–µ –∑–∞—è–≤–∫–∏
        requests = await user_service.user_repo.get_pending_requests()
        
        if not requests:
            kb = types.InlineKeyboardMarkup(inline_keyboard=[
                [types.InlineKeyboardButton(text=t(lang, "back_to_menu"), callback_data="manage_registration")]
            ])
            await callback.message.edit_text(t(lang, "no_pending_requests"), reply_markup=kb)
            await callback.answer()
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫
        lines = [t(lang, "pending_requests_title"), ""]
        
        for req in requests[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –∑–∞—è–≤–æ–∫
            request_user = await user_service.user_repo.get(req.user_id)
            role_text = t(lang, f"role_{req.requested_role.value}")
            date_str = req.created_at.strftime("%d.%m.%Y %H:%M") if req.created_at else ""
            
            lines.append(
                f"üÜî #{req.id} | {role_text}\n"
                f"üë§ {request_user.first_name if request_user else 'N/A'}\n"
                f"üí¨ {req.reason[:50]}{'...' if len(req.reason) > 50 else ''}\n"
                f"üìÖ {date_str}\n"
            )
        
        text = "\n".join(lines)
        
        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–∞–º–∏
        buttons = []
        for req in requests[:3]:  # –ü–µ—Ä–≤—ã–µ 3 –∑–∞—è–≤–∫–∏
            request_user = await user_service.user_repo.get(req.user_id)
            role_emoji = "üå∏" if req.requested_role == RequestedRoleEnum.florist else "üëë"
            buttons.append([
                types.InlineKeyboardButton(
                    text=f"{role_emoji} {request_user.first_name if request_user else 'N/A'} #{req.id}",
                    callback_data=f"view_req_{req.id}"
                )
            ])
        
        buttons.append([types.InlineKeyboardButton(
            text="‚Ü©Ô∏è –ù–∞–∑–∞–¥",
            callback_data="manage_registration"
        )])
        
        kb = types.InlineKeyboardMarkup(inline_keyboard=buttons)
        await callback.message.edit_text(text, reply_markup=kb)
        await callback.answer()

@router.callback_query(F.data.startswith("view_req_"))
async def view_request_details(callback: types.CallbackQuery):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –¥–µ—Ç–∞–ª–µ–π –∑–∞—è–≤–∫–∏"""
    request_id = int(callback.data.split("_")[2])
    
    async for session in get_session():
        user, is_admin = await _get_user_and_check_admin(session, callback.from_user.id)
        
        if not is_admin:
            await callback.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
            return
        
        lang = user.lang or "ru"
        user_service = UserService(session)
        
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞—è–≤–∫—É
        from sqlalchemy import select
        result = await session.execute(select(RoleRequest).where(RoleRequest.id == request_id))
        request = result.scalars().first()
        
        if not request:
            await callback.answer(t(lang, "request_not_found"), show_alert=True)
            return
        
        request_user = await user_service.user_repo.get(request.user_id)
        role_text = t(lang, f"role_{request.requested_role.value}")
        date_str = request.created_at.strftime("%d.%m.%Y %H:%M") if request.created_at else ""
        
        text = (
            f"üìã –ó–∞—è–≤–∫–∞ #{request.id}\n\n"
            f"üë§ {request_user.first_name if request_user else 'N/A'} (ID: {request_user.tg_id if request_user else 'N/A'})\n"
            f"üéØ –†–æ–ª—å: {role_text}\n"
            f"üí¨ –ü—Ä–∏—á–∏–Ω–∞: {request.reason}\n"
            f"üìÖ –î–∞—Ç–∞: {date_str}"
        )
        
        if request.status == RequestStatusEnum.pending:
            kb = types.InlineKeyboardMarkup(inline_keyboard=[
                [types.InlineKeyboardButton(text="‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", callback_data=f"approve_req_{request.id}")],
                [types.InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_req_{request.id}")],
                [types.InlineKeyboardButton(text="‚Ü©Ô∏è –ö —Å–ø–∏—Å–∫—É", callback_data="pending_requests")]
            ])
        else:
            kb = types.InlineKeyboardMarkup(inline_keyboard=[
                [types.InlineKeyboardButton(text="‚Ü©Ô∏è –ö —Å–ø–∏—Å–∫—É", callback_data="pending_requests")]
            ])
        
        await callback.message.edit_text(text, reply_markup=kb)
        await callback.answer()

@router.callback_query(F.data.startswith("approve_req_"))
async def approve_request(callback: types.CallbackQuery):
    """–û–¥–æ–±—Ä–∏—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ —Ä–æ–ª—å"""
    request_id = int(callback.data.split("_")[2])
    
    async for session in get_session():
        user, is_admin = await _get_user_and_check_admin(session, callback.from_user.id)
        
        if not is_admin:
            await callback.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
            return
        
        lang = user.lang or "ru"
        user_service = UserService(session)
        notification_service = NotificationService(callback.bot)
        
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞—è–≤–∫—É
        from sqlalchemy import select, update
        result = await session.execute(select(RoleRequest).where(RoleRequest.id == request_id))
        request = result.scalars().first()
        
        if not request or request.status != RequestStatusEnum.pending:
            await callback.answer(t(lang, "request_not_found"), show_alert=True)
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞—è–≤–∫–∏
        request_user = await user_service.user_repo.get(request.user_id)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        new_role = RoleEnum.florist if request.requested_role == RequestedRoleEnum.florist else RoleEnum.owner
        request_user.role = new_role
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏
        request.status = RequestStatusEnum.approved
        request.approved_by = user.id
        
        await session.commit()
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        role_text = t(request_user.lang or "ru", f"role_{request.requested_role.value}")
        try:
            await callback.bot.send_message(
                chat_id=int(request_user.tg_id),
                text=t(request_user.lang or "ru", "role_approved", role=role_text)
            )
        except:
            pass  # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await callback.message.edit_text(
            callback.message.text + f"\n\n‚úÖ –û–¥–æ–±—Ä–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º {user.first_name}",
            reply_markup=None
        )
        
        await callback.answer(t(lang, "request_approved"))

@router.callback_query(F.data.startswith("reject_req_"))
async def reject_request(callback: types.CallbackQuery):
    """–û—Ç–∫–ª–æ–Ω–∏—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ —Ä–æ–ª—å"""
    request_id = int(callback.data.split("_")[2])
    
    async for session in get_session():
        user, is_admin = await _get_user_and_check_admin(session, callback.from_user.id)
        
        if not is_admin:
            await callback.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
            return
        
        lang = user.lang or "ru"
        user_service = UserService(session)
        
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞—è–≤–∫—É
        from sqlalchemy import select
        result = await session.execute(select(RoleRequest).where(RoleRequest.id == request_id))
        request = result.scalars().first()
        
        if not request or request.status != RequestStatusEnum.pending:
            await callback.answer(t(lang, "request_not_found"), show_alert=True)
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞—è–≤–∫–∏
        request_user = await user_service.user_repo.get(request.user_id)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏
        request.status = RequestStatusEnum.rejected
        request.approved_by = user.id
        
        await session.commit()
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        role_text = t(request_user.lang or "ru", f"role_{request.requested_role.value}")
        try:
            await callback.bot.send_message(
                chat_id=int(request_user.tg_id),
                text=t(request_user.lang or "ru", "role_rejected", role=role_text)
            )
        except:
            pass
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await callback.message.edit_text(
            callback.message.text + f"\n\n‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º {user.first_name}",
            reply_markup=None
        )
        
        await callback.answer(t(lang, "request_rejected"))