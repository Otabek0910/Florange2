from aiogram import Router, types, F

from app.database.database import get_session
from app.services import UserService, NotificationService
from app.repositories import SettingsRepository
from app.models import (
    RoleEnum, 
    RoleRequest, 
    RequestStatusEnum, 
    RequestedRoleEnum,
    User  # –î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—Ä–∏ –æ–¥–æ–±—Ä–µ–Ω–∏–∏
)
from app.translate import t
from app.exceptions import UserNotFoundError

import logging
from datetime import datetime
from app.translate import t
from app.models import User, RoleEnum, RequestedRoleEnum

router = Router()

async def _get_user_and_check_admin(session, tg_id: int):
    """–ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∞"""
    user_service = UserService(session)
    try:
        user = await user_service.get_user_by_tg_id(str(tg_id))
        is_admin = user.role == RoleEnum.owner
        return user, is_admin
    except UserNotFoundError:
        return None, False

@router.callback_query(F.data == "manage_registration")
async def manage_registration_settings(callback: types.CallbackQuery):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
    async for session in get_session():
        user, is_admin = await _get_user_and_check_admin(session, callback.from_user.id)
        
        if not is_admin:
            await callback.answer(t(user.lang if user else "ru", "access_denied"), show_alert=True)
            return
        
        lang = user.lang or "ru"
        settings_repo = SettingsRepository(session)
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        florist_open = await settings_repo.get_bool_value("florist_registration_open", False)
        owner_open = await settings_repo.get_bool_value("owner_registration_open", False)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∏ –∫–Ω–æ–ø–∫–∏
        text = (
            f"{t(lang, 'settings_title')}\n\n"
            f"üå∏ {t(lang, 'florist_registration')}: {t(lang, 'status_open') if florist_open else t(lang, 'status_closed')}\n"
            f"üëë {t(lang, 'owner_registration')}: {t(lang, 'status_open') if owner_open else t(lang, 'status_closed')}"
        )
        
        kb = types.InlineKeyboardMarkup(inline_keyboard=[
            [types.InlineKeyboardButton(
                text=f"üîÑ {t(lang, 'toggle_florist_reg')}", 
                callback_data="toggle_florist"
            )],
            [types.InlineKeyboardButton(
                text=f"üîÑ {t(lang, 'toggle_owner_reg')}", 
                callback_data="toggle_owner"
            )],
            [types.InlineKeyboardButton(
                text=t(lang, "menu_pending_requests"), 
                callback_data="pending_requests"
            )],
            [types.InlineKeyboardButton(
                text=t(lang, "back_to_menu"), 
                callback_data="main_menu"
            )]
        ])
        
        await callback.message.edit_text(text, reply_markup=kb)
        await callback.answer()

@router.callback_query(F.data == "toggle_florist")
async def toggle_florist_registration(callback: types.CallbackQuery):
    """–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é —Ñ–ª–æ—Ä–∏—Å—Ç–æ–≤"""
    async for session in get_session():
        user, is_admin = await _get_user_and_check_admin(session, callback.from_user.id)
        
        if not is_admin:
            await callback.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
            return
        
        lang = user.lang or "ru"
        settings_repo = SettingsRepository(session)
        
        # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É
        current = await settings_repo.get_bool_value("florist_registration_open", False)
        new_value = "true" if not current else "false"
        await settings_repo.set_value("florist_registration_open", new_value)
        await session.commit()
        
        await callback.answer(f"‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ñ–ª–æ—Ä–∏—Å—Ç–æ–≤ {'–æ—Ç–∫—Ä—ã—Ç–∞' if not current else '–∑–∞–∫—Ä—ã—Ç–∞'}")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ–Ω—é
        await manage_registration_settings(callback)

@router.callback_query(F.data == "toggle_owner")
async def toggle_owner_registration(callback: types.CallbackQuery):
    """–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤"""
    async for session in get_session():
        user, is_admin = await _get_user_and_check_admin(session, callback.from_user.id)
        
        if not is_admin:
            await callback.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
            return
        
        lang = user.lang or "ru"
        settings_repo = SettingsRepository(session)
        
        # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É
        current = await settings_repo.get_bool_value("owner_registration_open", False)
        new_value = "true" if not current else "false"
        await settings_repo.set_value("owner_registration_open", new_value)
        await session.commit()
        
        await callback.answer(f"‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤ {'–æ—Ç–∫—Ä—ã—Ç–∞' if not current else '–∑–∞–∫—Ä—ã—Ç–∞'}")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ–Ω—é
        await manage_registration_settings(callback)

@router.callback_query(F.data == "pending_requests")
async def show_pending_requests(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –æ–∂–∏–¥–∞—é—â–∏–µ –∑–∞—è–≤–∫–∏"""
    async for session in get_session():
        user, is_admin = await _get_user_and_check_admin(session, callback.from_user.id)
        
        if not is_admin:
            await callback.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
            return
        
        lang = user.lang or "ru"
        
        # –ü–æ–ª—É—á–∞–µ–º –æ–∂–∏–¥–∞—é—â–∏–µ –∑–∞—è–≤–∫–∏
        from sqlalchemy import select
        result = await session.execute(
            select(RoleRequest).where(RoleRequest.status == RequestStatusEnum.pending)
        )
        requests = result.scalars().all()
        
        if not requests:
            kb = types.InlineKeyboardMarkup(inline_keyboard=[
                [types.InlineKeyboardButton(text=t(lang, "back_to_menu"), callback_data="manage_registration")]
            ])
            await callback.message.edit_text(t(lang, "no_pending_requests"), reply_markup=kb)
            await callback.answer()
            return
        
        # –ü–µ—Ä–µ–≤–æ–¥—ã —Ä–æ–ª–µ–π
        role_names = {
            "florist": {"ru": "üå∏ –§–ª–æ—Ä–∏—Å—Ç", "uz": "üå∏ Florist"},
            "owner": {"ru": "üëë –í–ª–∞–¥–µ–ª–µ—Ü", "uz": "üëë Egasi"}
        }
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫
        lines = [t(lang, "pending_requests_title"), ""]
        
        for req in requests[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –∑–∞—è–≤–æ–∫
            role_text = role_names.get(req.requested_role.value, {}).get(lang, req.requested_role.value)
            date_str = req.created_at.strftime("%d.%m.%Y %H:%M") if req.created_at else ""
            
            # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            try:
                user_data = eval(req.user_data)
                full_name = f"{user_data.get('first_name', '')} {user_data.get('last_name', '')}".strip()
                phone = user_data.get('phone', '–ù–µ —É–∫–∞–∑–∞–Ω')
            except:
                full_name = "–û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö"
                phone = "–ù–µ —É–∫–∞–∑–∞–Ω"
            
            lines.append(
                f"üÜî #{req.id} | {role_text}\n"
                f"üë§ {full_name}\n"
                f"üìû {phone}\n"
                f"üìÖ {date_str}\n"
            )
        
        text = "\n".join(lines)
        
        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–∞–º–∏
        buttons = []
        for req in requests[:3]:  # –ü–µ—Ä–≤—ã–µ 3 –∑–∞—è–≤–∫–∏
            try:
                user_data = eval(req.user_data)
                display_name = user_data.get('first_name', '–ë–µ–∑ –∏–º–µ–Ω–∏')
            except:
                display_name = "N/A"
            
            role_emoji = "üå∏" if req.requested_role == RequestedRoleEnum.florist else "üëë"
            buttons.append([
                types.InlineKeyboardButton(
                    text=f"{role_emoji} {display_name} #{req.id}",
                    callback_data=f"view_req_{req.id}"
                )
            ])
        
        buttons.append([types.InlineKeyboardButton(
            text="‚Ü©Ô∏è –ù–∞–∑–∞–¥",
            callback_data="manage_registration"
        )])
        
        kb = types.InlineKeyboardMarkup(inline_keyboard=buttons)
        await callback.message.edit_text(text, reply_markup=kb)
        await callback.answer()

@router.callback_query(F.data.startswith("view_req_"))
async def view_request_details(callback: types.CallbackQuery):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –¥–µ—Ç–∞–ª–µ–π –∑–∞—è–≤–∫–∏"""
    request_id = int(callback.data.split("_")[2])
    
    async for session in get_session():
        user, is_admin = await _get_user_and_check_admin(session, callback.from_user.id)
        
        if not is_admin:
            await callback.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
            return
        
        lang = user.lang or "ru"
        
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞—è–≤–∫—É
        from sqlalchemy import select
        result = await session.execute(select(RoleRequest).where(RoleRequest.id == request_id))
        request = result.scalars().first()
        
        if not request:
            await callback.answer(t(lang, "request_not_found"), show_alert=True)
            return
        
        # –ü–µ—Ä–µ–≤–æ–¥—ã —Ä–æ–ª–µ–π
        role_names = {
            "florist": {"ru": "–§–ª–æ—Ä–∏—Å—Ç", "uz": "Florist"},
            "owner": {"ru": "–í–ª–∞–¥–µ–ª–µ—Ü", "uz": "Egasi"}
        }
        
        role_text = role_names.get(request.requested_role.value, {}).get(lang, request.requested_role.value)
        date_str = request.created_at.strftime("%d.%m.%Y %H:%M") if request.created_at else ""
        
        # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        try:
            user_data = eval(request.user_data)
            full_name = f"{user_data.get('first_name', '')} {user_data.get('last_name', '')}".strip()
            phone = user_data.get('phone', '–ù–µ —É–∫–∞–∑–∞–Ω')
        except:
            full_name = "–û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö"
            phone = "–ù–µ —É–∫–∞–∑–∞–Ω"
        
        text = (
            f"üìã –ó–∞—è–≤–∫–∞ #{request.id}\n\n"
            f"üë§ {full_name}\n"
            f"üìû {phone}\n"
            f"üÜî Telegram ID: {request.user_tg_id}\n"
            f"üéØ –†–æ–ª—å: {role_text}\n"
            f"üìÖ –î–∞—Ç–∞: {date_str}"
        )
        
        if request.status == RequestStatusEnum.pending:
            kb = types.InlineKeyboardMarkup(inline_keyboard=[
                [types.InlineKeyboardButton(text="‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", callback_data=f"approve_req_{request.id}")],
                [types.InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_req_{request.id}")],
                [types.InlineKeyboardButton(text="‚Ü©Ô∏è –ö —Å–ø–∏—Å–∫—É", callback_data="pending_requests")]
            ])
        else:
            kb = types.InlineKeyboardMarkup(inline_keyboard=[
                [types.InlineKeyboardButton(text="‚Ü©Ô∏è –ö —Å–ø–∏—Å–∫—É", callback_data="pending_requests")]
            ])
        
        await callback.message.edit_text(text, reply_markup=kb)
        await callback.answer()
        
@router.callback_query(F.data.startswith("approve_req_"))
async def approve_request(callback: types.CallbackQuery):
    """–û–¥–æ–±—Ä–∏—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ —Ä–æ–ª—å"""
    try:
        request_id = int(callback.data.split("_")[2])
    except (IndexError, ValueError):
        await callback.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã", show_alert=True)
        return
    
    async for session in get_session():
        user, is_admin = await _get_user_and_check_admin(session, callback.from_user.id)
        
        if not is_admin:
            await callback.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
            return
        
        lang = user.lang or "ru"
        
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞—è–≤–∫—É
        from sqlalchemy import select
        result = await session.execute(select(RoleRequest).where(RoleRequest.id == request_id))
        request = result.scalars().first()
        
        if not request or request.status != RequestStatusEnum.pending:
            await callback.answer(t(lang, "request_not_found"), show_alert=True)
            return
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–µ–ª–µ–≤—É—é —Ä–æ–ª—å
        target_role = RoleEnum.florist if request.requested_role == RequestedRoleEnum.florist else RoleEnum.owner
        
        try:
            # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
            from app.repositories import UserRepository
            user_repo = UserRepository(session)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            existing_user = None
            try:
                from app.services import UserService
                user_service = UserService(session)
                existing_user = await user_service.get_user_by_tg_id(request.user_tg_id)
            except:
                pass
            
            if existing_user:
                # –û–±–Ω–æ–≤–ª—è–µ–º —Ä–æ–ª—å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                existing_user.role = target_role
                if not existing_user.first_name and request.first_name:
                    existing_user.first_name = request.first_name
                if not existing_user.last_name and request.last_name:
                    existing_user.last_name = request.last_name
                if not existing_user.phone and request.phone:
                    existing_user.phone = request.phone
                created_user = existing_user
            else:
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                new_user = User(
                    tg_id=request.user_tg_id,
                    first_name=request.first_name or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ",
                    last_name=request.last_name,
                    phone=request.phone,
                    lang=request.lang or "ru",
                    role=target_role
                )
                created_user = await user_repo.create(new_user)
            
            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å —Ñ–ª–æ—Ä–∏—Å—Ç–∞ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            if target_role == RoleEnum.florist:
                try:
                    from app.services import FloristService
                    florist_service = FloristService(session)
                    profile = await florist_service.get_or_create_profile(created_user.id)
                    
                    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –∫–∞–∫ –ø–æ—Å–ª–µ–¥–Ω—é—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
                    from datetime import datetime
                    profile.last_seen = datetime.utcnow()
                    profile.is_active = True
                    
                    await session.flush()
                    print(f"‚úÖ Created florist profile for user {created_user.id}")
                except Exception as e:
                    print(f"‚ùå Florist profile creation error: {e}")
                        
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏
            request.status = RequestStatusEnum.approved
            request.approved_by = user.id
            
            await session.commit()
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            role_name = "—Ñ–ª–æ—Ä–∏—Å—Ç" if target_role == RoleEnum.florist else "–≤–ª–∞–¥–µ–ª–µ—Ü"
            try:
                await callback.bot.send_message(
                    chat_id=int(request.user_tg_id),
                    text=f"üéâ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ —Ä–æ–ª—å '{role_name}' –æ–¥–æ–±—Ä–µ–Ω–∞!\n\n–¢–µ–ø–µ—Ä—å –≤–∞–º –¥–æ—Å—Ç—É–ø–Ω—ã –Ω–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏. –ù–∞–∂–º–∏—Ç–µ /start –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–µ–Ω—é."
                )
            except Exception as e:
                print(f"User notification error: {e}")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞
            await callback.message.edit_text(
                f"‚úÖ <b>–ó–∞—è–≤–∫–∞ #{request_id} –û–î–û–ë–†–ï–ù–ê</b>\n\n"
                f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {request.first_name or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}\n"
                f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {request.phone or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
                f"üéØ –†–æ–ª—å: {role_name}\n"
                f"‚úÖ –û–¥–æ–±—Ä–∏–ª: {user.first_name}\n"
                f"üìÖ –í—Ä–µ–º—è: {datetime.now().strftime('%d.%m.%Y %H:%M')}",
                parse_mode="HTML"
            )
            
            await callback.answer("‚úÖ –ó–∞—è–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞")
            
        except Exception as e:
            print(f"Approval error: {e}")
            await callback.answer(f"‚ùå –û—à–∏–±–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∏—è: {str(e)}", show_alert=True)

@router.callback_query(F.data.startswith("reject_req_"))
async def reject_request(callback: types.CallbackQuery):
    """–û—Ç–∫–ª–æ–Ω–∏—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ —Ä–æ–ª—å"""
    request_id = int(callback.data.split("_")[2])
    
    async for session in get_session():
        user, is_admin = await _get_user_and_check_admin(session, callback.from_user.id)
        
        if not is_admin:
            await callback.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
            return
        
        lang = user.lang or "ru"
        
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞—è–≤–∫—É
        from sqlalchemy import select
        result = await session.execute(select(RoleRequest).where(RoleRequest.id == request_id))
        request = result.scalars().first()
        
        if not request or request.status != RequestStatusEnum.pending:
            await callback.answer(t(lang, "request_not_found"), show_alert=True)
            return
        
        # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        try:
            user_data = eval(request.user_data)
        except:
            user_data = {"tg_id": request.user_tg_id, "lang": "ru"}
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏
        request.status = RequestStatusEnum.rejected
        request.approved_by = user.id
        
        await session.commit()
        
        # –í–ê–ñ–ù–û: –ü—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –ù–ï —Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–æ–æ–±—â–µ!
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Å—Ç–∞–Ω–µ—Ç—Å—è –Ω–µ–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–± –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏
        role_text = t(user_data.get("lang", "ru"), f"role_{request.requested_role.value}")
        try:
            await callback.bot.send_message(
                chat_id=int(user_data["tg_id"]),
                text=t(user_data.get("lang", "ru"), "role_rejected", role=role_text) + 
                     f"\n\n{t(user_data.get('lang', 'ru'), 'can_register_as_client')}"
            )
        except:
            pass
        
        await callback.message.edit_text(
            callback.message.text + f"\n\n‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º {user.first_name}",
            reply_markup=None
        )
        
        await callback.answer(t(lang, "request_rejected"))


# 2. –î–û–ë–ê–í–ò–¢–¨ –≤ app/handlers/admin.py - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ–ª–æ—Ä–∏—Å—Ç–∞–º–∏

@router.callback_query(F.data == "manage_florists")
async def show_florists_management(callback: types.CallbackQuery):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ–ª–æ—Ä–∏—Å—Ç–∞–º–∏"""
    async for session in get_session():
        user, is_admin = await _get_user_and_check_admin(session, callback.from_user.id)
        
        if not is_admin:
            await callback.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
            return
        
        lang = user.lang or "ru"
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö —Ñ–ª–æ—Ä–∏—Å—Ç–æ–≤
        from app.services import UserService
        user_service = UserService(session)
        
        florists = await user_service.user_repo.get_by_role(RoleEnum.florist)
        owners = await user_service.user_repo.get_by_role(RoleEnum.owner)
        
        if not florists and not owners:
            kb = types.InlineKeyboardMarkup(inline_keyboard=[
                [types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")]
            ])
            await callback.message.edit_text(
                "üë• –§–ª–æ—Ä–∏—Å—Ç—ã –∏ –≤–ª–∞–¥–µ–ª—å—Ü—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã",
                reply_markup=kb
            )
            await callback.answer()
            return
        
        lines = ["üë• <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–ª–æ–º:</b>\n"]
        
        if florists:
            lines.append("üå∏ <b>–§–ª–æ—Ä–∏—Å—Ç—ã:</b>")
            for florist in florists:
                lines.append(
                    f"‚Ä¢ {florist.first_name} {florist.last_name or ''}\n"
                    f"  üìû {florist.phone or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
                    f"  üÜî ID: {florist.id}"
                )
            lines.append("")
        
        if owners:
            lines.append("üëë <b>–í–ª–∞–¥–µ–ª—å—Ü—ã:</b>")
            for owner in owners:
                if owner.id != user.id:  # –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–µ–±—è
                    lines.append(
                        f"‚Ä¢ {owner.first_name} {owner.last_name or ''}\n"
                        f"  üìû {owner.phone or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
                        f"  üÜî ID: {owner.id}"
                    )
            lines.append("")
        
        text = "\n".join(lines)
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è —Ñ–ª–æ—Ä–∏—Å—Ç–æ–≤
        kb_rows = []
        
        for florist in florists[:4]:  # –ü–µ—Ä–≤—ã–µ 4 —Ñ–ª–æ—Ä–∏—Å—Ç–∞
            kb_rows.append([
                types.InlineKeyboardButton(text=f"üë§ {florist.first_name}", callback_data=f"user_info_{florist.id}"),
                types.InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_florist_{florist.id}")
            ])

        
        if len(florists) > 4:
            kb_rows.append([types.InlineKeyboardButton(text="üìã –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ—Ö", callback_data="show_all_florists")])
        
        kb_rows.append([types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")])
        
        kb = types.InlineKeyboardMarkup(inline_keyboard=kb_rows)
        
        await callback.message.edit_text(text, reply_markup=kb, parse_mode="HTML")
        await callback.answer()

@router.callback_query(F.data.startswith("user_info_"))
async def show_user_info(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"""
    try:
        user_id = int(callback.data.split("_")[2])
    except (IndexError, ValueError):
        await callback.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã", show_alert=True)
        return
    
    async for session in get_session():
        admin_user, is_admin = await _get_user_and_check_admin(session, callback.from_user.id)
        
        if not is_admin:
            await callback.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
            return
        
        from app.services import UserService, OrderService
        user_service = UserService(session)
        order_service = OrderService(session)
        
        try:
            target_user = await user_service.get_user_by_id(user_id)
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞–∫–∞–∑–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_orders = await order_service.get_user_orders(user_id)
            
            total_orders = len(user_orders)
            total_spent = sum(float(order.total_price or 0) for order in user_orders)
            
            role_emoji = {"florist": "üå∏", "owner": "üëë", "client": "üë§"}.get(target_user.role.value, "‚ùì")
            
            # –ö–û–†–û–¢–ö–ê–Ø –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            text = (
                f"{role_emoji} <b>–ü—Ä–æ—Ñ–∏–ª—å</b>\n\n"
                f"üë§ {target_user.first_name} {target_user.last_name or ''}\n"
                f"üìû {target_user.phone or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
                f"üéØ {target_user.role.value}\n"
                f"üóì {target_user.created_at.strftime('%d.%m.%Y') if target_user.created_at else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}\n\n"
                f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
                f"‚Ä¢ –ó–∞–∫–∞–∑–æ–≤: {total_orders}\n"
                f"‚Ä¢ –ü–æ—Ç—Ä–∞—Ç–∏–ª: {total_spent:,.0f} —Å—É–º"
            )
            
            kb_rows = []
            
            # –ö–Ω–æ–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è (—Ç–æ–ª—å–∫–æ –Ω–µ –¥–ª—è —Å–µ–±—è)
            if target_user.id != admin_user.id:
                kb_rows.append([
                    types.InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_florist_{user_id}")
                ])
            
            kb_rows.append([types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="manage_florists")])
            
            kb = types.InlineKeyboardMarkup(inline_keyboard=kb_rows)
            
            await callback.message.edit_text(text, reply_markup=kb, parse_mode="HTML")
            await callback.answer()
            
        except Exception as e:
            await callback.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)[:100]}", show_alert=True)

@router.callback_query(F.data.startswith("delete_florist_"))
async def delete_florist_confirm(callback: types.CallbackQuery):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–ª–æ—Ä–∏—Å—Ç–∞"""
    try:
        user_id = int(callback.data.split("_")[2])
    except (IndexError, ValueError):
        await callback.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã", show_alert=True)
        return
    
    async for session in get_session():
        admin_user, is_admin = await _get_user_and_check_admin(session, callback.from_user.id)
        
        if not is_admin:
            await callback.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
            return
        
        from app.services import UserService
        user_service = UserService(session)
        
        try:
            target_user = await user_service.get_user_by_id(user_id)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ —Ñ–ª–æ—Ä–∏—Å—Ç
            if target_user.role not in [RoleEnum.florist, RoleEnum.owner]:
                await callback.answer("‚ùå –ú–æ–∂–Ω–æ —É–¥–∞–ª—è—Ç—å —Ç–æ–ª—å–∫–æ —Ñ–ª–æ—Ä–∏—Å—Ç–æ–≤", show_alert=True)
                return
            
            # –ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å —Å–µ–±—è
            if target_user.id == admin_user.id:
                await callback.answer("‚ùå –ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å —Å–µ–±—è", show_alert=True)
                return
            
            # –ö–û–†–û–¢–ö–û–ï –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
            confirm_text = (
                f"‚ö†Ô∏è <b>–£–¥–∞–ª–µ–Ω–∏–µ —Ñ–ª–æ—Ä–∏—Å—Ç–∞</b>\n\n"
                f"üë§ {target_user.first_name} {target_user.last_name or ''}\n"
                f"üìû {target_user.phone or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n\n"
                f"üóë <b>–ß—Ç–æ –ø—Ä–æ–∏–∑–æ–π–¥–µ—Ç:</b>\n"
                f"‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª–µ–Ω –∏–∑ —Å–∏—Å—Ç–µ–º—ã\n"
                f"‚Ä¢ –ò—Å—Ç–æ—Ä–∏—è —Ä–∞–±–æ—Ç—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç—Å—è\n"
                f"‚Ä¢ –°–º–æ–∂–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –∫–∞–∫ –∫–ª–∏–µ–Ω—Ç\n\n"
                f"‚ùì –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å?"
            )
            
            kb = types.InlineKeyboardMarkup(inline_keyboard=[
                [
                    types.InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å", callback_data=f"confirm_delete_{user_id}"),
                    types.InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="manage_florists")
                ]
            ])
            
            await callback.message.edit_text(confirm_text, reply_markup=kb, parse_mode="HTML")
            await callback.answer()
            
        except Exception as e:
            await callback.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)[:100]}", show_alert=True)

@router.callback_query(F.data.startswith("confirm_delete_"))
async def confirm_delete_florist(callback: types.CallbackQuery):
    """–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ —Ñ–ª–æ—Ä–∏—Å—Ç–∞"""
    try:
        user_id = int(callback.data.split("_")[2])
    except (IndexError, ValueError):
        await callback.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã", show_alert=True)
        return
    
    async for session in get_session():
        admin_user, is_admin = await _get_user_and_check_admin(session, callback.from_user.id)
        
        if not is_admin:
            await callback.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
            return
        
        from app.services import UserService
        user_service = UserService(session)
        
        try:
            target_user = await user_service.get_user_by_id(user_id)
            user_name = f"{target_user.first_name} {target_user.last_name or ''}".strip()
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –î–û —É–¥–∞–ª–µ–Ω–∏—è (–∫–æ—Ä–æ—Ç–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ)
            try:
                await callback.bot.send_message(
                    chat_id=int(target_user.tg_id),
                    text=(
                        f"üì¢ –í–∞—à –∞–∫–∫–∞—É–Ω—Ç —Ñ–ª–æ—Ä–∏—Å—Ç–∞ —É–¥–∞–ª–µ–Ω.\n\n"
                        f"üí° –ú–æ–∂–µ—Ç–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –∑–∞–Ω–æ–≤–æ –∫–∞–∫ –∫–ª–∏–µ–Ω—Ç: /start"
                    )
                )
            except Exception as e:
                print(f"User notification error: {e}")
            
            # –ü–û–õ–ù–û–ï –£–î–ê–õ–ï–ù–ò–ï –∏–∑ —Å–∏—Å—Ç–µ–º—ã
            await _delete_user_completely(session, user_id)
            await session.commit()
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ö–û–†–û–¢–ö–ò–ô —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            result_text = (
                f"‚úÖ <b>–§–ª–æ—Ä–∏—Å—Ç —É–¥–∞–ª–µ–Ω</b>\n\n"
                f"üë§ {user_name}\n"
                f"üóë ID: {user_id}\n"
                f"üìÖ {datetime.now().strftime('%d.%m.%Y %H:%M')}\n"
                f"üë§ –í—ã–ø–æ–ª–Ω–∏–ª: {admin_user.first_name}"
            )
            
            kb = types.InlineKeyboardMarkup(inline_keyboard=[
                [types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="manage_florists")]
            ])
            
            await callback.message.edit_text(result_text, reply_markup=kb, parse_mode="HTML")
            await callback.answer("‚úÖ –§–ª–æ—Ä–∏—Å—Ç —É–¥–∞–ª–µ–Ω")
            
        except Exception as e:
            error_msg = str(e)
            # –£–∫–æ—Ä–∞—á–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
            if len(error_msg) > 100:
                error_msg = error_msg[:100] + "..."
            
            print(f"Delete error: {e}")
            await callback.answer(f"‚ùå –û—à–∏–±–∫–∞: {error_msg}", show_alert=True)

async def _delete_user_completely(session, user_id: int):
    """–ü–æ–ª–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–∏—Å—Ç–µ–º—ã"""
    from sqlalchemy import delete, update
    from app.models import User, RoleRequest, FloristProfile
    
    try:
        # 1. –°–ù–ê–ß–ê–õ–ê —É–¥–∞–ª—è–µ–º/–æ–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
        # –£–¥–∞–ª—è–µ–º –∑–∞—è–≤–∫–∏ –≥–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–∞–≤–∞–ª –∑–∞—è–≤–∫—É (–ø–æ tg_id)
        target_user = await session.get(User, user_id)
        if target_user:
            await session.execute(
                delete(RoleRequest).where(RoleRequest.user_tg_id == target_user.tg_id)
            )
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞—è–≤–∫–∏ –≥–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—ã–ª –æ–¥–æ–±—Ä—è—é—â–∏–º (–æ—Å—Ç–∞–≤–ª—è–µ–º –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏)
        await session.execute(
            update(RoleRequest)
            .where(RoleRequest.approved_by == user_id)
            .values(approved_by=None)
        )
        
        # 2. –£–¥–∞–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å —Ñ–ª–æ—Ä–∏—Å—Ç–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å)
        try:
            await session.execute(
                delete(FloristProfile).where(FloristProfile.user_id == user_id)
            )
        except Exception:
            # –ï—Å–ª–∏ —Ç–∞–±–ª–∏—Ü—ã FloristProfile –Ω–µ—Ç - –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
            pass
        
        # 3. –ò–°–¢–û–†–ò–Ø –ó–ê–ö–ê–ó–û–í –ò –ö–û–ù–°–£–õ–¨–¢–ê–¶–ò–ô –û–°–¢–ê–ï–¢–°–Ø!
        # orders.user_id –æ—Å—Ç–∞–µ—Ç—Å—è –¥–ª—è –æ—Ç—á–µ—Ç–Ω–æ—Å—Ç–∏
        # –í –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ –±—É–¥–µ—Ç –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å—Å—è "–£–¥–∞–ª–µ–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
        
        # 4. –ü–û–°–õ–ï–î–ù–ò–ú —É–¥–∞–ª—è–µ–º —Å–∞–º–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await session.execute(
            delete(User).where(User.id == user_id)
        )
        
        print(f"User {user_id} completely deleted from system")
        
    except Exception as e:
        print(f"Complete deletion error: {e}")
        raise