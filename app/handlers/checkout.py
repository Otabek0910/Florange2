# app/handlers/checkout.py - –ü–û–õ–ù–ê–Ø –ó–ê–ú–ï–ù–ê

from aiogram import Router, types, F
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from decimal import Decimal
from datetime import datetime, timedelta
import calendar
from datetime import datetime

from app.database.database import get_session
from app.services import UserService, CatalogService, OrderService, NotificationService
from app.schemas.order import OrderCreate
from app.utils.cart import get_cart, clear_cart
from app.utils.validators import validate_phone, validate_address
from app.translate import t
from app.exceptions import ProductNotFoundError, ValidationError
from app.models import RoleEnum

router = Router()

class Checkout(StatesGroup):
    ASK_ADDRESS = State()
    ASK_PHONE = State()
    ASK_DATE = State()
    ASK_TIME = State()
    CONFIRM = State()

async def _get_user_and_lang(session, tg_id: int):
    """–ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —è–∑—ã–∫ —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å"""
    from app.services import UserService
    from app.exceptions import UserNotFoundError
    
    user_service = UserService(session)
    try:
        user = await user_service.get_user_by_tg_id(str(tg_id))
        return user, user.lang or "ru"
    except UserNotFoundError:
        return None, "ru"

@router.callback_query(F.data == "checkout")
async def checkout_start(callback: types.CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞"""
    cart_data = get_cart(callback.from_user.id)
    if not cart_data:
        async for session in get_session():
            user, lang = await _get_user_and_lang(session, callback.from_user.id)
        await callback.message.edit_text(t(lang, "cart_empty"))
        await callback.answer()
        return

    async for session in get_session():
        user, lang = await _get_user_and_lang(session, callback.from_user.id)

    await state.clear()
    await state.set_state(Checkout.ASK_ADDRESS)
    
    # –£–ü–†–û–©–ï–ù–ù–´–ô –ó–ê–ü–†–û–° –ê–î–†–ï–°–ê - –≤—Å–µ –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
    kb = types.ReplyKeyboardMarkup(
        keyboard=[[types.KeyboardButton(text="üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–æ—é –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é", request_location=True)]],
        resize_keyboard=True,
        one_time_keyboard=True
    )
    
    await callback.message.edit_text(
        "üìç <b>–£–∫–∞–∂–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:</b>\n\n"
        "‚Ä¢ –ù–∞–ø–∏—à–∏—Ç–µ –∞–¥—Ä–µ—Å —Ç–µ–∫—Å—Ç–æ–º (—É–ª–∏—Ü–∞, –¥–æ–º, –ø–æ–¥—ä–µ–∑–¥, –∫–≤–∞—Ä—Ç–∏—Ä–∞)\n"
        "‚Ä¢ –ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≥–µ–æ–ø–æ–∑–∏—Ü–∏–∏",
        parse_mode="HTML"
    )
    
    await callback.bot.send_message(
        callback.message.chat.id,
        "üëá –í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω—ã–π —Å–ø–æ—Å–æ–±:",
        reply_markup=kb
    )
    await callback.answer()


@router.message(Checkout.ASK_ADDRESS, F.location)
async def process_location(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–µ–æ–ø–æ–∑–∏—Ü–∏–∏"""
    lat = message.location.latitude
    lon = message.location.longitude
    address = f"üìç –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: {lat:.6f}, {lon:.6f}"
    
    async for session in get_session():
        user, lang = await _get_user_and_lang(session, message.from_user.id)

    await state.update_data(address=address, latitude=lat, longitude=lon)
    await _proceed_to_phone(message, state, user)

@router.message(Checkout.ASK_ADDRESS, F.text)
async def process_address_text(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–¥—Ä–µ—Å–∞ —Ç–µ–∫—Å—Ç–æ–º"""
    address = message.text.strip()
    
    async for session in get_session():
        user, lang = await _get_user_and_lang(session, message.from_user.id)

    # –£–õ–£–ß–®–ï–ù–ù–ê–Ø –í–ê–õ–ò–î–ê–¶–ò–Ø –ê–î–†–ï–°–ê
    if len(address) < 10:
        await message.answer(
            "‚ùå <b>–ê–¥—Ä–µ—Å —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π</b>\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ:\n"
            "‚Ä¢ –ù–∞–∑–≤–∞–Ω–∏–µ —É–ª–∏—Ü—ã\n"
            "‚Ä¢ –ù–æ–º–µ—Ä –¥–æ–º–∞\n"
            "‚Ä¢ –ü–æ–¥—ä–µ–∑–¥/–∫–≤–∞—Ä—Ç–∏—Ä—É (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)\n\n"
            "<i>–ü—Ä–∏–º–µ—Ä: —É–ª. –ú—É—Å—Ç–∞–∫–∏–ª–ª–∏–∫, –¥–æ–º 15, –∫–≤. 25</i>",
            parse_mode="HTML"
        )
        return

    await state.update_data(address=address)
    await _proceed_to_phone(message, state, user)

async def _proceed_to_phone(message: types.Message, state: FSMContext, user):
    """–ü–µ—Ä–µ—Ö–æ–¥ –∫ –≤–≤–æ–¥—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
    await state.set_state(Checkout.ASK_PHONE)
    
    # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–≤–æ–π –Ω–æ–º–µ—Ä –∏–ª–∏ –≤–≤–µ—Å—Ç–∏ –ø–æ–ª—É—á–∞—Ç–µ–ª—è
    user_phone = user.phone if user else None
    kb_rows = []
    
    if user_phone:
        kb_rows.append([types.InlineKeyboardButton(
            text=f"üì± –ú–æ–π –Ω–æ–º–µ—Ä: {user_phone}", 
            callback_data=f"use_my_phone_{user_phone}"
        )])
    
    kb_rows.append([types.InlineKeyboardButton(
        text="üìû –£–∫–∞–∑–∞—Ç—å –Ω–æ–º–µ—Ä –ø–æ–ª—É—á–∞—Ç–µ–ª—è", 
        callback_data="enter_recipient_phone"
    )])
    
    kb = types.InlineKeyboardMarkup(inline_keyboard=kb_rows)
    
    await message.answer(
        "‚úÖ –ê–¥—Ä–µ—Å –ø–æ–ª—É—á–µ–Ω!\n\nüìû <b>–ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω:</b>",
        reply_markup=kb,
        parse_mode="HTML"
    )

@router.callback_query(F.data.startswith("use_my_phone_"))
async def use_my_phone(callback: types.CallbackQuery, state: FSMContext):
    """–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–≤–æ–π –Ω–æ–º–µ—Ä"""
    phone = callback.data.replace("use_my_phone_", "")
    await state.update_data(phone=phone)
    await _ask_delivery_date(callback, state)

@router.callback_query(F.data == "enter_recipient_phone")
async def ask_recipient_phone(callback: types.CallbackQuery, state: FSMContext):
    """–ü—Ä–æ—Å–∏–º –≤–≤–µ—Å—Ç–∏ –Ω–æ–º–µ—Ä –ø–æ–ª—É—á–∞—Ç–µ–ª—è"""
    await callback.message.edit_text(
        "üìû –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –ø–æ–ª—É—á–∞—Ç–µ–ª—è:\n\n"
        "–ü—Ä–∏–º–µ—Ä: +998901234567"
    )
    await callback.answer()

@router.message(Checkout.ASK_PHONE)
async def process_phone(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
    phone = message.text.strip()
    
    async for session in get_session():
        user, lang = await _get_user_and_lang(session, message.from_user.id)

    if not validate_phone(phone):
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞. –ü—Ä–∏–º–µ—Ä: +998901234567")
        return

    await state.update_data(phone=phone)
    await _ask_delivery_date_message(message, state)

async def _ask_delivery_date(callback: types.CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∫–∞–ª–µ–Ω–¥–∞—Ä—å –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã"""
    await state.set_state(Checkout.ASK_DATE)
    
    # –°–æ–∑–¥–∞–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä—å –Ω–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü
    now = datetime.now()
    cal_kb = _create_calendar(now.year, now.month)
    
    await callback.message.edit_text(
        "üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –¥–æ—Å—Ç–∞–≤–∫–∏:",
        reply_markup=cal_kb
    )
    await callback.answer()

async def _ask_delivery_date_message(message: types.Message, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∫–∞–ª–µ–Ω–¥–∞—Ä—å –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã (–¥–ª—è message)"""
    await state.set_state(Checkout.ASK_DATE)
    
    # –°–æ–∑–¥–∞–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä—å –Ω–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü
    now = datetime.now()
    cal_kb = _create_calendar(now.year, now.month)
    
    await message.answer(
        "üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –¥–æ—Å—Ç–∞–≤–∫–∏:",
        reply_markup=cal_kb
    )

def _create_calendar(year: int, month: int):
    """–°–æ–∑–¥–∞—Ç—å –∫–∞–ª–µ–Ω–¥–∞—Ä—å –Ω–∞ –º–µ—Å—è—Ü"""
    cal = calendar.monthcalendar(year, month)
    month_name = calendar.month_name[month]
    
    kb_rows = []
    
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –º–µ—Å—è—Ü–∞
    kb_rows.append([types.InlineKeyboardButton(
        text=f"{month_name} {year}",
        callback_data="ignore"
    )])
    
    # –î–Ω–∏ –Ω–µ–¥–µ–ª–∏
    kb_rows.append([
        types.InlineKeyboardButton(text="–ü–Ω", callback_data="ignore"),
        types.InlineKeyboardButton(text="–í—Ç", callback_data="ignore"),
        types.InlineKeyboardButton(text="–°—Ä", callback_data="ignore"),
        types.InlineKeyboardButton(text="–ß—Ç", callback_data="ignore"),
        types.InlineKeyboardButton(text="–ü—Ç", callback_data="ignore"),
        types.InlineKeyboardButton(text="–°–±", callback_data="ignore"),
        types.InlineKeyboardButton(text="–í—Å", callback_data="ignore"),
    ])
    
    # –î–Ω–∏ –º–µ—Å—è—Ü–∞
    today = datetime.now().date()
    for week in cal:
        week_row = []
        for day in week:
            if day == 0:
                week_row.append(types.InlineKeyboardButton(text=" ", callback_data="ignore"))
            else:
                date_obj = datetime(year, month, day).date()
                if date_obj < today:
                    # –ü—Ä–æ—à–µ–¥—à–∏–µ –¥–Ω–∏
                    week_row.append(types.InlineKeyboardButton(text=" ", callback_data="ignore"))
                else:
                    # –î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–Ω–∏
                    week_row.append(types.InlineKeyboardButton(
                        text=str(day),
                        callback_data=f"date_{year}_{month}_{day}"
                    ))
        kb_rows.append(week_row)
    
    # –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –º–µ—Å—è—Ü–∞–º
    prev_month = month - 1 if month > 1 else 12
    prev_year = year if month > 1 else year - 1
    next_month = month + 1 if month < 12 else 1
    next_year = year if month < 12 else year + 1
    
    kb_rows.append([
        types.InlineKeyboardButton(text="‚óÄÔ∏è", callback_data=f"cal_{prev_year}_{prev_month}"),
        types.InlineKeyboardButton(text="‚ñ∂Ô∏è", callback_data=f"cal_{next_year}_{next_month}")
    ])
    
    return types.InlineKeyboardMarkup(inline_keyboard=kb_rows)

@router.callback_query(F.data.startswith("cal_"))
async def change_calendar_month(callback: types.CallbackQuery, state: FSMContext):
    """–°–º–µ–Ω–∞ –º–µ—Å—è—Ü–∞ –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ"""
    _, year, month = callback.data.split("_")
    cal_kb = _create_calendar(int(year), int(month))
    
    await callback.message.edit_text(
        "üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –¥–æ—Å—Ç–∞–≤–∫–∏:",
        reply_markup=cal_kb
    )
    await callback.answer()

@router.callback_query(F.data.startswith("date_"))
async def select_date(callback: types.CallbackQuery, state: FSMContext):
    """–í—ã–±–æ—Ä –¥–∞—Ç—ã"""
    _, year, month, day = callback.data.split("_")
    selected_date = datetime(int(year), int(month), int(day)).date()
    
    await state.update_data(delivery_date=selected_date.isoformat())
    await state.set_state(Checkout.ASK_TIME)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –≤—Ä–µ–º–µ–Ω–∏
    time_kb = types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(text="üåÖ 09:00-12:00", callback_data="time_morning")],
        [types.InlineKeyboardButton(text="üåû 12:00-15:00", callback_data="time_day")],
        [types.InlineKeyboardButton(text="üåá 15:00-18:00", callback_data="time_evening")],
        [types.InlineKeyboardButton(text="üåÉ 18:00-21:00", callback_data="time_night")],
        [types.InlineKeyboardButton(text="üïê –£–∫–∞–∑–∞—Ç—å —Ç–æ—á–Ω–æ–µ –≤—Ä–µ–º—è", callback_data="time_exact")]
    ])
    
    date_str = selected_date.strftime("%d.%m.%Y")
    await callback.message.edit_text(
        f"‚úÖ –î–∞—Ç–∞: {date_str}\n\nüïê –í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏:",
        reply_markup=time_kb
    )
    await callback.answer()

@router.callback_query(F.data.startswith("time_"))
async def select_time(callback: types.CallbackQuery, state: FSMContext):
    """–í—ã–±–æ—Ä –≤—Ä–µ–º–µ–Ω–∏"""
    time_periods = {
        "time_morning": "09:00-12:00",
        "time_day": "12:00-15:00", 
        "time_evening": "15:00-18:00",
        "time_night": "18:00-21:00"
    }
    
    if callback.data == "time_exact":
        await callback.message.edit_text(
            "üïê –í–≤–µ–¥–∏—Ç–µ —Ç–æ—á–Ω–æ–µ –≤—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏:\n\n"
            "–ü—Ä–∏–º–µ—Ä: 14:30"
        )
        await callback.answer()
        return
    
    time_slot = time_periods[callback.data]
    await state.update_data(delivery_time=time_slot)
    await _show_order_confirmation(callback, state)

@router.message(Checkout.ASK_TIME)
async def process_exact_time(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–æ—á–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏"""
    time_text = message.text.strip()
    
    # –ü—Ä–æ—Å—Ç–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏
    try:
        datetime.strptime(time_text, "%H:%M")
        await state.update_data(delivery_time=time_text)
        await _show_order_confirmation_message(message, state)
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ü—Ä–∏–º–µ—Ä: 14:30")

async def _show_order_confirmation(callback: types.CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞"""
    await _show_confirmation_logic(callback.message, state, callback.from_user.id, is_callback=True)

async def _show_order_confirmation_message(message: types.Message, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –¥–ª—è message"""
    await _show_confirmation_logic(message, state, message.from_user.id, is_callback=False)

async def _show_confirmation_logic(message, state: FSMContext, user_id: int, is_callback: bool):
    """–û–±—â–∞—è –ª–æ–≥–∏–∫–∞ –ø–æ–∫–∞–∑–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"""
    cart = get_cart(user_id)
    if not cart:
        text = "‚ùå –ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞"
        if is_callback:
            await message.edit_text(text)
        else:
            await message.answer(text)
        await state.clear()
        return

    data = await state.get_data()
    
    async for session in get_session():
        user, lang = await _get_user_and_lang(session, user_id)
        catalog_service = CatalogService(session)
        
        total = Decimal("0")
        lines = []
        
        for pid, qty in cart.items():
            try:
                product = await catalog_service.get_product(int(pid))
                price = Decimal(str(product.price))
                qty_d = Decimal(str(qty))
                line_total = price * qty_d
                total += line_total
                
                name = product.name_ru if lang == "ru" else product.name_uz
                lines.append(f"‚Ä¢ {name} ‚Äî {qty} √ó {price} —Å—É–º")
                
            except ProductNotFoundError:
                continue

    if not lines:
        text = "‚ùå –ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞"
        if is_callback:
            await message.edit_text(text)
        else:
            await message.answer(text)
        await state.clear()
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    delivery_date = data.get('delivery_date', '–Ω–µ —É–∫–∞–∑–∞–Ω–∞')
    delivery_time = data.get('delivery_time', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')
    
    text = (
        f"üìã <b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞</b>\n\n"
        f"üõç <b>–¢–æ–≤–∞—Ä—ã:</b>\n" + "\n".join(lines) + 
        f"\n\nüí∞ <b>–ò—Ç–æ–≥–æ: {total} —Å—É–º</b>\n\n"
        f"üìç <b>–ê–¥—Ä–µ—Å:</b> {data['address']}\n"
        f"üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {data['phone']}\n"
        f"üìÖ <b>–î–∞—Ç–∞:</b> {delivery_date}\n"
        f"üïê <b>–í—Ä–µ–º—è:</b> {delivery_time}"
    )

    kb = types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–∫–∞–∑", callback_data="confirm_ok")],
        [types.InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="confirm_cancel")],
    ])
    
    await state.set_state(Checkout.CONFIRM)
    
    if is_callback:
        await message.edit_text(text, reply_markup=kb, parse_mode="HTML")
    else:
        await message.answer(text, reply_markup=kb, parse_mode="HTML")

@router.callback_query(Checkout.CONFIRM, F.data == "confirm_ok")
async def create_order(callback: types.CallbackQuery, state: FSMContext):
    """–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞"""
    cart = get_cart(callback.from_user.id)
    if not cart:
        async for session in get_session():
            user, lang = await _get_user_and_lang(session, callback.from_user.id)
        await callback.message.edit_text("‚ùå –ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞")
        await state.clear()
        await callback.answer()
        return

    data = await state.get_data()

    async for session in get_session():
        user, lang = await _get_user_and_lang(session, callback.from_user.id)
        
        if not user:
            await callback.message.edit_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            await state.clear()
            await callback.answer()
            return

        try:
            # –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑ —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å
            order_service = OrderService(session)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
            delivery_date = data.get('delivery_date', '')
            delivery_time = data.get('delivery_time', '')
            comment = f"–î–æ—Å—Ç–∞–≤–∫–∞: {delivery_date} –≤ {delivery_time}"
            
            if 'latitude' in data and 'longitude' in data:
                comment += f"\n–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: {data['latitude']}, {data['longitude']}"
            
            order_data = OrderCreate(
                user_id=user.id,
                address=data["address"],
                phone=data["phone"],
                comment=comment
            )
            
            order = await order_service.create_order(
                user_id=user.id,
                cart_items=cart,
                order_data=order_data
            )
            
            await session.commit()
            
            # –û—á–∏—â–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É
            clear_cart(callback.from_user.id)
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º —Ñ–ª–æ—Ä–∏—Å—Ç–æ–≤ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –∫–∞–Ω–∞–ª
            await _notify_about_new_order(callback.bot, order, session, lang)
            
            await callback.message.edit_text(
                f"‚úÖ <b>–ó–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω!</b>\n\n"
                f"üÜî –ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: <b>#{order.id}</b>\n\n"
                f"–ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π.",
                reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[
                    [types.InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
                ]),
                parse_mode="HTML"
            )
            
        except Exception as e:
            await callback.message.edit_text(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞: {str(e)}")
            
    await state.clear()
    await callback.answer()

async def _notify_about_new_order(bot, order, session, lang):
    """–£–≤–µ–¥–æ–º–∏—Ç—å —Ñ–ª–æ—Ä–∏—Å—Ç–æ–≤ –æ –Ω–æ–≤–æ–º –∑–∞–∫–∞–∑–µ"""
    try:
        # –°–ù–ê–ß–ê–õ–ê –ø–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑ —Å –ø–æ–ª–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ (–≤–∫–ª—é—á–∞—è items)
        from app.services import OrderService
        order_service = OrderService(session)
        
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑ —Å –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–º–∏ —Å–≤—è–∑—è–º–∏
        full_order = await order_service.get_order_with_details(order.id)
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        notification_service = NotificationService(bot)
        user_service = UserService(session)
        
        florists = await user_service.user_repo.get_by_role(RoleEnum.florist)
        owners = await user_service.user_repo.get_by_role(RoleEnum.owner)
        all_florists = florists + owners
        
        print(f"üìß –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è {len(all_florists)} —Ñ–ª–æ—Ä–∏—Å—Ç–∞–º")
        
        if all_florists:
            await notification_service.notify_florists_about_order(all_florists, full_order, lang)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –∫–∞–Ω–∞–ª —Ñ–ª–æ—Ä–∏—Å—Ç–æ–≤
        from app.config import settings
        if settings.FLORIST_CHANNEL_ID:
            print(f"üì¢ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –∫–∞–Ω–∞–ª {settings.FLORIST_CHANNEL_ID}")
            await _send_order_to_channel(bot, full_order, settings.FLORIST_CHANNEL_ID)
        else:
            print("‚ö†Ô∏è FLORIST_CHANNEL_ID –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
            
    except Exception as e:
        print(f"‚ùå Notification error: {e}")
        import traceback
        traceback.print_exc()

async def _send_order_to_channel(bot, order, channel_id):
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑ –≤ –∫–∞–Ω–∞–ª —Ñ–ª–æ—Ä–∏—Å—Ç–æ–≤ –° –ü–û–î–†–û–ë–ù–û–°–¢–Ø–ú–ò"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–Ω–∞–ª–∞
        if not channel_id:
            print("‚ö†Ô∏è FLORIST_CHANNEL_ID –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ .env")
            return
            
        if not channel_id.startswith("-"):
            print(f"‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç FLORIST_CHANNEL_ID: {channel_id}")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞
        user_name = getattr(order.user, 'first_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ') or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
        phone = order.phone or '–ù–µ —É–∫–∞–∑–∞–Ω'
        address = order.address or '–ù–µ —É–∫–∞–∑–∞–Ω'
        comment = order.comment or '–ù–µ—Ç'
        
        # –ü–û–õ–£–ß–ê–ï–ú –°–û–°–¢–ê–í –ó–ê–ö–ê–ó–ê - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –õ–û–ì–ò–ö–ê
        order_items = []
        try:
            if hasattr(order, 'items') and order.items:
                for item in order.items:
                    if hasattr(item, 'product') and item.product:
                        order_items.append(f"‚Ä¢ {item.product.name_ru} √ó {item.qty}")
                    else:
                        order_items.append(f"‚Ä¢ –¢–æ–≤–∞—Ä ID:{item.product_id} √ó {item.qty}")
        except Exception as e:
            print(f"Error getting order items for channel: {e}")
        
        items_text = "\n".join(order_items) if order_items else "–°–æ—Å—Ç–∞–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
        
        text = (
            f"üÜï <b>–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ #{order.id}</b>\n\n"
            f"üë§ <b>–ö–ª–∏–µ–Ω—Ç:</b> {user_name}\n"
            f"üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {phone}\n"
            f"üìç <b>–ê–¥—Ä–µ—Å:</b> {address}\n"
            f"üí∞ <b>–°—É–º–º–∞:</b> {order.total_price} —Å—É–º\n"
            f"üóì <b>–°–æ–∑–¥–∞–Ω:</b> {order.created_at.strftime('%d.%m.%Y %H:%M')}\n\n"
            f"üõç <b>–°–æ—Å—Ç–∞–≤:</b>\n{items_text}\n\n"
            f"üí¨ <b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</b> {comment}"
        )
        
        kb = types.InlineKeyboardMarkup(inline_keyboard=[
            [types.InlineKeyboardButton(text="‚úÖ –ü—Ä–∏–Ω—è—Ç—å –≤ —Ä–∞–±–æ—Ç—É", callback_data=f"accept_order_{order.id}")],
            [types.InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑", callback_data=f"cancel_order_{order.id}")]
        ])
        
        await bot.send_message(
            chat_id=int(channel_id),
            text=text,
            reply_markup=kb,
            parse_mode="HTML"
        )
        print(f"‚úÖ –ó–∞–∫–∞–∑ #{order.id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –∫–∞–Ω–∞–ª {channel_id}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –∫–∞–Ω–∞–ª {channel_id}: {e}")
        import traceback
        traceback.print_exc()

@router.callback_query(Checkout.CONFIRM, F.data == "confirm_cancel")
async def cancel_confirm(callback: types.CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞"""
    await state.clear()
    
    async for session in get_session():
        user, lang = await _get_user_and_lang(session, callback.from_user.id)
    
    kb = types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ])
    
    await callback.message.edit_text(
        "‚ùå –ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω",
        reply_markup=kb
    )
    await callback.answer()


@router.callback_query(F.data == "ignore")
async def ignore_callback(callback: types.CallbackQuery):
    """–ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å callback (–¥–ª—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∫–∞–ª–µ–Ω–¥–∞—Ä—è)"""
    await callback.answer()


@router.callback_query(F.data.startswith("accept_order_"))
async def florist_accept_order_from_channel(callback: types.CallbackQuery):
    """–§–ª–æ—Ä–∏—Å—Ç –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –∑–∞–∫–∞–∑ –ò–ó –ö–ê–ù–ê–õ–ê"""
    try:
        order_id = int(callback.data.split("_")[2])
    except (IndexError, ValueError):
        await callback.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã", show_alert=True)
        return
    
    async for session in get_session():
        from app.services import OrderService, NotificationService
        order_service = OrderService(session)
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        user, lang = await _get_user_and_lang(session, callback.from_user.id)
        if not user:
            await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑
            order = await order_service.get_order_with_details(order_id)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∑–∞–∫–∞–∑ –µ—â–µ –º–æ–∂–Ω–æ –ø—Ä–∏–Ω—è—Ç—å
            from app.models import OrderStatusEnum
            if order.status not in [OrderStatusEnum.new, OrderStatusEnum.await_florist]:
                await callback.answer("‚ùå –ó–∞–∫–∞–∑ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω", show_alert=True)
                return
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞
            updated_order = await order_service.update_order_status(order_id, OrderStatusEnum.accepted)
            await session.commit()
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª–µ
            user_name = f"{user.first_name} {user.last_name or ''}".strip()
            await callback.message.edit_text(
                callback.message.text + f"\n\n‚úÖ <b>–ü–†–ò–ù–Ø–¢</b>\nüë§ –§–ª–æ—Ä–∏—Å—Ç: {user_name}\nüïê {datetime.now().strftime('%d.%m %H:%M')}",
                parse_mode="HTML",
                reply_markup=None  # –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏
            )
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –¥—Ä—É–≥–∏—Ö —Ñ–ª–æ—Ä–∏—Å—Ç–æ–≤ –∏ –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤
            notification_service = NotificationService(callback.bot)
            await notification_service.notify_order_status_change(order, "accepted", user, lang)
            await notification_service.hide_order_from_other_florists(order_id, user)
            
            await callback.answer("‚úÖ –ó–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç –≤ —Ä–∞–±–æ—Ç—É")
            
        except Exception as e:
            print(f"Accept order error: {e}")
            await callback.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}", show_alert=True)

@router.callback_query(F.data.startswith("cancel_order_") & F.message.chat.type.in_(["channel", "supergroup"]))
async def florist_cancel_order_from_channel(callback: types.CallbackQuery):
    """–§–ª–æ—Ä–∏—Å—Ç –æ—Ç–º–µ–Ω—è–µ—Ç –∑–∞–∫–∞–∑ –ò–ó –ö–ê–ù–ê–õ–ê"""
    try:
        order_id = int(callback.data.split("_")[2])
    except (IndexError, ValueError):
        await callback.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã", show_alert=True)
        return
    
    async for session in get_session():
        from app.services import OrderService, NotificationService
        order_service = OrderService(session)
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        user, lang = await _get_user_and_lang(session, callback.from_user.id)
        if not user:
            await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑
            order = await order_service.get_order_with_details(order_id)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –Ω–∞ –æ—Ç–º–µ–Ω—É
            from app.models import OrderStatusEnum, RoleEnum
            if order.status in [OrderStatusEnum.delivered, OrderStatusEnum.canceled]:
                await callback.answer("‚ùå –ó–∞–∫–∞–∑ —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω", show_alert=True)
                return
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞
            updated_order = await order_service.update_order_status(order_id, OrderStatusEnum.canceled)
            await session.commit()
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª–µ
            user_name = f"{user.first_name} {user.last_name or ''}".strip()
            role_text = "üëë –í–ª–∞–¥–µ–ª–µ—Ü" if user.role == RoleEnum.owner else "üå∏ –§–ª–æ—Ä–∏—Å—Ç"
            
            await callback.message.edit_text(
                callback.message.text + f"\n\n‚ùå <b>–û–¢–ú–ï–ù–ï–ù</b>\nüë§ {role_text}: {user_name}\nüïê {datetime.now().strftime('%d.%m %H:%M')}",
                parse_mode="HTML",
                reply_markup=None  # –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏
            )
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –¥—Ä—É–≥–∏—Ö —Ñ–ª–æ—Ä–∏—Å—Ç–æ–≤ –∏ –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤
            notification_service = NotificationService(callback.bot)
            await notification_service.notify_order_status_change(order, "canceled", user, lang)
            
            await callback.answer("‚ùå –ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω")
            
        except Exception as e:
            print(f"Cancel order error: {e}")
            await callback.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}", show_alert=True)
