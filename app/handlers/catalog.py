from aiogram import Router, types, F
from sqlalchemy import select
from decimal import Decimal

from app.database import get_session
from app.models import Category, Product, User
from app.translate import t

router = Router()

async def _get_user_lang(session, tg_id: int) -> str:
    res = await session.execute(select(User).where(User.tg_id == str(tg_id)))
    user = res.scalars().first()
    return (user.lang or "ru") if user else "ru"

# –û—Ç–∫—Ä—ã—Ç—å —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
@router.callback_query(F.data == "open_catalog")
async def show_categories(callback: types.CallbackQuery):
    async for session in get_session():
        lang = await _get_user_lang(session, callback.from_user.id)
        result = await session.execute(select(Category))
        categories = result.scalars().all()

    if not categories:
        await callback.message.edit_text(t(lang, "no_categories"))
        await callback.answer()
        return

    # FIXED: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø–æ–ª—è
    kb = types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(
            text=cat.name_ru if lang == "ru" else cat.name_uz, 
            callback_data=f"cat_{cat.id}"
        )]
        for cat in categories
    ])
    await callback.message.edit_text(t(lang, "choose_category"), reply_markup=kb)
    await callback.answer()

# –ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–≤–∞—Ä—ã –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
@router.callback_query(F.data.startswith("cat_"))
async def show_products(callback: types.CallbackQuery):
    cat_id = int(callback.data.split("_")[1])

    async for session in get_session():
        lang = await _get_user_lang(session, callback.from_user.id)
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä—ã
        result = await session.execute(select(Product).where(
            Product.category_id == cat_id, 
            Product.is_active == True
        ))
        products = result.scalars().all()
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        category = await session.get(Category, cat_id)
        cat_name = category.name_ru if lang == "ru" else category.name_uz

    if not products:
        kb = types.InlineKeyboardMarkup(inline_keyboard=[
            [types.InlineKeyboardButton(text=t(lang, "back_to_categories"), callback_data="open_catalog")]
        ])
        await callback.message.edit_text(
            f"üìÇ {cat_name}\n\n{t(lang, 'no_products')}", 
            reply_markup=kb
        )
        await callback.answer()
        return

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–π —Ç–æ–≤–∞—Ä
    await show_product_card(callback, products, 0, cat_id, lang)

async def show_product_card(callback: types.CallbackQuery, products: list, index: int, cat_id: int, lang: str):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É —Ç–æ–≤–∞—Ä–∞ —Å –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π"""
    product = products[index]
    total = len(products)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∫–∞—Ä—Ç–æ—á–∫–∏
    currency = t(lang, "currency")
    name = product.name_ru if lang == "ru" else product.name_uz
    desc = (product.desc_ru if lang == "ru" else product.desc_uz) or ""
    
    text = f"üõç <b>{name}</b>\n\n{desc}\n\nüí∞ {product.price} {currency}"
    text += f"\n\nüìä {index + 1} –∏–∑ {total}"
    
    # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∏ –¥–µ–π—Å—Ç–≤–∏–π
    kb_rows = []
    
    # –ù–∞–≤–∏–≥–∞—Ü–∏—è
    nav_row = []
    if index > 0:
        nav_row.append(types.InlineKeyboardButton(text="‚¨ÖÔ∏è", callback_data=f"prod_{cat_id}_{index-1}"))
    if index < total - 1:
        nav_row.append(types.InlineKeyboardButton(text="‚û°Ô∏è", callback_data=f"prod_{cat_id}_{index+1}"))
    
    if nav_row:
        kb_rows.append(nav_row)
    
    # –î–µ–π—Å—Ç–≤–∏—è
    kb_rows.extend([
        [types.InlineKeyboardButton(text=t(lang, "add_to_cart"), callback_data=f"add_{product.id}")],
        [types.InlineKeyboardButton(text=t(lang, "back_to_categories"), callback_data="open_catalog")]
    ])
    
    kb = types.InlineKeyboardMarkup(inline_keyboard=kb_rows)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ –∏–ª–∏ —Ç–µ–∫—Å—Ç
    photo_url = product.photo_url or "https://via.placeholder.com/400x300/FFB6C1/000000?text=üå∏"
    
    try:
        if callback.message.photo:
            # –ï—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å —Ñ–æ—Ç–æ, —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å—å
            await callback.message.edit_caption(caption=text, reply_markup=kb)
        else:
            # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å —Ñ–æ—Ç–æ
            await callback.message.delete()
            await callback.bot.send_photo(
                chat_id=callback.message.chat.id,
                photo=photo_url,
                caption=text,
                reply_markup=kb
            )
    except Exception:
        # Fallback –Ω–∞ —Ç–µ–∫—Å—Ç
        await callback.message.edit_text(text, reply_markup=kb)

# –î–æ–±–∞–≤–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ —Ç–æ–≤–∞—Ä–∞–º
@router.callback_query(F.data.startswith("prod_"))
async def navigate_products(callback: types.CallbackQuery):
    parts = callback.data.split("_")
    cat_id = int(parts[1])
    index = int(parts[2])
    
    async for session in get_session():
        lang = await _get_user_lang(session, callback.from_user.id)
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä—ã –∑–∞–Ω–æ–≤–æ (–∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–∑–∂–µ)
        result = await session.execute(select(Product).where(
            Product.category_id == cat_id,
            Product.is_active == True
        ))
        products = result.scalars().all()
    
    await show_product_card(callback, products, index, cat_id, lang)
    await callback.answer()