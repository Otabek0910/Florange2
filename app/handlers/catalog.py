from aiogram import Router, types, F
from sqlalchemy import select
from app.database import get_session
from app.models import Category, Product

router = Router()

# –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
@router.message(F.text == "üõç –ö–∞—Ç–∞–ª–æ–≥")
async def show_categories(message: types.Message):
    async for session in get_session():
        result = await session.execute(select(Category))
        categories = result.scalars().all()

    if not categories:
        await message.answer("–ö–∞—Ç–µ–≥–æ—Ä–∏–π –ø–æ–∫–∞ –Ω–µ—Ç.")
        return

    kb = types.InlineKeyboardMarkup()
    for cat in categories:
        kb.add(types.InlineKeyboardButton(text=cat.name, callback_data=f"cat_{cat.id}"))

    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=kb)

# –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–≤–∞—Ä—ã –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
@router.callback_query(F.data.startswith("cat_"))
async def show_products(callback: types.CallbackQuery):
    cat_id = int(callback.data.split("_")[1])

    async for session in get_session():
        result = await session.execute(select(Product).where(Product.category_id == cat_id))
        products = result.scalars().all()

    if not products:
        await callback.message.answer("–í —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∫–∞ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤.")
        await callback.answer()
        return

    for product in products:
        kb = types.InlineKeyboardMarkup()
        kb.add(types.InlineKeyboardButton(text=f"–î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É", callback_data=f"add_{product.id}"))

        await callback.message.answer_photo(
            photo=product.photo_file_id or "https://via.placeholder.com/300",
            caption=f"<b>{product.name}</b>\n{product.description}\n–¶–µ–Ω–∞: {product.price} —Å—É–º",
            reply_markup=kb
        )

    await callback.answer()
