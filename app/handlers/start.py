from aiogram import Router, types, F
from aiogram.filters import Command
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from sqlalchemy import select, update
from app.database import get_session
from app.models import User, Settings, RoleRequest
from app.translate import t

router = Router()

# FSM —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
class Registration(StatesGroup):
    CHOOSE_LANG = State()
    CHOOSE_ROLE = State()
    REQUEST_REASON = State()

@router.message(Command("start"))
async def start_cmd(message: types.Message, state: FSMContext):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    async for session in get_session():
        result = await session.execute(select(User).where(User.tg_id == str(message.from_user.id)))
        user = result.scalars().first()

        if user:
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é
            await show_main_menu(message, user.lang or "ru", user.role)
            return

    # –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –≤—ã–±–æ—Ä —è–∑—ã–∫–∞
    await state.set_state(Registration.CHOOSE_LANG)
    kb = types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(text="üá∑üá∫ –†—É—Å—Å–∫–∏–π", callback_data="lang_ru")],
        [types.InlineKeyboardButton(text="üá∫üáø O ªzbekcha", callback_data="lang_uz")]
    ])
    await message.answer(t("ru", "start_choose_lang") + "\n" + t("uz", "start_choose_lang"), reply_markup=kb)

@router.callback_query(Registration.CHOOSE_LANG, F.data.startswith("lang_"))
async def set_language(callback: types.CallbackQuery, state: FSMContext):
    lang = callback.data.split("_")[1]
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —è–∑—ã–∫ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(lang=lang)
    await state.set_state(Registration.CHOOSE_ROLE)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä —Ä–æ–ª–∏
    kb = types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(text=t(lang, "role_client"), callback_data="role_client")],
        [types.InlineKeyboardButton(text=t(lang, "role_florist"), callback_data="role_florist")],
        [types.InlineKeyboardButton(text=t(lang, "role_owner"), callback_data="role_owner")]
    ])
    
    await callback.message.edit_text(t(lang, "registration_choose_role"), reply_markup=kb)

@router.callback_query(Registration.CHOOSE_ROLE, F.data.startswith("role_"))
async def choose_role(callback: types.CallbackQuery, state: FSMContext):
    role = callback.data.split("_")[1]
    data = await state.get_data()
    lang = data.get("lang", "ru")
    
    if role == "client":
        # –°—Ä–∞–∑—É —Å–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç–∞
        await create_user(callback.from_user.id, callback.from_user.first_name, lang, "client")
        await show_main_menu_callback(callback, lang, "client")
        await state.clear()
    else:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        async for session in get_session():
            result = await session.execute(select(Settings))
            settings = result.scalars().first()
            
            is_open = False
            if settings:
                if role == "florist":
                    is_open = settings.florist_registration_open
                elif role == "owner": 
                    is_open = settings.owner_registration_open
            
            if not is_open:
                await callback.message.edit_text(t(lang, "registration_closed"))
                await state.clear()
                return
        
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø—Ä–∏—á–∏–Ω—É
        await state.update_data(role=role)
        await state.set_state(Registration.REQUEST_REASON)
        await callback.message.edit_text(t(lang, "ask_role_reason"))

@router.message(Registration.REQUEST_REASON)
async def process_reason(message: types.Message, state: FSMContext):
    data = await state.get_data()
    lang = data.get("lang", "ru")
    role = data.get("role")
    reason = message.text.strip()
    
    # –°–æ–∑–¥–∞–µ–º –∑–∞—è–≤–∫—É
    async for session in get_session():
        # –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–∞–∫ –∫–ª–∏–µ–Ω—Ç–∞
        await create_user(message.from_user.id, message.from_user.first_name, lang, "client")
        
        # –ü–æ—Ç–æ–º —Å–æ–∑–¥–∞–µ–º –∑–∞—è–≤–∫—É –Ω–∞ —Ä–æ–ª—å
        request = RoleRequest(
            user_tg_id=str(message.from_user.id),
            requested_role=role,
            reason=reason
        )
        session.add(request)
        await session.commit()
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–æ–≤
        await notify_admins_about_request(message.bot, request, lang)
    
    await message.answer(t(lang, "role_request_sent"))
    await state.clear()

# –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def create_user(tg_id: int, first_name: str, lang: str, role: str = "client"):
    async for session in get_session():
        result = await session.execute(select(User).where(User.tg_id == str(tg_id)))
        user = result.scalars().first()
        
        if not user:
            user = User(
                tg_id=str(tg_id),
                first_name=first_name,
                lang=lang,
                role=role
            )
            session.add(user)
        else:
            user.lang = lang
            if role != "client":
                user.role = role
        
        await session.commit()

# –§—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞–∑–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é (–¥–ª—è –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π)
async def show_main_menu(message: types.Message, lang: str, role: str = "client"):
    kb_rows = [
        [types.InlineKeyboardButton(text=t(lang, "menu_catalog"), callback_data="open_catalog")],
        [types.InlineKeyboardButton(text=t(lang, "menu_cart"), callback_data="open_cart")],
        [types.InlineKeyboardButton(text=t(lang, "menu_orders"), callback_data="my_orders")]
    ]
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω—Å–∫–∏–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–∞
    if role == "owner":
        kb_rows.extend([
            [types.InlineKeyboardButton(text=t(lang, "menu_analytics"), callback_data="analytics")],
            [types.InlineKeyboardButton(text=t(lang, "menu_manage_products"), callback_data="manage_products")],
            [types.InlineKeyboardButton(text=t(lang, "menu_registration_settings"), callback_data="registration_settings")]
        ])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —Ñ–ª–æ—Ä–∏—Å—Ç–∞
    if role in ["florist", "owner"]:
        kb_rows.append([types.InlineKeyboardButton(text=t(lang, "menu_manage_orders"), callback_data="manage_orders")])
    
    kb = types.InlineKeyboardMarkup(inline_keyboard=kb_rows)
    await message.answer(f"{t(lang, 'menu_title')}", reply_markup=kb)

# –§—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞–∑–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é (–¥–ª—è callback)
async def show_main_menu_callback(callback: types.CallbackQuery, lang: str, role: str = "client"):
    kb_rows = [
        [types.InlineKeyboardButton(text=t(lang, "menu_catalog"), callback_data="open_catalog")],
        [types.InlineKeyboardButton(text=t(lang, "menu_cart"), callback_data="open_cart")],
        [types.InlineKeyboardButton(text=t(lang, "menu_orders"), callback_data="my_orders")]
    ]
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω—Å–∫–∏–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–∞
    if role == "owner":
        kb_rows.extend([
            [types.InlineKeyboardButton(text=t(lang, "menu_analytics"), callback_data="analytics")],
            [types.InlineKeyboardButton(text=t(lang, "menu_manage_products"), callback_data="manage_products")],
            [types.InlineKeyboardButton(text=t(lang, "menu_registration_settings"), callback_data="registration_settings")]
        ])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —Ñ–ª–æ—Ä–∏—Å—Ç–∞
    if role in ["florist", "owner"]:
        kb_rows.append([types.InlineKeyboardButton(text=t(lang, "menu_manage_orders"), callback_data="manage_orders")])
    
    kb = types.InlineKeyboardMarkup(inline_keyboard=kb_rows)
    await callback.message.edit_text(f"{t(lang, 'menu_title')}", reply_markup=kb)

# –ó–∞–≥–ª—É—à–∫–∏ –¥–ª—è –Ω–µ—Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π –∞–¥–º–∏–Ω–∞
@router.callback_query(F.data == "analytics")
async def analytics_placeholder(callback: types.CallbackQuery):
    await callback.message.edit_text("üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)")
    await callback.answer()

@router.callback_query(F.data == "manage_products") 
async def manage_products_placeholder(callback: types.CallbackQuery):
    await callback.message.edit_text("üì¶ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞–º–∏ (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)")
    await callback.answer()

@router.callback_query(F.data == "manage_orders")
async def manage_orders_placeholder(callback: types.CallbackQuery):
    await callback.message.edit_text("üìã –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞–º–∏ (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)")
    await callback.answer()

@router.callback_query(F.data == "registration_settings")
async def registration_settings_redirect(callback: types.CallbackQuery):
    # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –∫ –∞–¥–º–∏–Ω –æ–±—Ä–∞–±–æ—Ç—á–∏–∫—É
    await callback.message.edit_text("‚öôÔ∏è –ü–µ—Ä–µ—Ö–æ–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏...")
    # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∏–∑ admin.py
    from app.handlers.admin import manage_registration_settings
    await manage_registration_settings(callback)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
@router.callback_query(F.data == "main_menu")
async def main_menu_callback(callback: types.CallbackQuery):
    async for session in get_session():
        result = await session.execute(select(User).where(User.tg_id == str(callback.from_user.id)))
        user = result.scalars().first()
        
        if not user:
            await callback.message.edit_text("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ù–∞–∂–º–∏—Ç–µ /start")
            return
        
        await show_main_menu_callback(callback, user.lang or "ru", user.role or "client")
        await callback.answer()
async def notify_admins_about_request(bot, request: RoleRequest, lang: str):
    """–£–≤–µ–¥–æ–º–∏—Ç—å –∞–¥–º–∏–Ω–æ–≤ –æ –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–µ –Ω–∞ —Ä–æ–ª—å"""
    # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ—Ö –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤
    async for session in get_session():
        result = await session.execute(select(User).where(User.role == "owner"))
        owners = result.scalars().all()
        
        for owner in owners:
            try:
                text = (
                    f"üÜï –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ —Ä–æ–ª—å\n\n"
                    f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {request.user_tg_id}\n"
                    f"üéØ –†–æ–ª—å: {request.requested_role}\n"
                    f"üìù –ü—Ä–∏—á–∏–Ω–∞: {request.reason}\n"
                )
                
                kb = types.InlineKeyboardMarkup(inline_keyboard=[
                    [types.InlineKeyboardButton(text="‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", callback_data=f"approve_{request.id}")],
                    [types.InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_{request.id}")]
                ])
                
                await bot.send_message(chat_id=int(owner.tg_id), text=text, reply_markup=kb)
            except Exception as e:
                print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É {owner.tg_id}: {e}")