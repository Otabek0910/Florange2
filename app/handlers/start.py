from aiogram import Router, types, F
from aiogram.filters import Command
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext

from app.repositories import SettingsRepository
from app.services import NotificationService
from app.models import RequestedRoleEnum, RoleRequest, RoleEnum, User
from app.translate import t
from app.utils.validators import validate_phone

router = Router()

# FSM —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
class Registration(StatesGroup):
    CHOOSE_LANG = State()
    CHOOSE_ROLE = State()
    ASK_NAME = State()         # –ù–û–í–û–ï —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    ASK_PHONE = State()
    REQUEST_REASON = State()

@router.message(Command("start"))
async def start_cmd(message: types.Message, state: FSMContext, user=None, tg_user=None):
    """–ö–æ–º–∞–Ω–¥–∞ /start - –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è"""
    
    if user and user.lang:
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é
        await _show_main_menu(message, user.lang, user.role.value)
        return

    # –ù–û–í–´–ô –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –∑–∞–ø—É—Å–∫–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
    await state.clear()
    await state.set_state(Registration.CHOOSE_LANG)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º Telegram –¥–∞–Ω–Ω—ã–µ –≤ FSM
    await state.update_data(
        tg_id=str(tg_user.id),
        first_name=tg_user.first_name or ""
    )
    
    kb = types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(text="üá∑üá∫ –†—É—Å—Å–∫–∏–π", callback_data="lang_ru")],
        [types.InlineKeyboardButton(text="üá∫üáø O ªzbekcha", callback_data="lang_uz")]
    ])
    await message.answer(
        t("ru", "start_choose_lang") + "\n" + t("uz", "start_choose_lang"), 
        reply_markup=kb
    )

@router.callback_query(Registration.CHOOSE_LANG, F.data.startswith("lang_"))
async def set_language(callback: types.CallbackQuery, state: FSMContext, session=None):
    """–í—ã–±–æ—Ä —è–∑—ã–∫–∞"""
    lang = callback.data.split("_")[1]
    await state.update_data(lang=lang)
    await state.set_state(Registration.CHOOSE_ROLE)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    if session:
        settings_repo = SettingsRepository(session)
        florist_open = await settings_repo.get_bool_value("florist_registration_open", False)
        owner_open = await settings_repo.get_bool_value("owner_registration_open", False)
    else:
        florist_open = owner_open = False
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏
    buttons = [[types.InlineKeyboardButton(text=t(lang, "role_client"), callback_data="role_client")]]
    
    if florist_open:
        buttons.append([types.InlineKeyboardButton(text=t(lang, "role_florist"), callback_data="role_florist")])
    
    if owner_open:
        buttons.append([types.InlineKeyboardButton(text=t(lang, "role_owner"), callback_data="role_owner")])
    
    kb = types.InlineKeyboardMarkup(inline_keyboard=buttons)
    await callback.message.edit_text(t(lang, "registration_choose_role"), reply_markup=kb)

@router.callback_query(Registration.CHOOSE_ROLE, F.data.startswith("role_"))
async def choose_role(callback: types.CallbackQuery, state: FSMContext):
    """–í—ã–±–æ—Ä —Ä–æ–ª–∏ –∏ –ø–µ—Ä–µ—Ö–æ–¥ –∫ –∏–º–µ–Ω–∏"""
    role = callback.data.split("_")[1]
    data = await state.get_data()
    lang = data.get("lang", "ru")
    
    await state.update_data(role=role)
    await state.set_state(Registration.ASK_NAME)
    
    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
    await callback.message.delete()
    await callback.bot.send_message(
        chat_id=callback.message.chat.id,
        text=t(lang, "ask_full_name")
    )

@router.message(Registration.ASK_NAME)
async def process_name(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–º–µ–Ω–∏ –∏ —Ñ–∞–º–∏–ª–∏–∏"""
    name = message.text.strip()
    data = await state.get_data()
    lang = data.get("lang", "ru")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤–≤–µ–¥–µ–Ω–æ –º–∏–Ω–∏–º—É–º –∏–º—è
    if len(name) < 2:
        await message.answer(t(lang, "invalid_name"))
        return
    
    await state.update_data(full_name=name)
    await state.set_state(Registration.ASK_PHONE)
    
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await message.delete()
    
    # –°–æ–∑–¥–∞–µ–º –≥–∏–±—Ä–∏–¥–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    kb = types.ReplyKeyboardMarkup(
        keyboard=[
            [types.KeyboardButton(text=t(lang, "share_phone_button"), request_contact=True)],
            [types.KeyboardButton(text=t(lang, "enter_manually_button"))]
        ],
        resize_keyboard=True,
        one_time_keyboard=True
    )
    
    await message.answer(t(lang, "ask_phone_registration"), reply_markup=kb)

@router.message(Registration.ASK_PHONE, F.contact)
async def process_contact_phone(message: types.Message, state: FSMContext, user_service=None, session=None):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É"""
    phone = message.contact.phone_number
    
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–Ω—Ç–∞–∫—Ç–æ–º
    await message.delete()
    
    await _complete_phone_registration(message, state, phone, user_service, session)

@router.message(Registration.ASK_PHONE, F.text)
async def process_manual_phone(message: types.Message, state: FSMContext, user_service=None, session=None):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–Ω–æ–ø–∫—É "–í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é"
    if message.text == t("ru", "enter_manually_button") or message.text == t("uz", "enter_manually_button"):
        data = await state.get_data()
        lang = data.get("lang", "ru")
        
        await message.delete()
        await message.answer(
            t(lang, "enter_phone_manually"), 
            reply_markup=types.ReplyKeyboardRemove()
        )
        return
    
    phone = message.text.strip()
    data = await state.get_data()
    lang = data.get("lang", "ru")
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    if not validate_phone(phone):
        await message.delete()
        await message.answer(t(lang, "invalid_phone"))
        return
    
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await message.delete()
    
    await _complete_phone_registration(message, state, phone, user_service, session)

async def _complete_phone_registration(message: types.Message, state: FSMContext, phone: str, 
                                     user_service=None, session=None):
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Å —Ç–µ–ª–µ—Ñ–æ–Ω–æ–º"""
    data = await state.get_data()
    lang = data.get("lang", "ru")
    role = data.get("role", "client")
    full_name = data.get("full_name", data.get("first_name", ""))
    
    await state.update_data(phone=phone)
    
    # –£–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    success_msg = await message.answer("‚úÖ", reply_markup=types.ReplyKeyboardRemove())
    
    if role == "client":
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç–∞ —Å—Ä–∞–∑—É
        if user_service and session:
            # –†–∞–∑–¥–µ–ª—è–µ–º –∏–º—è –Ω–∞ first_name –∏ last_name –µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ
            name_parts = full_name.split(maxsplit=1)
            first_name = name_parts[0] if name_parts else ""
            last_name = name_parts[1] if len(name_parts) > 1 else ""
            
            new_user = User(
                tg_id=data["tg_id"],
                first_name=first_name,
                last_name=last_name,  # –ù—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≤ –º–æ–¥–µ–ª—å
                phone=phone,
                lang=lang,
                role=RoleEnum.client
            )
            
            await user_service.user_repo.create(new_user)
            await session.commit()
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≥–∞–ª–æ—á–∫–æ–π
        await success_msg.delete()
        
        welcome_msg = await message.answer(t(lang, "registration_complete"))
        await _show_main_menu(message, lang, "client")
        await state.clear()
        
    else:
        # –î–ª—è —Ñ–ª–æ—Ä–∏—Å—Ç–æ–≤/–≤–ª–∞–¥–µ–ª—å—Ü–µ–≤ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø—Ä–∏—á–∏–Ω—É
        await success_msg.delete()
        await state.set_state(Registration.REQUEST_REASON)
        await message.answer(t(lang, "ask_role_reason"))

@router.message(Registration.REQUEST_REASON)
async def process_reason(message: types.Message, state: FSMContext, user_service=None, session=None):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏—á–∏–Ω—ã –¥–ª—è –∑–∞—è–≤–∫–∏ –Ω–∞ —Ä–æ–ª—å"""
    data = await state.get_data()
    lang = data.get("lang", "ru")
    role = data.get("role")
    reason = message.text.strip()
    full_name = data.get("full_name", data.get("first_name", ""))
    
    if not session:
        await message.answer("–û—à–∏–±–∫–∞: —Å–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        await state.clear()
        return
    
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await message.delete()
    
    # –†–∞–∑–¥–µ–ª—è–µ–º –∏–º—è
    name_parts = full_name.split(maxsplit=1)
    first_name = name_parts[0] if name_parts else ""
    last_name = name_parts[1] if len(name_parts) > 1 else ""
    
    # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–∞–∫ –∫–ª–∏–µ–Ω—Ç–∞ (—Ä–æ–ª—å –∏–∑–º–µ–Ω–∏—Ç—Å—è –ø—Ä–∏ –æ–¥–æ–±—Ä–µ–Ω–∏–∏)
    new_user = User(
        tg_id=data["tg_id"],
        first_name=first_name,
        last_name=last_name,
        phone=data["phone"],
        lang=lang,
        role=RoleEnum.client  # –í—Ä–µ–º–µ–Ω–Ω–æ –∫–ª–∏–µ–Ω—Ç
    )
    await user_service.user_repo.create(new_user)
    await session.flush()
    
    # –°–æ–∑–¥–∞–µ–º –∑–∞—è–≤–∫—É –Ω–∞ —Ä–æ–ª—å
    role_enum = RequestedRoleEnum.florist if role == "florist" else RequestedRoleEnum.owner
    request = RoleRequest(
        user_id=new_user.id,
        requested_role=role_enum,
        reason=reason
    )
    session.add(request)
    await session.flush()
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–æ–≤
    if user_service:
        notification_service = NotificationService(message.bot)
        admins = await user_service.get_admins()
        await notification_service.notify_admins_about_role_request(admins, request)
    
    await session.commit()
    await message.answer(t(lang, "role_request_sent"))
    await state.clear()

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
async def _show_main_menu(message: types.Message, lang: str, role: str = "client"):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    kb = await _create_main_menu_keyboard(message.bot, lang, role)
    await message.answer(t(lang, 'menu_title'), reply_markup=kb)

async def _create_main_menu_keyboard(bot, lang: str, role: str) -> types.InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
    kb_rows = [
        [types.InlineKeyboardButton(text=t(lang, "menu_catalog"), callback_data="open_catalog")],
        [types.InlineKeyboardButton(text=t(lang, "menu_cart"), callback_data="open_cart")],
        [types.InlineKeyboardButton(text=t(lang, "menu_orders"), callback_data="my_orders")]
    ]
    
    if role == "owner":
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–∂–∏–¥–∞—é—â–∏—Ö –∑–∞—è–≤–æ–∫
        pending_count = await _get_pending_requests_count(bot)
        requests_text = t(lang, "menu_pending_requests")
        if pending_count > 0:
            requests_text += f" ({pending_count})"
        
        kb_rows.extend([
            [types.InlineKeyboardButton(text=t(lang, "menu_analytics"), callback_data="analytics")],
            [types.InlineKeyboardButton(text=t(lang, "menu_manage_products"), callback_data="manage_products")],
            [types.InlineKeyboardButton(text=requests_text, callback_data="manage_registration")]
        ])
    
    if role in ["florist", "owner"]:
        kb_rows.append([types.InlineKeyboardButton(text=t(lang, "menu_manage_orders"), callback_data="florist_orders")])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É —Å–º–µ–Ω—ã —è–∑—ã–∫–∞
    kb_rows.append([types.InlineKeyboardButton(text=f"üåç {lang.upper()}", callback_data="change_language")])
    
    return types.InlineKeyboardMarkup(inline_keyboard=kb_rows)

async def _get_pending_requests_count(bot) -> int:
    """–ü–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–∂–∏–¥–∞—é—â–∏—Ö –∑–∞—è–≤–æ–∫"""
    try:
        from app.database import get_session
        from app.services import UserService
        from sqlalchemy import select, func
        from app.models import RoleRequest, RequestStatusEnum
        
        async for session in get_session():
            user_service = UserService(session)
            result = await session.execute(
                select(func.count(RoleRequest.id))
                .where(RoleRequest.status == RequestStatusEnum.pending)
            )
            return result.scalar() or 0
    except:
        return 0

@router.callback_query(F.data == "main_menu")
async def main_menu_callback(callback: types.CallbackQuery, user=None):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    if user:
        kb = await _create_main_menu_keyboard(callback.bot, user.lang or "ru", user.role.value)
        await callback.message.edit_text(t(user.lang or "ru", 'menu_title'), reply_markup=kb)
        await callback.answer()
    else:
        await callback.message.edit_text("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ù–∞–∂–º–∏—Ç–µ /start")

@router.callback_query(F.data == "change_language")
async def change_language_handler(callback: types.CallbackQuery, user=None):
    """–°–º–µ–Ω–∞ —è–∑—ã–∫–∞"""
    if not user:
        await callback.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞
    kb = types.ReplyKeyboardMarkup(
        keyboard=[
            [types.KeyboardButton(text="üá∑üá∫ –†—É—Å—Å–∫–∏–π"), types.KeyboardButton(text="üá∫üáø O'zbekcha")]
        ],
        resize_keyboard=True,
        one_time_keyboard=True
    )
    
    await callback.message.answer(t(user.lang or "ru", "choose_language"), reply_markup=kb)
    await callback.answer()

@router.message(F.text.in_(["üá∑üá∫ –†—É—Å—Å–∫–∏–π", "üá∫üáø O'zbekcha"]))
async def process_language_change(message: types.Message, user=None, session=None):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–º–µ–Ω—ã —è–∑—ã–∫–∞"""
    if not user or not session:
        return
    
    new_lang = "ru" if "–†—É—Å—Å–∫–∏–π" in message.text else "uz"
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —è–∑—ã–∫ –≤ –ë–î
    user.lang = new_lang
    await session.commit()
    
    # –£–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –º–µ–Ω—é
    await message.answer("‚úÖ", reply_markup=types.ReplyKeyboardRemove())
    await _show_main_menu(message, new_lang, user.role.value)

# –ó–∞–≥–ª—É—à–∫–∏ (–≤—Ä–µ–º–µ–Ω–Ω–æ)
@router.callback_query(F.data == "analytics")
async def analytics_placeholder(callback: types.CallbackQuery):
    await callback.message.edit_text("üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)")

@router.callback_query(F.data == "manage_products") 
async def manage_products_placeholder(callback: types.CallbackQuery):
    await callback.message.edit_text("üì¶ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞–º–∏ (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ –º–µ–Ω—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ admin.py)
async def _show_main_menu_to_user(bot, chat_id: int, lang: str, role: str):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    kb = await _create_main_menu_keyboard(bot, lang, role)
    await bot.send_message(
        chat_id=chat_id,
        text=t(lang, 'menu_title'),
        reply_markup=kb
    )