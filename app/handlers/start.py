from aiogram import Router, types, F
from aiogram.filters import Command
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext

from app.repositories import SettingsRepository
from app.services import NotificationService
from app.models import RequestedRoleEnum, RoleRequest, RoleEnum, User
from app.translate import t
from app.utils.validators import validate_phone
from datetime import datetime

router = Router()

# FSM —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ (–ë–ï–ó REQUEST_REASON)
class Registration(StatesGroup):
    CHOOSE_LANG = State()
    CHOOSE_ROLE = State()
    ASK_NAME = State()
    ASK_PHONE = State()

@router.message(Command("start"))
async def start_cmd(message: types.Message, state: FSMContext, user=None, tg_user=None):
    """–ö–æ–º–∞–Ω–¥–∞ /start - –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è"""
    
    if user and user.lang:
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é
        await _show_main_menu(message, user.lang, user.role.value)
        return

    # –ù–û–í–´–ô –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –∑–∞–ø—É—Å–∫–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
    await state.clear()
    await state.set_state(Registration.CHOOSE_LANG)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º Telegram –¥–∞–Ω–Ω—ã–µ –≤ FSM
    await state.update_data(
        tg_id=str(tg_user.id),
        first_name=tg_user.first_name or ""
    )
    
    kb = types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(text="üá∑üá∫ –†—É—Å—Å–∫–∏–π", callback_data="lang_ru")],
        [types.InlineKeyboardButton(text="üá∫üáø O ªzbekcha", callback_data="lang_uz")]
    ])
    await message.answer(
        t("ru", "start_choose_lang") + "\n" + t("uz", "start_choose_lang"), 
        reply_markup=kb
    )

@router.callback_query(Registration.CHOOSE_LANG, F.data.startswith("lang_"))
async def set_language(callback: types.CallbackQuery, state: FSMContext, session=None):
    """–í—ã–±–æ—Ä —è–∑—ã–∫–∞"""
    lang = callback.data.split("_")[1]
    await state.update_data(lang=lang)
    await state.set_state(Registration.CHOOSE_ROLE)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    if session:
        settings_repo = SettingsRepository(session)
        florist_open = await settings_repo.get_bool_value("florist_registration_open", False)
        owner_open = await settings_repo.get_bool_value("owner_registration_open", False)
    else:
        florist_open = owner_open = False
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏
    buttons = [[types.InlineKeyboardButton(text=t(lang, "role_client"), callback_data="role_client")]]
    
    if florist_open:
        buttons.append([types.InlineKeyboardButton(text=t(lang, "role_florist"), callback_data="role_florist")])
    
    if owner_open:
        buttons.append([types.InlineKeyboardButton(text=t(lang, "role_owner"), callback_data="role_owner")])
    
    kb = types.InlineKeyboardMarkup(inline_keyboard=buttons)
    await callback.message.edit_text(t(lang, "registration_choose_role"), reply_markup=kb)

@router.callback_query(Registration.CHOOSE_ROLE, F.data.startswith("role_"))
async def choose_role(callback: types.CallbackQuery, state: FSMContext):
    """–í—ã–±–æ—Ä —Ä–æ–ª–∏ –∏ –ø–µ—Ä–µ—Ö–æ–¥ –∫ –∏–º–µ–Ω–∏"""
    role = callback.data.split("_")[1]
    data = await state.get_data()
    lang = data.get("lang", "ru")
    
    await state.update_data(role=role)
    await state.set_state(Registration.ASK_NAME)
    
    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
    await callback.message.delete()
    await callback.bot.send_message(
        chat_id=callback.message.chat.id,
        text=t(lang, "ask_full_name")
    )

@router.message(Registration.ASK_NAME)
async def process_name(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–º–µ–Ω–∏ –∏ —Ñ–∞–º–∏–ª–∏–∏"""
    name = message.text.strip()
    data = await state.get_data()
    lang = data.get("lang", "ru")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤–≤–µ–¥–µ–Ω–æ –º–∏–Ω–∏–º—É–º –∏–º—è
    if len(name) < 2:
        await message.answer(t(lang, "invalid_name"))
        return
    
    await state.update_data(full_name=name)
    await state.set_state(Registration.ASK_PHONE)
    
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await message.delete()
    
    # –°–æ–∑–¥–∞–µ–º –≥–∏–±—Ä–∏–¥–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    kb = types.ReplyKeyboardMarkup(
        keyboard=[
            [types.KeyboardButton(text=t(lang, "share_phone_button"), request_contact=True)],
            [types.KeyboardButton(text=t(lang, "enter_manually_button"))]
        ],
        resize_keyboard=True,
        one_time_keyboard=True
    )
    
    await message.answer(t(lang, "ask_phone_registration"), reply_markup=kb)

@router.message(Registration.ASK_PHONE, F.contact)
async def process_contact(message: types.Message, state: FSMContext, session=None):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–∞ –æ—Ç –∫–Ω–æ–ø–∫–∏"""
    phone = message.contact.phone_number
    data = await state.get_data()
    
    await _complete_registration(message, state, session, phone, data)

@router.message(Registration.ASK_PHONE, F.text)
async def process_phone_text(message: types.Message, state: FSMContext, session=None):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —Ç–µ–∫—Å—Ç–æ–º"""
    data = await state.get_data()
    lang = data.get("lang", "ru")
    
    if message.text == t(lang, "enter_manually_button"):
        await message.answer(t(lang, "enter_phone_manually"))
        return
    
    phone = message.text.strip()
    
    if not validate_phone(phone):
        await message.answer(t(lang, "invalid_phone"))
        return
    
    await _complete_registration(message, state, session, phone, data)

async def _complete_registration(message, state: FSMContext, session, phone: str, data: dict):
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
    lang = data.get("lang", "ru")
    role = data.get("role", "client")
    full_name = data.get("full_name", "")
    tg_id = data.get("tg_id")
    
    # –†–∞–∑–±–∏–≤–∞–µ–º –∏–º—è
    name_parts = full_name.split(" ", 1)
    first_name = name_parts[0] if name_parts else "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    last_name = name_parts[1] if len(name_parts) > 1 else ""
    
    try:
        if role == "client":
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç–∞ —Å—Ä–∞–∑—É
            from app.repositories import UserRepository
            user_repo = UserRepository(session)
            
            new_user = User(
                tg_id=tg_id,
                first_name=first_name,
                last_name=last_name,
                phone=phone,
                lang=lang,
                role=RoleEnum.client
            )
            
            await user_repo.create(new_user)
            await session.commit()
            
            # –ê–ì–†–ï–°–°–ò–í–ù–ê–Ø –û–ß–ò–°–¢–ö–ê –¥–ª—è –∫–ª–∏–µ–Ω—Ç–æ–≤
            await _aggressive_chat_cleanup(message, 20)
            
            # –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –º–µ–Ω—é
            welcome_msg = await message.answer(
                t(lang, "registration_complete"),
                reply_markup=types.ReplyKeyboardRemove()
            )
            await _show_main_menu(message, lang, "client")
            
            # –£–¥–∞–ª—è–µ–º welcome —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
            import asyncio
            asyncio.create_task(_delete_message_later(message.bot, message.chat.id, welcome_msg.message_id, 3))
            
        else:
            # –°–æ–∑–¥–∞–µ–º –∑–∞—è–≤–∫—É –¥–ª—è —Ñ–ª–æ—Ä–∏—Å—Ç–∞/–≤–ª–∞–¥–µ–ª—å—Ü–∞ –ë–ï–ó user_data –ø–æ–ª—è
            request_role = RequestedRoleEnum.florist if role == "florist" else RequestedRoleEnum.owner
            
            new_request = RoleRequest(
                user_tg_id=tg_id,
                requested_role=request_role,
                reason="–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∑–∞—è–≤–∫–∞",
                first_name=first_name,      # –ò–°–ü–û–õ–¨–ó–£–ï–ú –û–¢–î–ï–õ–¨–ù–´–ï –ü–û–õ–Ø
                last_name=last_name,        # –í–ú–ï–°–¢–û user_data
                phone=phone,
                lang=lang
                # –ë–ï–ó user_data=... - —ç—Ç–æ –ø–æ–ª–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!
            )
            
            session.add(new_request)
            await session.commit()
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–æ–≤
            from app.services import NotificationService, UserService
            notification_service = NotificationService(message.bot)
            user_service = UserService(session)
            
            admins = await user_service.user_repo.get_by_role(RoleEnum.owner)
            if admins:
                await notification_service.notify_admins_about_role_request(admins, new_request)
            
            # –ê–ì–†–ï–°–°–ò–í–ù–ê–Ø –û–ß–ò–°–¢–ö–ê –¥–ª—è —Ñ–ª–æ—Ä–∏—Å—Ç–æ–≤
            await _aggressive_chat_cleanup(message, 20)
            
            # –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            final_msg = await message.answer(
                f"‚úÖ –ó–∞—è–≤–∫–∞ –Ω–∞ —Ä–æ–ª—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É!\n\n–í —Ç–µ—á–µ–Ω–∏–µ —Å—É—Ç–æ–∫ —Å –≤–∞–º–∏ —Å–≤—è–∂—É—Ç—Å—è.",
                reply_markup=types.ReplyKeyboardRemove()
            )
            
            # –£–¥–∞–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
            import asyncio
            asyncio.create_task(_delete_message_later(message.bot, message.chat.id, final_msg.message_id, 5))
        
    except Exception as e:
        print(f"Registration error: {e}")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {str(e)}")
    
    await state.clear()

async def _aggressive_chat_cleanup(message, count: int = 20):
    """–ê–≥—Ä–µ—Å—Å–∏–≤–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ —á–∞—Ç–∞"""
    try:
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
        for i in range(count):
            try:
                await message.bot.delete_message(message.chat.id, message.message_id - i)
            except Exception:
                continue
    except Exception as e:
        print(f"Chat cleanup error: {e}")

async def _delete_message_later(bot, chat_id: int, message_id: int, delay: int):
    """–£–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ delay —Å–µ–∫—É–Ω–¥"""
    import asyncio
    await asyncio.sleep(delay)
    try:
        await bot.delete_message(chat_id, message_id)
    except:
        pass

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
async def _show_main_menu(message: types.Message, lang: str, role: str = "client"):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    kb = await _create_main_menu_keyboard(message.bot, lang, role)
    await message.answer(t(lang, 'menu_title'), reply_markup=kb)

async def _create_main_menu_keyboard(bot, lang: str, role: str) -> types.InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –ü–û –†–û–õ–Ø–ú"""
    
    kb_rows = []
    
    if role == "client":
        # –ú–ï–ù–Æ –ö–õ–ò–ï–ù–¢–ê
        kb_rows = [
            [types.InlineKeyboardButton(text=t(lang, "menu_catalog"), callback_data="open_catalog")],
            [types.InlineKeyboardButton(text=t(lang, "menu_cart"), callback_data="open_cart")],
            [types.InlineKeyboardButton(text=t(lang, "menu_orders"), callback_data="my_orders")],
            [types.InlineKeyboardButton(text=t(lang, "menu_consultation"), callback_data="consultation_start")],
            [types.InlineKeyboardButton(text=t(lang, "history_consultations"), callback_data="consultation_history")]
        ]
    
    elif role == "florist":
        # –ú–ï–ù–Æ –§–õ–û–†–ò–°–¢–ê
        kb_rows = [
            [types.InlineKeyboardButton(text="üìã –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞–º–∏", callback_data="manage_orders")],
            [types.InlineKeyboardButton(text="üí¨ –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏", callback_data="florist_consultations")],
            [types.InlineKeyboardButton(text="üìä –ú–æ–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="my_stats")],
            [types.InlineKeyboardButton(text="üì¶ –°–∫–ª–∞–¥", callback_data="warehouse_status")],
            [types.InlineKeyboardButton(text="üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å", callback_data="my_profile")]
        ]
    
    elif role == "owner":
        # –ú–ï–ù–Æ –í–õ–ê–î–ï–õ–¨–¶–ê
        pending_count = await _get_pending_requests_count(bot)
        requests_text = "üìã –ó–∞—è–≤–∫–∏ –Ω–∞ —Ä–æ–ª–∏"
        if pending_count > 0:
            requests_text += f" ({pending_count})"
        
        kb_rows = [
            [types.InlineKeyboardButton(text="üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞", callback_data="analytics")],
            [types.InlineKeyboardButton(text="üìã –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞–º–∏", callback_data="manage_orders")],
            [types.InlineKeyboardButton(text="üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–ª–æ–º", callback_data="manage_florists")],
            [types.InlineKeyboardButton(text="üì¶ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞–º–∏", callback_data="manage_products")],
            [types.InlineKeyboardButton(text="üì¶ –°–∫–ª–∞–¥ –∏ –ø–æ—Å—Ç–∞–≤–∫–∏", callback_data="warehouse_management")],
            [types.InlineKeyboardButton(text=requests_text, callback_data="manage_registration")],
            [types.InlineKeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã", callback_data="system_settings")]
        ]
    
    # –ö–Ω–æ–ø–∫–∞ —Å–º–µ–Ω—ã —è–∑—ã–∫–∞ –¥–ª—è –≤—Å–µ—Ö
    kb_rows.append([types.InlineKeyboardButton(text=f"üåç {lang.upper()}", callback_data="change_language")])
    
    return types.InlineKeyboardMarkup(inline_keyboard=kb_rows)

# –î–û–ë–ê–í–ò–¢–¨ –∑–∞–≥–ª—É—à–∫–∏ –¥–ª—è –Ω–æ–≤—ã—Ö –∫–Ω–æ–ø–æ–∫ —Ñ–ª–æ—Ä–∏—Å—Ç–∞ –≤ app/handlers/start.py:

@router.callback_query(F.data == "florist_consultations")
async def florist_consultations_placeholder(callback: types.CallbackQuery):
    kb = types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")]
    ])
    await callback.message.edit_text("üí¨ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è–º–∏ (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)", reply_markup=kb)

@router.callback_query(F.data == "my_stats")
async def my_stats_placeholder(callback: types.CallbackQuery):
    kb = types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")]
    ])
    await callback.message.edit_text("üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)", reply_markup=kb)

@router.callback_query(F.data == "warehouse_status")
async def warehouse_status_placeholder(callback: types.CallbackQuery):
    kb = types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")]
    ])
    await callback.message.edit_text("üì¶ –°—Ç–∞—Ç—É—Å —Å–∫–ª–∞–¥–∞ (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)", reply_markup=kb)

@router.callback_query(F.data == "my_profile")
async def my_profile_placeholder(callback: types.CallbackQuery):
    kb = types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")]
    ])
    await callback.message.edit_text("üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å —Ñ–ª–æ—Ä–∏—Å—Ç–∞ (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)", reply_markup=kb)

@router.callback_query(F.data == "warehouse_management")
async def warehouse_management_placeholder(callback: types.CallbackQuery):
    kb = types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")]
    ])
    await callback.message.edit_text("üì¶ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∫–ª–∞–¥–æ–º (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)", reply_markup=kb)

@router.callback_query(F.data == "system_settings")
async def system_settings_placeholder(callback: types.CallbackQuery):
    kb = types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")]
    ])
    await callback.message.edit_text("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)", reply_markup=kb)

async def _get_pending_requests_count(bot) -> int:
    """–ü–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–∂–∏–¥–∞—é—â–∏—Ö –∑–∞—è–≤–æ–∫"""
    try:
        from app.database.database import get_session
        from app.services import UserService
        from sqlalchemy import select, func
        from app.models import RoleRequest, RequestStatusEnum
        
        async for session in get_session():
            result = await session.execute(
                select(func.count(RoleRequest.id))
                .where(RoleRequest.status == RequestStatusEnum.pending)
            )
            return result.scalar() or 0
    except:
        return 0

@router.callback_query(F.data == "main_menu")
async def main_menu_callback(callback: types.CallbackQuery, user=None):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    if user:
        kb = await _create_main_menu_keyboard(callback.bot, user.lang or "ru", user.role.value)
        await callback.message.edit_text(t(user.lang or "ru", 'menu_title'), reply_markup=kb)
        await callback.answer()
    else:
        await callback.message.edit_text("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ù–∞–∂–º–∏—Ç–µ /start")

@router.callback_query(F.data == "change_language")
async def change_language_handler(callback: types.CallbackQuery, user=None):
    """–°–º–µ–Ω–∞ —è–∑—ã–∫–∞"""
    if not user:
        await callback.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞
    kb = types.ReplyKeyboardMarkup(
        keyboard=[
            [types.KeyboardButton(text="üá∑üá∫ –†—É—Å—Å–∫–∏–π"), types.KeyboardButton(text="üá∫üáø O'zbekcha")]
        ],
        resize_keyboard=True,
        one_time_keyboard=True
    )
    
    await callback.message.answer(t(user.lang or "ru", "choose_language"), reply_markup=kb)
    await callback.answer()

@router.message(F.text.in_(["üá∑üá∫ –†—É—Å—Å–∫–∏–π", "üá∫üáø O'zbekcha"]))
async def process_language_change(message: types.Message, user=None, session=None):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–º–µ–Ω—ã —è–∑—ã–∫–∞"""
    if not user or not session:
        return
    
    new_lang = "ru" if "–†—É—Å—Å–∫–∏–π" in message.text else "uz"
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —è–∑—ã–∫ –≤ –ë–î
    user.lang = new_lang
    await session.commit()
    
    # –£–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –º–µ–Ω—é
    await message.answer("‚úÖ", reply_markup=types.ReplyKeyboardRemove())
    await _show_main_menu(message, new_lang, user.role.value)

# –ó–∞–≥–ª—É—à–∫–∏ (–≤—Ä–µ–º–µ–Ω–Ω–æ)
@router.callback_query(F.data == "analytics")
async def analytics_placeholder(callback: types.CallbackQuery, user=None):
    kb = types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")]
    ])
    await callback.message.edit_text("üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)", reply_markup=kb)

@router.callback_query(F.data == "manage_products") 
async def manage_products_placeholder(callback: types.CallbackQuery, user=None):
    kb = types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")]
    ])
    await callback.message.edit_text("üì¶ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞–º–∏ (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)", reply_markup=kb)

@router.callback_query(F.data == "main_menu")
async def show_main_menu_callback(callback: types.CallbackQuery, user=None):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —á–µ—Ä–µ–∑ callback"""
    if not user:
        await callback.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    kb = await _create_main_menu_keyboard(callback.bot, user.lang, user.role.value)
    await callback.message.edit_text(t(user.lang, 'menu_title'), reply_markup=kb)