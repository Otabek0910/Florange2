from aiogram import Router, types, F
from sqlalchemy import select
from app.database import get_session
from app.models import User, Order, OrderItem, Product
from app.translate import t

router = Router()

async def _get_user_lang(session, tg_id: int) -> str:
    res = await session.execute(select(User).where(User.tg_id == str(tg_id)))
    user = res.scalars().first()
    return (user.lang or "ru") if user else "ru"

@router.callback_query(F.data == "my_orders")
async def show_my_orders(callback: types.CallbackQuery):
    async for session in get_session():
        lang = await _get_user_lang(session, callback.from_user.id)
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_result = await session.execute(select(User).where(User.tg_id == str(callback.from_user.id)))
        user = user_result.scalars().first()
        
        if not user:
            await callback.message.edit_text(t(lang, "user_not_found"))
            await callback.answer()
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        orders_result = await session.execute(
            select(Order).where(Order.user_id == user.id).order_by(Order.created_at.desc())
        )
        orders = orders_result.scalars().all()
        
        if not orders:
            kb = types.InlineKeyboardMarkup(inline_keyboard=[
                [types.InlineKeyboardButton(text=t(lang, "back_to_menu"), callback_data="main_menu")]
            ])
            await callback.message.edit_text(t(lang, "no_orders"), reply_markup=kb)
            await callback.answer()
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤
        lines = [t(lang, "my_orders_title"), ""]
        
        for order in orders[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –∑–∞–∫–∞–∑–æ–≤
            status_text = t(lang, f"order_status_{order.status.value}")
            date_str = order.created_at.strftime("%d.%m.%Y %H:%M") if order.created_at else ""
            
            lines.append(
                f"üÜî #{order.id} | {status_text}\n"
                f"üí∞ {order.total_price} {t(lang, 'currency')}\n"
                f"üìÖ {date_str}\n"
            )
        
        text = "\n".join(lines)
        
        kb = types.InlineKeyboardMarkup(inline_keyboard=[
            [types.InlineKeyboardButton(text=t(lang, "back_to_menu"), callback_data="main_menu")]
        ])
        
        await callback.message.edit_text(text, reply_markup=kb)
        await callback.answer()

# –î–ª—è —Ñ–ª–æ—Ä–∏—Å—Ç–æ–≤ - –ø—Ä–æ—Å–º–æ—Ç—Ä –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤
@router.callback_query(F.data == "florist_orders")
async def show_florist_orders(callback: types.CallbackQuery):
    async for session in get_session():
        lang = await _get_user_lang(session, callback.from_user.id)
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã
        orders_result = await session.execute(
            select(Order).where(Order.status.in_(["new", "await_florist"])).order_by(Order.created_at.desc())
        )
        orders = orders_result.scalars().all()
        
        if not orders:
            kb = types.InlineKeyboardMarkup(inline_keyboard=[
                [types.InlineKeyboardButton(text=t(lang, "back_to_menu"), callback_data="main_menu")]
            ])
            await callback.message.edit_text(t(lang, "no_new_orders"), reply_markup=kb)
            await callback.answer()
            return
        
        lines = [t(lang, "new_orders_title"), ""]
        
        for order in orders[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º 5 –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤
            date_str = order.created_at.strftime("%d.%m.%Y %H:%M") if order.created_at else ""
            
            lines.append(
                f"üÜî #{order.id}\n"
                f"üí∞ {order.total_price} {t(lang, 'currency')}\n"
                f"üìç {order.address}\n"
                f"üìû {order.phone}\n"
                f"üìÖ {date_str}\n"
            )
        
        text = "\n".join(lines)
        
        kb = types.InlineKeyboardMarkup(inline_keyboard=[
            [types.InlineKeyboardButton(text=t(lang, "back_to_menu"), callback_data="main_menu")]
        ])
        
        await callback.message.edit_text(text, reply_markup=kb)
        await callback.answer()

# –î–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–∞ - –≤—Å–µ –∑–∞–∫–∞–∑—ã
@router.callback_query(F.data == "all_orders")
async def show_all_orders(callback: types.CallbackQuery):
    async for session in get_session():
        lang = await _get_user_lang(session, callback.from_user.id)
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞–∫–∞–∑–æ–≤
        orders_result = await session.execute(select(Order).order_by(Order.created_at.desc()))
        orders = orders_result.scalars().all()
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
        status_counts = {}
        total_revenue = 0
        
        for order in orders:
            status = order.status.value
            status_counts[status] = status_counts.get(status, 0) + 1
            if order.status.value in ["delivered"]:
                total_revenue += float(order.total_price or 0)
        
        lines = [
            t(lang, "orders_analytics"),
            f"üìä {t(lang, 'total_orders')}: {len(orders)}",
            f"üí∞ {t(lang, 'total_revenue')}: {total_revenue} {t(lang, 'currency')}",
            ""
        ]
        
        for status, count in status_counts.items():
            status_text = t(lang, f"order_status_{status}")
            lines.append(f"{status_text}: {count}")
        
        text = "\n".join(lines)
        
        kb = types.InlineKeyboardMarkup(inline_keyboard=[
            [types.InlineKeyboardButton(text=t(lang, "back_to_menu"), callback_data="main_menu")]
        ])
        
        await callback.message.edit_text(text, reply_markup=kb)
        await callback.answer()