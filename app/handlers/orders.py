from aiogram import Router, types, F

from app.database import get_session
from app.services import UserService, OrderService
from app.models import RoleEnum, OrderStatusEnum
from app.translate import t
from app.exceptions import UserNotFoundError, OrderNotFoundError

router = Router()

async def _get_user_and_lang(session, tg_id: int):
    """–ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —è–∑—ã–∫ —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å"""
    user_service = UserService(session)
    try:
        user = await user_service.get_user_by_tg_id(str(tg_id))
        return user, user.lang or "ru"
    except UserNotFoundError:
        return None, "ru"

@router.callback_query(F.data == "my_orders")
async def show_my_orders(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–∫–∞–∑—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    async for session in get_session():
        user, lang = await _get_user_and_lang(session, callback.from_user.id)
        
        if not user:
            await callback.message.edit_text(t(lang, "user_not_found"))
            await callback.answer()
            return
        
        order_service = OrderService(session)
        orders = await order_service.get_user_orders(user.id)
        
        if not orders:
            kb = types.InlineKeyboardMarkup(inline_keyboard=[
                [types.InlineKeyboardButton(text=t(lang, "back_to_menu"), callback_data="main_menu")]
            ])
            await callback.message.edit_text(t(lang, "no_orders"), reply_markup=kb)
            await callback.answer()
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤
        lines = [t(lang, "my_orders_title"), ""]
        
        for order in orders[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –∑–∞–∫–∞–∑–æ–≤
            status_text = t(lang, f"order_status_{order.status.value}")
            date_str = order.created_at.strftime("%d.%m.%Y %H:%M") if order.created_at else ""
            
            lines.append(
                f"üÜî #{order.id} | {status_text}\n"
                f"üí∞ {order.total_price} {t(lang, 'currency')}\n"
                f"üìÖ {date_str}\n"
            )
        
        text = "\n".join(lines)
        
        kb = types.InlineKeyboardMarkup(inline_keyboard=[
            [types.InlineKeyboardButton(text=t(lang, "back_to_menu"), callback_data="main_menu")]
        ])
        
        await callback.message.edit_text(text, reply_markup=kb)
        await callback.answer()

@router.callback_query(F.data == "florist_orders")
async def show_florist_orders(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –Ω–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã –¥–ª—è —Ñ–ª–æ—Ä–∏—Å—Ç–æ–≤"""
    async for session in get_session():
        user, lang = await _get_user_and_lang(session, callback.from_user.id)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
        if not user or user.role not in [RoleEnum.florist, RoleEnum.owner]:
            await callback.answer(t(lang, "access_denied"), show_alert=True)
            return
        
        order_service = OrderService(session)
        orders = await order_service.get_orders_for_florist()
        
        if not orders:
            kb = types.InlineKeyboardMarkup(inline_keyboard=[
                [types.InlineKeyboardButton(text=t(lang, "back_to_menu"), callback_data="main_menu")]
            ])
            await callback.message.edit_text(t(lang, "no_new_orders"), reply_markup=kb)
            await callback.answer()
            return
        
        lines = [t(lang, "new_orders_title"), ""]
        
        for order in orders[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º 5 –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤
            date_str = order.created_at.strftime("%d.%m.%Y %H:%M") if order.created_at else ""
            status_text = t(lang, f"order_status_{order.status.value}")
            
            lines.append(
                f"üÜî #{order.id} | {status_text}\n"
                f"üí∞ {order.total_price} {t(lang, 'currency')}\n"
                f"üìç {order.address}\n"
                f"üìû {order.phone}\n"
                f"üìÖ {date_str}\n"
            )
        
        text = "\n".join(lines)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è –ø–µ—Ä–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤
        kb_rows = []
        for order in orders[:3]:  # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–≤—ã–º–∏ 3 –∑–∞–∫–∞–∑–∞–º–∏
            if order.status in [OrderStatusEnum.new, OrderStatusEnum.await_florist]:
                kb_rows.append([
                    types.InlineKeyboardButton(
                        text=f"‚úÖ –ü—Ä–∏–Ω—è—Ç—å #{order.id}", 
                        callback_data=f"accept_order_{order.id}"
                    ),
                    types.InlineKeyboardButton(
                        text=f"‚ùå –û—Ç–º–µ–Ω–∏—Ç—å #{order.id}", 
                        callback_data=f"cancel_order_{order.id}"
                    )
                ])
        
        kb_rows.append([types.InlineKeyboardButton(text=t(lang, "back_to_menu"), callback_data="main_menu")])
        kb = types.InlineKeyboardMarkup(inline_keyboard=kb_rows)
        
        await callback.message.edit_text(text, reply_markup=kb)
        await callback.answer()

@router.callback_query(F.data == "all_orders")
async def show_all_orders(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤—Å–µ—Ö –∑–∞–∫–∞–∑–æ–≤ (—Ç–æ–ª—å–∫–æ –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–∞)"""
    async for session in get_session():
        user, lang = await _get_user_and_lang(session, callback.from_user.id)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –≤–ª–∞–¥–µ–ª—å—Ü–∞
        if not user or user.role != RoleEnum.owner:
            await callback.answer(t(lang, "access_denied"), show_alert=True)
            return
        
        order_service = OrderService(session)
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–∫–∞–∑—ã –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        new_orders = await order_service.get_orders_for_florist()
        
        # TODO: –î–æ–±–∞–≤–∏—Ç—å –º–µ—Ç–æ–¥ –≤ OrderService –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–∫–∞–∑–æ–≤
        # –ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –º–µ—Ç–æ–¥—ã
        from sqlalchemy import select
        from app.models import Order
        result = await session.execute(select(Order).order_by(Order.created_at.desc()))
        all_orders = result.scalars().all()
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
        status_counts = {}
        total_revenue = 0
        
        for order in all_orders:
            status = order.status.value
            status_counts[status] = status_counts.get(status, 0) + 1
            if order.status == OrderStatusEnum.delivered:
                total_revenue += float(order.total_price or 0)
        
        lines = [
            t(lang, "orders_analytics"),
            f"üìä {t(lang, 'total_orders')}: {len(all_orders)}",
            f"üí∞ {t(lang, 'total_revenue')}: {total_revenue} {t(lang, 'currency')}",
            ""
        ]
        
        for status, count in status_counts.items():
            status_text = t(lang, f"order_status_{status}")
            lines.append(f"{status_text}: {count}")
        
        text = "\n".join(lines)
        
        kb = types.InlineKeyboardMarkup(inline_keyboard=[
            [types.InlineKeyboardButton(text=t(lang, "back_to_menu"), callback_data="main_menu")]
        ])
        
        await callback.message.edit_text(text, reply_markup=kb)
        await callback.answer()

# –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞–º–∏ —Ñ–ª–æ—Ä–∏—Å—Ç–∞–º–∏
@router.callback_query(F.data.startswith("accept_order_"))
async def florist_accept_order(callback: types.CallbackQuery):
    """–§–ª–æ—Ä–∏—Å—Ç –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –∑–∞–∫–∞–∑"""
    order_id = int(callback.data.split("_")[2])
    
    async for session in get_session():
        user, lang = await _get_user_and_lang(session, callback.from_user.id)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
        if not user or user.role not in [RoleEnum.florist, RoleEnum.owner]:
            await callback.answer(t(lang, "access_denied"), show_alert=True)
            return
        
        order_service = OrderService(session)
        
        try:
            order = await order_service.update_order_status(order_id, OrderStatusEnum.accepted)
            await session.commit()
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            await callback.answer("‚úÖ –ó–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç")
            
            # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤
            await show_florist_orders(callback)
            
        except OrderNotFoundError:
            await callback.answer(t(lang, "order_not_found"), show_alert=True)
        except Exception as e:
            await callback.answer(f"–û—à–∏–±–∫–∞: {str(e)}", show_alert=True)

@router.callback_query(F.data.startswith("cancel_order_"))
async def florist_cancel_order(callback: types.CallbackQuery):
    """–§–ª–æ—Ä–∏—Å—Ç –æ—Ç–º–µ–Ω—è–µ—Ç –∑–∞–∫–∞–∑"""
    order_id = int(callback.data.split("_")[2])
    
    async for session in get_session():
        user, lang = await _get_user_and_lang(session, callback.from_user.id)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
        if not user or user.role not in [RoleEnum.florist, RoleEnum.owner]:
            await callback.answer(t(lang, "access_denied"), show_alert=True)
            return
        
        order_service = OrderService(session)
        
        try:
            order = await order_service.update_order_status(order_id, OrderStatusEnum.canceled)
            await session.commit()
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            await callback.answer("‚ùå –ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω")
            
            # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤
            await show_florist_orders(callback)
            
        except OrderNotFoundError:
            await callback.answer(t(lang, "order_not_found"), show_alert=True)
        except Exception as e:
            await callback.answer(f"–û—à–∏–±–∫–∞: {str(e)}", show_alert=True)

# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã –¥–ª—è —Ñ–ª–æ—Ä–∏—Å—Ç–æ–≤
@router.callback_query(F.data.startswith("ready_order_"))
async def florist_ready_order(callback: types.CallbackQuery):
    """–§–ª–æ—Ä–∏—Å—Ç –æ—Ç–º–µ—á–∞–µ—Ç –∑–∞–∫–∞–∑ –≥–æ—Ç–æ–≤—ã–º"""
    order_id = int(callback.data.split("_")[2])
    
    async for session in get_session():
        user, lang = await _get_user_and_lang(session, callback.from_user.id)
        
        if not user or user.role not in [RoleEnum.florist, RoleEnum.owner]:
            await callback.answer(t(lang, "access_denied"), show_alert=True)
            return
        
        order_service = OrderService(session)
        
        try:
            order = await order_service.update_order_status(order_id, OrderStatusEnum.ready)
            await session.commit()
            
            await callback.answer("üéâ –ó–∞–∫–∞–∑ –≥–æ—Ç–æ–≤ –∫ –¥–æ—Å—Ç–∞–≤–∫–µ")
            await show_florist_orders(callback)
            
        except OrderNotFoundError:
            await callback.answer(t(lang, "order_not_found"), show_alert=True)
        except Exception as e:
            await callback.answer(f"–û—à–∏–±–∫–∞: {str(e)}", show_alert=True)