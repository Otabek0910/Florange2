from aiogram import Router, types, F

from app.database.database import get_session
from app.services import UserService, OrderService
from app.models import RoleEnum, OrderStatusEnum
from app.translate import t
from app.exceptions import UserNotFoundError, OrderNotFoundError
from datetime import datetime

router = Router()

async def _get_user_and_lang(session, tg_id: int):
    """–ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —è–∑—ã–∫ —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å"""
    user_service = UserService(session)
    try:
        user = await user_service.get_user_by_tg_id(str(tg_id))
        return user, user.lang or "ru"
    except UserNotFoundError:
        return None, "ru"

@router.callback_query(F.data == "my_orders")
async def show_my_orders(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–∫–∞–∑—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—É–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)"""
    async for session in get_session():
        user, lang = await _get_user_and_lang(session, callback.from_user.id)
        
        if not user:
            await callback.message.edit_text(t(lang, "user_not_found"))
            await callback.answer()
            return
        
        order_service = OrderService(session)
        orders = await order_service.get_user_orders(user.id)
        
        if not orders:
            kb = types.InlineKeyboardMarkup(inline_keyboard=[
                [types.InlineKeyboardButton(text=t(lang, "back_to_menu"), callback_data="main_menu")]
            ])
            await callback.message.edit_text(
                "üìù –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤\n\n"
                "–ó–∞–∫–∞–∂–∏—Ç–µ –±—É–∫–µ—Ç—ã –≤ –∫–∞—Ç–∞–ª–æ–≥–µ!",
                reply_markup=kb
            )
            await callback.answer()
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤
        lines = ["üìã <b>–ú–æ–∏ –∑–∞–∫–∞–∑—ã:</b>\n"]
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∑–∞–∫–∞–∑—ã –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
        status_groups = {}
        total_spent = 0
        
        for order in orders:
            status = order.status.value
            if status not in status_groups:
                status_groups[status] = []
            status_groups[status].append(order)
            total_spent += float(order.total_price or 0)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        lines.append(f"üíº <b>–í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤:</b> {len(orders)}")
        lines.append(f"üí∞ <b>–ü–æ—Ç—Ä–∞—á–µ–Ω–æ:</b> {total_spent:,.0f} —Å—É–º\n")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–∫–∞–∑—ã –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
        status_emoji = {
            "new": "üÜï",
            "await_florist": "‚è≥", 
            "accepted": "‚úÖ",
            "preparing": "üîÑ",
            "ready": "üéâ",
            "delivering": "üöö",
            "delivered": "‚úÖ",
            "canceled": "‚ùå"
        }
        
        for status, group_orders in status_groups.items():
            if not group_orders:
                continue
                
            status_text = t(lang, f"order_status_{status}")
            emoji = status_emoji.get(status, "üì¶")
            lines.append(f"{emoji} <b>{status_text} ({len(group_orders)}):</b>")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 –∑–∞–∫–∞–∑–∞ –≤ –∫–∞–∂–¥–æ–º —Å—Ç–∞—Ç—É—Å–µ
            for order in group_orders[:3]:
                date_str = order.created_at.strftime("%d.%m %H:%M") if order.created_at else ""
                
                # –°–æ–∫—Ä–∞—â–∞–µ–º –∞–¥—Ä–µ—Å –µ—Å–ª–∏ –¥–ª–∏–Ω–Ω—ã–π
                address = order.address or "–ù–µ —É–∫–∞–∑–∞–Ω"
                if len(address) > 30:
                    address = address[:27] + "..."
                
                lines.append(
                    f"  ‚Ä¢ <code>#{order.id}</code> | {order.total_price} —Å—É–º\n"
                    f"    üìç {address} | üìÖ {date_str}"
                )
            
            if len(group_orders) > 3:
                lines.append(f"    <i>... –∏ –µ—â–µ {len(group_orders) - 3}</i>")
            lines.append("")
        
        text = "\n".join(lines)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
        kb_rows = []
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è  
        active_statuses = ["new", "await_florist", "accepted", "preparing", "ready", "delivering"]
        has_active = any(order.status.value in active_statuses for order in orders)
        
        if has_active:
            kb_rows.append([types.InlineKeyboardButton(
                text="üîç –û—Ç—Å–ª–µ–¥–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ", 
                callback_data="track_active_orders"
            )])
        
        # –ö–Ω–æ–ø–∫–∞ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–∫–∞–∑
        if orders:
            last_order = orders[0]
            kb_rows.append([types.InlineKeyboardButton(
                text=f"üîÑ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–∫–∞–∑ #{last_order.id}", 
                callback_data=f"repeat_order_{last_order.id}"
            )])
        
        kb_rows.append([types.InlineKeyboardButton(
            text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", 
            callback_data="main_menu"
        )])
        
        kb = types.InlineKeyboardMarkup(inline_keyboard=kb_rows)
        
        await callback.message.edit_text(text, reply_markup=kb, parse_mode="HTML")
        await callback.answer()

@router.callback_query(F.data == "florist_orders")
async def show_florist_orders(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –Ω–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã –¥–ª—è —Ñ–ª–æ—Ä–∏—Å—Ç–æ–≤"""
    async for session in get_session():
        user, lang = await _get_user_and_lang(session, callback.from_user.id)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
        if not user or user.role not in [RoleEnum.florist, RoleEnum.owner]:
            await callback.answer(t(lang, "access_denied"), show_alert=True)
            return
        
        order_service = OrderService(session)
        orders = await order_service.get_orders_for_florist()
        
        if not orders:
            kb = types.InlineKeyboardMarkup(inline_keyboard=[
                [types.InlineKeyboardButton(text=t(lang, "back_to_menu"), callback_data="main_menu")]
            ])
            await callback.message.edit_text(t(lang, "no_new_orders"), reply_markup=kb)
            await callback.answer()
            return
        
        lines = [t(lang, "new_orders_title"), ""]
        
        for order in orders[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º 5 –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤
            date_str = order.created_at.strftime("%d.%m.%Y %H:%M") if order.created_at else ""
            status_text = t(lang, f"order_status_{order.status.value}")
            
            lines.append(
                f"üÜî #{order.id} | {status_text}\n"
                f"üí∞ {order.total_price} {t(lang, 'currency')}\n"
                f"üìç {order.address}\n"
                f"üìû {order.phone}\n"
                f"üìÖ {date_str}\n"
            )
        
        text = "\n".join(lines)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è –ø–µ—Ä–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤
        kb_rows = []
        for order in orders[:3]:  # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–≤—ã–º–∏ 3 –∑–∞–∫–∞–∑–∞–º–∏
            if order.status in [OrderStatusEnum.new, OrderStatusEnum.await_florist]:
                kb_rows.append([
                    types.InlineKeyboardButton(
                        text=f"‚úÖ –ü—Ä–∏–Ω—è—Ç—å #{order.id}", 
                        callback_data=f"accept_order_{order.id}"
                    ),
                    types.InlineKeyboardButton(
                        text=f"‚ùå –û—Ç–º–µ–Ω–∏—Ç—å #{order.id}", 
                        callback_data=f"cancel_order_{order.id}"
                    )
                ])
        
        kb_rows.append([types.InlineKeyboardButton(text=t(lang, "back_to_menu"), callback_data="main_menu")])
        kb = types.InlineKeyboardMarkup(inline_keyboard=kb_rows)
        
        await callback.message.edit_text(text, reply_markup=kb)
        await callback.answer()

@router.callback_query(F.data == "all_orders")
async def show_all_orders(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤—Å–µ—Ö –∑–∞–∫–∞–∑–æ–≤ (—Ç–æ–ª—å–∫–æ –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–∞)"""
    async for session in get_session():
        user, lang = await _get_user_and_lang(session, callback.from_user.id)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –≤–ª–∞–¥–µ–ª—å—Ü–∞
        if not user or user.role != RoleEnum.owner:
            await callback.answer(t(lang, "access_denied"), show_alert=True)
            return
        
        order_service = OrderService(session)
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–∫–∞–∑—ã –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        new_orders = await order_service.get_orders_for_florist()
        
        # TODO: –î–æ–±–∞–≤–∏—Ç—å –º–µ—Ç–æ–¥ –≤ OrderService –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–∫–∞–∑–æ–≤
        # –ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –º–µ—Ç–æ–¥—ã
        from sqlalchemy import select
        from app.models import Order
        result = await session.execute(select(Order).order_by(Order.created_at.desc()))
        all_orders = result.scalars().all()
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
        status_counts = {}
        total_revenue = 0
        
        for order in all_orders:
            status = order.status.value
            status_counts[status] = status_counts.get(status, 0) + 1
            if order.status == OrderStatusEnum.delivered:
                total_revenue += float(order.total_price or 0)
        
        lines = [
            t(lang, "orders_analytics"),
            f"üìä {t(lang, 'total_orders')}: {len(all_orders)}",
            f"üí∞ {t(lang, 'total_revenue')}: {total_revenue} {t(lang, 'currency')}",
            ""
        ]
        
        for status, count in status_counts.items():
            status_text = t(lang, f"order_status_{status}")
            lines.append(f"{status_text}: {count}")
        
        text = "\n".join(lines)
        
        kb = types.InlineKeyboardMarkup(inline_keyboard=[
            [types.InlineKeyboardButton(text=t(lang, "back_to_menu"), callback_data="main_menu")]
        ])
        
        await callback.message.edit_text(text, reply_markup=kb)
        await callback.answer()

# –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞–º–∏ —Ñ–ª–æ—Ä–∏—Å—Ç–∞–º–∏
@router.callback_query(F.data.startswith("accept_order_"))
async def florist_accept_order(callback: types.CallbackQuery):
    """–§–ª–æ—Ä–∏—Å—Ç –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –∑–∞–∫–∞–∑"""
    order_id = int(callback.data.split("_")[2])
    
    async for session in get_session():
        user, lang = await _get_user_and_lang(session, callback.from_user.id)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
        if not user or user.role not in [RoleEnum.florist, RoleEnum.owner]:
            await callback.answer(t(lang, "access_denied"), show_alert=True)
            return
        
        order_service = OrderService(session)
        
        try:
            order = await order_service.update_order_status(order_id, OrderStatusEnum.accepted)
            await session.commit()
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            await callback.answer("‚úÖ –ó–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç")
            
            # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤
            await show_florist_orders(callback)
            
        except OrderNotFoundError:
            await callback.answer(t(lang, "order_not_found"), show_alert=True)
        except Exception as e:
            await callback.answer(f"–û—à–∏–±–∫–∞: {str(e)}", show_alert=True)

@router.callback_query(F.data.startswith("cancel_order_"))
async def florist_cancel_order(callback: types.CallbackQuery):
    """–§–ª–æ—Ä–∏—Å—Ç –æ—Ç–º–µ–Ω—è–µ—Ç –∑–∞–∫–∞–∑ (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)"""
    try:
        order_id = int(callback.data.split("_")[2])
    except (IndexError, ValueError):
        await callback.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã", show_alert=True)
        return
    
    async for session in get_session():
        user, lang = await _get_user_and_lang(session, callback.from_user.id)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
        if not user or user.role not in [RoleEnum.florist, RoleEnum.owner]:
            await callback.answer(t(lang, "access_denied"), show_alert=True)
            return
        
        order_service = OrderService(session)
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑ –ø–µ—Ä–µ–¥ –∏–∑–º–µ–Ω–µ–Ω–∏–µ–º
            order = await order_service.get_order_with_details(order_id)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–æ–∂–Ω–æ –ª–∏ –æ—Ç–º–µ–Ω–∏—Ç—å
            if order.status in [OrderStatusEnum.delivered, OrderStatusEnum.canceled]:
                await callback.answer("‚ùå –ó–∞–∫–∞–∑ —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω –∏–ª–∏ –æ—Ç–º–µ–Ω–µ–Ω", show_alert=True)
                return
            
            # –û—Ç–º–µ–Ω—è–µ–º –∑–∞–∫–∞–∑
            updated_order = await order_service.update_order_status(order_id, OrderStatusEnum.canceled)
            await session.commit()
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –° –ö–ù–û–ü–ö–û–ô –í–û–ó–í–†–ê–¢–ê
            from datetime import datetime
            user_name = getattr(order.user, 'first_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ') or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
            
            new_text = (
                f"‚ùå <b>–ó–∞–∫–∞–∑ #{order_id} –û–¢–ú–ï–ù–ï–ù</b>\n\n"
                f"üë§ –ö–ª–∏–µ–Ω—Ç: {user_name}\n"
                f"üí∞ –°—É–º–º–∞: {order.total_price} —Å—É–º\n"
                f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {order.phone}\n"
                f"üìç –ê–¥—Ä–µ—Å: {order.address}\n\n"
                f"üóì –û—Ç–º–µ–Ω–µ–Ω: {datetime.now().strftime('%d.%m.%Y %H:%M')}\n"
                f"üë§ –û—Ç–º–µ–Ω–∏–ª: {user.first_name}"
            )
            
            # –î–û–ë–ê–í–õ–Ø–ï–ú –ö–ù–û–ü–ö–£ –í–û–ó–í–†–ê–¢–ê
            kb = types.InlineKeyboardMarkup(inline_keyboard=[
                [types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∑–∞–∫–∞–∑–∞–º", callback_data="manage_orders")],
                [types.InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
            ])
            
            await callback.message.edit_text(new_text, reply_markup=kb, parse_mode="HTML")
            await callback.answer("‚úÖ –ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω")
            
        except OrderNotFoundError:
            await callback.answer("‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        except Exception as e:
            print(f"Cancel order error: {e}")
            await callback.answer(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã: {str(e)}", show_alert=True)

# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã –¥–ª—è —Ñ–ª–æ—Ä–∏—Å—Ç–æ–≤
@router.callback_query(F.data.startswith("ready_order_"))
async def florist_ready_order(callback: types.CallbackQuery):
    """–§–ª–æ—Ä–∏—Å—Ç –æ—Ç–º–µ—á–∞–µ—Ç –∑–∞–∫–∞–∑ –≥–æ—Ç–æ–≤—ã–º"""
    order_id = int(callback.data.split("_")[2])
    
    async for session in get_session():
        user, lang = await _get_user_and_lang(session, callback.from_user.id)
        
        if not user or user.role not in [RoleEnum.florist, RoleEnum.owner]:
            await callback.answer(t(lang, "access_denied"), show_alert=True)
            return
        
        order_service = OrderService(session)
        
        try:
            order = await order_service.update_order_status(order_id, OrderStatusEnum.ready)
            await session.commit()
            
            await callback.answer("üéâ –ó–∞–∫–∞–∑ –≥–æ—Ç–æ–≤ –∫ –¥–æ—Å—Ç–∞–≤–∫–µ")
            await show_florist_orders(callback)
            
        except OrderNotFoundError:
            await callback.answer(t(lang, "order_not_found"), show_alert=True)
        except Exception as e:
            await callback.answer(f"–û—à–∏–±–∫–∞: {str(e)}", show_alert=True)

@router.callback_query(F.data == "track_active_orders")
async def track_active_orders(callback: types.CallbackQuery):
    """–û—Ç—Å–ª–µ–¥–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã"""
    async for session in get_session():
        user, lang = await _get_user_and_lang(session, callback.from_user.id)
        
        if not user:
            await callback.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        order_service = OrderService(session)
        orders = await order_service.get_user_orders(user.id)
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã
        active_statuses = ["new", "await_florist", "accepted", "preparing", "ready", "delivering"]
        active_orders = [o for o in orders if o.status.value in active_statuses]
        
        if not active_orders:
            await callback.answer("üéâ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤", show_alert=True)
            return
        
        lines = ["üîç <b>–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤:</b>\n"]
        
        for order in active_orders:
            status_text = t(lang, f"order_status_{order.status.value}")
            date_str = order.created_at.strftime("%d.%m %H:%M") if order.created_at else ""
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —ç—Ç–∞–ø –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            progress = {
                "new": "‚ñ´Ô∏è‚ñ´Ô∏è‚ñ´Ô∏è‚ñ´Ô∏è‚ñ´Ô∏è",
                "await_florist": "üîµ‚ñ´Ô∏è‚ñ´Ô∏è‚ñ´Ô∏è‚ñ´Ô∏è", 
                "accepted": "üîµüîµ‚ñ´Ô∏è‚ñ´Ô∏è‚ñ´Ô∏è",
                "preparing": "üîµüîµüîµ‚ñ´Ô∏è‚ñ´Ô∏è",
                "ready": "üîµüîµüîµüîµ‚ñ´Ô∏è",
                "delivering": "üîµüîµüîµüîµüîµ"
            }.get(order.status.value, "‚ñ´Ô∏è‚ñ´Ô∏è‚ñ´Ô∏è‚ñ´Ô∏è‚ñ´Ô∏è")
            
            lines.append(
                f"üÜî <b>#{order.id}</b> | {status_text}\n"
                f"üìä {progress}\n"
                f"üí∞ {order.total_price} —Å—É–º | üìÖ {date_str}\n"
            )
        
        text = "\n".join(lines)
        
        kb = types.InlineKeyboardMarkup(inline_keyboard=[
            [types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∑–∞–∫–∞–∑–∞–º", callback_data="my_orders")]
        ])
        
        await callback.message.edit_text(text, reply_markup=kb, parse_mode="HTML")
        await callback.answer()

@router.callback_query(F.data.startswith("repeat_order_"))
async def repeat_order(callback: types.CallbackQuery):
    """–ü–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–∫–∞–∑"""
    try:
        order_id = int(callback.data.split("_")[2])
    except (IndexError, ValueError):
        await callback.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã", show_alert=True)
        return
    
    await callback.answer("üîÑ –§—É–Ω–∫—Ü–∏—è –ø–æ–≤—Ç–æ—Ä–∞ –∑–∞–∫–∞–∑–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ", show_alert=True)
    # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ª–æ–≥–∏–∫—É –ø–æ–≤—Ç–æ—Ä–∞ –∑–∞–∫–∞–∑–∞

@router.callback_query(F.data == "manage_orders")
async def manage_orders_callback(callback: types.CallbackQuery):
    """–ü–µ—Ä–µ—Ö–æ–¥ –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –∑–∞–∫–∞–∑–∞–º–∏"""
    await show_florist_orders(callback)