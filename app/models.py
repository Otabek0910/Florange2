from sqlalchemy import Column, Integer, String, Text, Numeric, Boolean, ForeignKey, DateTime, Enum, Date  # ‚Üê –î–û–ë–ê–í–ò–¢–¨ Date
from sqlalchemy.orm import relationship, declarative_base
from datetime import datetime
import enum
import sqlalchemy as sa

Base = declarative_base()

class RoleEnum(enum.Enum):
    client = "client"
    florist = "florist" 
    courier = "courier"
    owner = "owner"

class OrderStatusEnum(enum.Enum):
    new = "new"
    await_florist = "await_florist"
    accepted = "accepted"
    preparing = "preparing"
    ready = "ready"
    delivering = "delivering"
    delivered = "delivered"
    canceled = "canceled"

class InventoryOpEnum(enum.Enum):
    incoming = "incoming"
    sale = "sale"
    loss = "loss"
    correction = "correction"

class RequestedRoleEnum(enum.Enum):
    florist = "florist"
    owner = "owner"

class RequestStatusEnum(enum.Enum):
    pending = "pending"
    approved = "approved" 
    rejected = "rejected"

class ConsultationStatusEnum(enum.Enum):
    active = "active"
    completed_by_client = "completed_by_client"
    completed_by_florist = "completed_by_florist"
    expired = "expired"

class SupplyStatusEnum(enum.Enum):
    pending = "pending"      # –°–æ–∑–¥–∞–Ω —Ñ–ª–æ—Ä–∏—Å—Ç–æ–º
    approved = "approved"    # –û–¥–æ–±—Ä–µ–Ω –≤–ª–∞–¥–µ–ª—å—Ü–µ–º  
    ordered = "ordered"      # –û—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ—Å—Ç–∞–≤—â–∏–∫—É
    delivered = "delivered"  # –î–æ—Å—Ç–∞–≤–ª–µ–Ω –Ω–∞ —Å–∫–ª–∞–¥
    rejected = "rejected"    # –û—Ç–∫–ª–æ–Ω–µ–Ω

class MovementTypeEnum(enum.Enum):
    purchase = "purchase"    # –ü–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ –æ—Ç –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞
    sale = "sale"           # –°–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–∏ –ø—Ä–æ–¥–∞–∂–µ
    loss = "loss"           # –ü–æ—Ç–µ—Ä—è/–ø–æ—Ä—á–∞
    expired = "expired"     # –ü—Ä–æ—Å—Ä–æ—á–∫–∞
    correction = "correction" # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –æ—Å—Ç–∞—Ç–∫–æ–≤
    return_supplier = "return_supplier" # –í–æ–∑–≤—Ä–∞—Ç –ø–æ—Å—Ç–∞–≤—â–∏–∫—É


class User(Base):
    __tablename__ = "users"
    id = Column(Integer, primary_key=True)
    tg_id = Column(String(50), unique=True, nullable=False)
    first_name = Column(String(100))
    last_name = Column(String(100))
    phone = Column(String(20))
    lang = Column(String(5))
    role = Column(Enum(RoleEnum), default=RoleEnum.client)
    created_at = Column(DateTime, default=datetime.utcnow)

class Category(Base):
    __tablename__ = "categories"
    id = Column(Integer, primary_key=True)
    name_ru = Column(String(255), nullable=False)
    name_uz = Column(String(255), nullable=False)
    sort = Column(Integer)
    created_at = Column(DateTime, default=datetime.utcnow)
    products = relationship("Product", back_populates="category")

    @property
    def name(self):
        return self.name_ru  # –î–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏

class Product(Base):
    __tablename__ = "products"
    id = Column(Integer, primary_key=True)
    category_id = Column(Integer, ForeignKey("categories.id"), nullable=False)
    name_ru = Column(String(255), nullable=False)
    name_uz = Column(String(255), nullable=False)
    desc_ru = Column(Text)
    desc_uz = Column(Text)
    price = Column(Numeric(10, 2), nullable=False)
    photo_file_id = Column(String(255))
    photo_url = Column(String(500))
    stock_qty = Column(Integer, default=0)
    is_active = Column(Boolean, default=True)
    created_at = Column(DateTime, default=datetime.utcnow)
    category = relationship("Category", back_populates="products")

    @property
    def name(self):
        return self.name_ru  # –î–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    
    @property 
    def description(self):
        return self.desc_ru  # –î–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏

class Order(Base):
    __tablename__ = "orders"
    id = Column(Integer, primary_key=True)
    user_id = Column(Integer, ForeignKey("users.id"), nullable=False)
    florist_id = Column(Integer, ForeignKey("users.id"))  # üÜï –ö–¢–û –ü–†–ò–ù–Ø–õ –ó–ê–ö–ê–ó
    total_price = Column(Numeric(10, 2), nullable=False, default=0)
    status = Column(Enum(OrderStatusEnum), default=OrderStatusEnum.new)
    address = Column(Text)
    phone = Column(String(20))
    slot_at = Column(DateTime)
    comment = Column(Text)
    created_at = Column(DateTime, default=datetime.utcnow)
    user = relationship("User", foreign_keys=[user_id])
    florist = relationship("User", foreign_keys=[florist_id])  # üÜï
    items = relationship("OrderItem", back_populates="order")

class OrderItem(Base):
    __tablename__ = "order_items"
    id = Column(Integer, primary_key=True)
    order_id = Column(Integer, ForeignKey("orders.id"), nullable=False)
    product_id = Column(Integer, ForeignKey("products.id"), nullable=False)
    qty = Column(Integer, nullable=False)
    price = Column(Numeric(10, 2), nullable=False)
    order = relationship("Order", back_populates="items")
    product = relationship("Product")

class InventoryLog(Base):
    __tablename__ = "inventory_log"
    id = Column(Integer, primary_key=True)
    product_id = Column(Integer, ForeignKey("products.id"), nullable=False)
    op = Column(Enum(InventoryOpEnum), nullable=False)
    qty = Column(Integer, nullable=False)
    note = Column(Text)
    created_at = Column(DateTime, default=datetime.utcnow)
    product = relationship("Product")

class Settings(Base):
    __tablename__ = "settings"
    id = Column(Integer, primary_key=True)
    key = Column(String(100), unique=True, nullable=False)
    value = Column(String(500), nullable=False)
    created_at = Column(DateTime, default=datetime.utcnow)
    updated_at = Column(DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)

class RoleRequest(Base):
    __tablename__ = "role_requests"
    id = Column(Integer, primary_key=True)
    user_id = Column(Integer, ForeignKey("users.id"), nullable=True)
    user_tg_id = Column(String(50), nullable=False)  # üÜï –û–°–ù–û–í–ù–û–ô –ö–õ–Æ–ß
    requested_role = Column(Enum(RequestedRoleEnum), nullable=False)
    status = Column(Enum(RequestStatusEnum), default=RequestStatusEnum.pending)
    reason = Column(Text, default="–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∑–∞—è–≤–∫–∞")
    
    # üÜï –°–¢–†–£–ö–¢–£–†–ò–†–û–í–ê–ù–ù–´–ï –ü–û–õ–Ø (–≤–º–µ—Å—Ç–æ user_data)
    first_name = Column(String(100))
    last_name = Column(String(100))  
    phone = Column(String(20))
    lang = Column(String(5))
    
    approved_by = Column(Integer, ForeignKey("users.id"))
    created_at = Column(DateTime, default=datetime.utcnow)
    updated_at = Column(DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)
    
    approver = relationship("User", foreign_keys=[approved_by])

# ========== –ö–û–ù–°–£–õ–¨–¢–ê–¶–ò–ò (–û–°–¢–ê–í–õ–Ø–ï–ú –ö–ê–ö –ï–°–¢–¨) ==========

class FloristProfile(Base):
    __tablename__ = "florist_profiles"
    id = Column(Integer, primary_key=True)
    user_id = Column(Integer, ForeignKey("users.id"), unique=True, nullable=False)
    bio = Column(Text, default="")
    specialization = Column(String(255), default="")
    is_active = Column(Boolean, default=True)
    last_seen = Column(DateTime, default=datetime.utcnow)
    rating = Column(Numeric(3, 2), default=0.0)  # 0.00 –¥–æ 5.00
    reviews_count = Column(Integer, default=0)
    created_at = Column(DateTime, default=datetime.utcnow)
    updated_at = Column(DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)
    
    user = relationship("User")

class Consultation(Base):
    __tablename__ = "consultations"
    id = Column(Integer, primary_key=True)
    client_id = Column(Integer, ForeignKey("users.id"), nullable=False)
    florist_id = Column(Integer, ForeignKey("users.id"), nullable=False)
    status = Column(Enum(ConsultationStatusEnum), default=ConsultationStatusEnum.active)
    started_at = Column(DateTime, default=datetime.utcnow)
    completed_at = Column(DateTime)
    theme = Column(String(255))  # –ò–ò-–≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º–∞—è —Ç–µ–º–∞
    archive_id = Column(String(100))  # ID –∞—Ä—Ö–∏–≤–∞ –≤ –∫–∞–Ω–∞–ª–µ
    created_at = Column(DateTime, default=datetime.utcnow)
    
    client = relationship("User", foreign_keys=[client_id])
    florist = relationship("User", foreign_keys=[florist_id])
    messages = relationship("ConsultationMessage", back_populates="consultation")

class ConsultationMessage(Base):
    __tablename__ = "consultation_messages"
    id = Column(Integer, primary_key=True)
    consultation_id = Column(Integer, ForeignKey("consultations.id"), nullable=False)
    sender_id = Column(Integer, ForeignKey("users.id"), nullable=False)
    message_text = Column(Text)
    photo_file_id = Column(String(255))
    sent_at = Column(DateTime, default=datetime.utcnow)
    
    consultation = relationship("Consultation", back_populates="messages")
    sender = relationship("User")

class FloristReview(Base):
    __tablename__ = "florist_reviews"
    id = Column(Integer, primary_key=True)
    consultation_id = Column(Integer, ForeignKey("consultations.id"), nullable=False)
    client_id = Column(Integer, ForeignKey("users.id"), nullable=False)
    florist_id = Column(Integer, ForeignKey("users.id"), nullable=False)
    rating = Column(Integer, nullable=False)  # 1-5 –∑–≤–µ–∑–¥
    created_at = Column(DateTime, default=datetime.utcnow)
    
    consultation = relationship("Consultation")
    client = relationship("User", foreign_keys=[client_id])
    florist = relationship("User", foreign_keys=[florist_id])

class Flower(Base):
    """–ë–∞–∑–æ–≤—ã–µ —Ü–≤–µ—Ç—ã/–º–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–ª—è –±—É–∫–µ—Ç–æ–≤"""
    __tablename__ = "flowers"
    
    id = Column(Integer, primary_key=True)
    name_ru = Column(String(255), nullable=False)
    name_uz = Column(String(255), nullable=False)
    unit_type = Column(String(20), nullable=False)  # 'piece', 'bundle', 'kg'
    min_stock = Column(Integer, default=0)  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –æ—Å—Ç–∞—Ç–æ–∫
    max_stock = Column(Integer, default=100)  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –æ—Å—Ç–∞—Ç–æ–∫
    shelf_life_days = Column(Integer, default=7)  # –°—Ä–æ–∫ –≥–æ–¥–Ω–æ—Å—Ç–∏ –≤ –¥–Ω—è—Ö
    is_active = Column(Boolean, default=True)
    created_at = Column(DateTime, default=datetime.utcnow)
    
    # –°–≤—è–∑–∏
    batches = relationship("InventoryBatch", back_populates="flower")
    movements = relationship("InventoryMovement", back_populates="flower")
    compositions = relationship("ProductComposition", back_populates="flower")

class Supplier(Base):
    """–ü–æ—Å—Ç–∞–≤—â–∏–∫–∏ —Ü–≤–µ—Ç–æ–≤"""
    __tablename__ = "suppliers"
    
    id = Column(Integer, primary_key=True)
    name = Column(String(255), nullable=False)
    contact_person = Column(String(255))
    phone = Column(String(20))
    email = Column(String(255))
    rating = Column(Numeric(3, 2), default=0.0)  # –†–µ–π—Ç–∏–Ω–≥ 0.00-5.00
    is_active = Column(Boolean, default=True)
    notes = Column(Text)  # –ü—Ä–∏–º–µ—á–∞–Ω–∏—è
    created_at = Column(DateTime, default=datetime.utcnow)
    
    # –°–≤—è–∑–∏
    supply_orders = relationship("SupplyOrder", back_populates="supplier")
    batches = relationship("InventoryBatch", back_populates="supplier")

class SupplyOrder(Base):
    """–ó–∞–∫–∞–∑—ã –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞–º"""
    __tablename__ = "supply_orders"
    
    id = Column(Integer, primary_key=True)
    supplier_id = Column(Integer, ForeignKey("suppliers.id"), nullable=False)
    florist_id = Column(Integer, ForeignKey("users.id"), nullable=False)
    status = Column(Enum(SupplyStatusEnum), default=SupplyStatusEnum.pending)
    total_amount = Column(Numeric(10, 2), default=0)
    notes = Column(Text)  # –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Ñ–ª–æ—Ä–∏—Å—Ç–∞
    delivery_date = Column(Date)  # –ü–ª–∞–Ω–∏—Ä—É–µ–º–∞—è –¥–∞—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏
    created_at = Column(DateTime, default=datetime.utcnow)
    approved_at = Column(DateTime)
    approved_by = Column(Integer, ForeignKey("users.id"))
    
    # –°–≤—è–∑–∏
    supplier = relationship("Supplier", back_populates="supply_orders")
    florist = relationship("User", foreign_keys=[florist_id])
    approver = relationship("User", foreign_keys=[approved_by])
    items = relationship("SupplyItem", back_populates="supply_order", cascade="all, delete-orphan")

class SupplyItem(Base):
    """–ü–æ–∑–∏—Ü–∏–∏ –≤ –∑–∞–∫–∞–∑–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫—É"""
    __tablename__ = "supply_items"
    
    id = Column(Integer, primary_key=True)
    supply_order_id = Column(Integer, ForeignKey("supply_orders.id"), nullable=False)
    flower_id = Column(Integer, ForeignKey("flowers.id"), nullable=False)
    quantity = Column(Integer, nullable=False)
    unit_price = Column(Numeric(10, 2), nullable=False)
    total_price = Column(Numeric(10, 2), nullable=False)
    
    # –°–≤—è–∑–∏
    supply_order = relationship("SupplyOrder", back_populates="items")
    flower = relationship("Flower")

class InventoryBatch(Base):
    """–ü–∞—Ä—Ç–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ —Å–∫–ª–∞–¥–µ"""
    __tablename__ = "inventory_batches"
    
    id = Column(Integer, primary_key=True)
    flower_id = Column(Integer, ForeignKey("flowers.id"), nullable=False)
    supplier_id = Column(Integer, ForeignKey("suppliers.id"))
    quantity = Column(Integer, nullable=False)
    purchase_price = Column(Numeric(10, 2))  # –ó–∞–∫—É–ø–æ—á–Ω–∞—è —Ü–µ–Ω–∞ –∑–∞ –µ–¥–∏–Ω–∏—Ü—É
    batch_date = Column(Date, default=datetime.utcnow().date)
    expire_date = Column(Date)  # –î–∞—Ç–∞ –∏—Å—Ç–µ—á–µ–Ω–∏—è —Å—Ä–æ–∫–∞ –≥–æ–¥–Ω–æ—Å—Ç–∏
    supply_order_id = Column(Integer, ForeignKey("supply_orders.id"))
    created_at = Column(DateTime, default=datetime.utcnow)
    
    # –°–≤—è–∑–∏
    flower = relationship("Flower", back_populates="batches")
    supplier = relationship("Supplier", back_populates="batches")
    supply_order = relationship("SupplyOrder")
    movements = relationship("InventoryMovement", back_populates="batch")

class InventoryMovement(Base):
    """–î–≤–∏–∂–µ–Ω–∏—è –ø–æ —Å–∫–ª–∞–¥—É"""
    __tablename__ = "inventory_movements"
    
    id = Column(Integer, primary_key=True)
    flower_id = Column(Integer, ForeignKey("flowers.id"), nullable=False)
    batch_id = Column(Integer, ForeignKey("inventory_batches.id"))
    movement_type = Column(Enum(MovementTypeEnum), nullable=False)
    quantity = Column(Integer, nullable=False)  # + –ø—Ä–∏—Ö–æ–¥, - —Ä–∞—Å—Ö–æ–¥
    order_id = Column(Integer, ForeignKey("orders.id"))  # –î–ª—è —Å–ø–∏—Å–∞–Ω–∏—è –ø—Ä–∏ –ø—Ä–æ–¥–∞–∂–µ
    supply_order_id = Column(Integer, ForeignKey("supply_orders.id"))  # –î–ª—è –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–π
    reason = Column(Text)  # –ü—Ä–∏—á–∏–Ω–∞ –¥–≤–∏–∂–µ–Ω–∏—è
    performed_by = Column(Integer, ForeignKey("users.id"))
    created_at = Column(DateTime, default=datetime.utcnow)
    
    # –°–≤—è–∑–∏
    flower = relationship("Flower", back_populates="movements")
    batch = relationship("InventoryBatch", back_populates="movements")
    order = relationship("Order")
    supply_order = relationship("SupplyOrder")
    performer = relationship("User")

class ProductComposition(Base):
    """–°–æ—Å—Ç–∞–≤ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ (—Ä–µ—Ü–µ–ø—Ç—ã –±—É–∫–µ—Ç–æ–≤)"""
    __tablename__ = "product_compositions"
    
    id = Column(Integer, primary_key=True)
    product_id = Column(Integer, ForeignKey("products.id"), nullable=False)
    flower_id = Column(Integer, ForeignKey("flowers.id"), nullable=False)
    quantity = Column(Integer, nullable=False)  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ü–≤–µ—Ç–æ–≤ –≤ –±—É–∫–µ—Ç–µ
    is_required = Column(Boolean, default=True)  # –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –∏–ª–∏ –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π
    
    # –°–≤—è–∑–∏
    product = relationship("Product")
    flower = relationship("Flower", back_populates="compositions")
    