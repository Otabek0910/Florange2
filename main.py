# main.py - –ø—Ä–æ—Å—Ç–∞—è –≤–µ—Ä—Å–∏—è —Å –∑–∞–∫—Ä—ã—Ç–∏–µ–º Redis
import asyncio
import logging
import sys
import platform
from aiogram import Bot, Dispatcher
from aiogram.fsm.storage.memory import MemoryStorage

from app.config import config
from app.handlers import start, catalog, cart, checkout, admin, orders, consultation, florist
from app.middleware.auth import AuthMiddleware
from app.middleware.state_validation import StateValidationMiddleware, ConsultationCleanupMiddleware
from app.database.database import init_db, close_db

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logging.getLogger('sqlalchemy.engine').setLevel(logging.WARNING)

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    bot = None
    
    try:
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        config.validate()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
        await init_db()
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ seed –¥–∞–Ω–Ω—ã—Ö –µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω –∞—Ä–≥—É–º–µ–Ω—Ç --seed
        if "--seed" in sys.argv:
            from app.utils.seed import load_seed_data
            await load_seed_data()
            return

        # –°–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
        storage = MemoryStorage()
        bot = Bot(token=config.BOT_TOKEN)
        dp = Dispatcher(storage=storage)

        # Middleware
        dp.message.middleware(AuthMiddleware())
        dp.callback_query.middleware(AuthMiddleware())
        dp.message.middleware(StateValidationMiddleware())
        dp.callback_query.middleware(StateValidationMiddleware())
        dp.message.middleware(ConsultationCleanupMiddleware(cleanup_frequency=100))
        print("‚úÖ Middleware –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")

        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ä–æ—É—Ç–µ—Ä–æ–≤
        dp.include_router(start.router)
        dp.include_router(catalog.router)
        dp.include_router(cart.router)
        dp.include_router(checkout.router)
        dp.include_router(admin.router)
        dp.include_router(orders.router)
        dp.include_router(consultation.router)
        dp.include_router(florist.router)
        
        print("üå∏ Florange Bot –∑–∞–ø—É—â–µ–Ω...")
        
        # –ó–∞–ø—É—Å–∫ polling
        await dp.start_polling(bot)
        
    except KeyboardInterrupt:
        print("\nüõë –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ...")
    finally:
        # –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –≤—Å–µ—Ö —Ä–µ—Å—É—Ä—Å–æ–≤
        print("üßπ –ó–∞–∫—Ä—ã–≤–∞–µ–º —Ä–µ—Å—É—Ä—Å—ã...")
        
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º Redis
        try:
            from app.utils.cart import cart_manager
            await cart_manager.close()
        except Exception as e:
            print(f"Redis close error: {e}")
        
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º –±–æ—Ç–∞
        if bot:
            await bot.session.close()
        
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º –ë–î
        await close_db()
        
        print("‚úÖ –í—Å–µ —Ä–µ—Å—É—Ä—Å—ã –∑–∞–∫—Ä—ã—Ç—ã")

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        pass