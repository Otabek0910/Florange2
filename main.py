# –í main.py –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–∞:

import asyncio, os, sys
from dotenv import load_dotenv
from aiogram import Bot, Dispatcher

from app.handlers import start, catalog, cart, checkout, orders, admin
from app.database import init_db

load_dotenv()

async def main():
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
    await init_db()
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–µ—Ñ–æ–ª—Ç–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
    print("üìã –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫...")
    try:
        from add_settings import add_default_settings
        await add_default_settings()
    except Exception as e:
        print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: {e}")
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ seed –¥–∞–Ω–Ω—ã—Ö –µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω –∞—Ä–≥—É–º–µ–Ω—Ç --seed
    if "--seed" in sys.argv:
        from app.utils.seed import load_seed_data
        await load_seed_data()
        return

    # –°–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫ —Å–µ—Ç–∏
    bot_token = os.getenv("BOT_TOKEN")
    if not bot_token:
        print("‚ùå BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env —Ñ–∞–π–ª–µ")
        return
    
    try:
        bot = Bot(token=bot_token)
        dp = Dispatcher()

        dp.include_router(start.router)
        dp.include_router(catalog.router)
        dp.include_router(cart.router)
        dp.include_router(checkout.router)
        dp.include_router(orders.router)
        dp.include_router(admin.router)

        print("ü§ñ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Telegram...")
        me = await bot.get_me()
        print(f"‚úÖ –ë–æ—Ç –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω: {me.first_name} (@{me.username})")
        
        print("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
        await dp.start_polling(bot)
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")
        print("\nüîç –í–æ–∑–º–æ–∂–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è:")
        print("1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ")
        print("2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –≤ .env")
        print("3. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å VPN/–ø—Ä–æ–∫—Å–∏")
        print("4. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Ç–µ—Å—Ç –ë–î: python test_db.py")
        
        # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º —Ç–µ—Å—Ç –ë–î
        print("\nüß™ –•–æ—Ç–∏—Ç–µ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –ë–î? (y/n)")
        # –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –º–æ–∂–Ω–æ —É–±—Ä–∞—Ç—å input
        try:
            choice = input().lower()
            if choice == 'y':
                await test_database_only()
        except:
            pass

async def test_database_only():
    """–¢–µ—Å—Ç —Ç–æ–ª—å–∫–æ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    print("\nüîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ë–î...")
    try:
        from app.models import User, RoleEnum
        from app.database import get_session
        
        async for session in get_session():
            # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            test_user = User(
                tg_id="test_123",
                first_name="Test User",
                lang="ru",
                role=RoleEnum.client
            )
            session.add(test_user)
            await session.commit()
            print("‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            from app.models import Settings
            from sqlalchemy import select
            settings_result = await session.execute(select(Settings))
            settings = settings_result.scalars().all()
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(settings)} –Ω–∞—Å—Ç—Ä–æ–µ–∫")
            
        print("üéâ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ë–î: {e}")

if __name__ == "__main__":
    asyncio.run(main())