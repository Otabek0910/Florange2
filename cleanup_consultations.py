# cleanup_consultations.py ‚Äî —Å–æ–∑–¥–∞—Ç—å –≤ –∫–æ—Ä–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞

import asyncio
import os
from datetime import datetime, timedelta
from sqlalchemy import create_engine, text
from dotenv import load_dotenv

load_dotenv()

DB_URL = f"postgresql://{os.getenv('DB_USER')}:{os.getenv('DB_PASS')}@{os.getenv('DB_HOST')}:{os.getenv('DB_PORT')}/{os.getenv('DB_NAME')}"

def cleanup_hanging_consultations():
    """–û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–∏—Å—à–∏—Ö –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π"""
    
    engine = create_engine(DB_URL)
    
    with engine.connect() as conn:
        # 1. –ù–∞—Ö–æ–¥–∏–º –∑–∞–≤–∏—Å—à–∏–µ pending –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ (—Å—Ç–∞—Ä—à–µ 15 –º–∏–Ω—É—Ç)
        result = conn.execute(text("""
            UPDATE consultations 
            SET status = 'expired', completed_at = NOW()
            WHERE status = 'pending' 
            AND created_at < NOW() - INTERVAL '15 minutes'
            RETURNING id, client_id, florist_id;
        """))
        
        updated = result.fetchall()
        print(f"üßπ Cleaned up {len(updated)} expired pending consultations")
        
        # 2. –ù–∞—Ö–æ–¥–∏–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –±–µ–∑ –Ω–µ–¥–∞–≤–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (—Å—Ç–∞—Ä—à–µ 2 —á–∞—Å–æ–≤)
        result2 = conn.execute(text("""
            UPDATE consultations 
            SET status = 'completed', completed_at = NOW()
            WHERE status = 'active' 
            AND started_at < NOW() - INTERVAL '2 hours'
            AND id NOT IN (
                SELECT DISTINCT consultation_id 
                FROM consultation_messages 
                WHERE created_at > NOW() - INTERVAL '30 minutes'
            )
            RETURNING id;
        """))
        
        auto_completed = result2.fetchall()
        print(f"üßπ Auto-completed {len(auto_completed)} stale active consultations")
        
        conn.commit()
        
        # 3. –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        result3 = conn.execute(text("""
            SELECT status, COUNT(*) as count
            FROM consultations 
            GROUP BY status
            ORDER BY status;
        """))
        
        print("\nüìä Current consultation status:")
        for row in result3.fetchall():
            print(f"   {row[0]}: {row[1]}")

if __name__ == "__main__":
    cleanup_hanging_consultations()